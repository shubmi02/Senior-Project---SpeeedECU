
SpeeedECU_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000530c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080055a4  080055a4  000065a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005604  08005604  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005604  08005604  00006604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800560c  0800560c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800560c  0800560c  0000660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005610  08005610  00006610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08005614  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  24000010  08005624  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000158  08005624  00007158  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fff8  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed9  00000000  00000000  00017036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00018f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000879  00000000  00000000  00019a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038e35  00000000  00000000  0001a291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec16  00000000  00000000  000530c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179cae  00000000  00000000  00061cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001db98a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d20  00000000  00000000  001db9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001de6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800558c 	.word	0x0800558c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800558c 	.word	0x0800558c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08d      	sub	sp, #52	@ 0x34
 80006f8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006fa:	4b61      	ldr	r3, [pc, #388]	@ (8000880 <main+0x18c>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d11b      	bne.n	800073e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000706:	f3bf 8f4f 	dsb	sy
}
 800070a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800070c:	f3bf 8f6f 	isb	sy
}
 8000710:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000712:	4b5b      	ldr	r3, [pc, #364]	@ (8000880 <main+0x18c>)
 8000714:	2200      	movs	r2, #0
 8000716:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800071a:	f3bf 8f4f 	dsb	sy
}
 800071e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000720:	f3bf 8f6f 	isb	sy
}
 8000724:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000726:	4b56      	ldr	r3, [pc, #344]	@ (8000880 <main+0x18c>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a55      	ldr	r2, [pc, #340]	@ (8000880 <main+0x18c>)
 800072c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000730:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000732:	f3bf 8f4f 	dsb	sy
}
 8000736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000738:	f3bf 8f6f 	isb	sy
}
 800073c:	e000      	b.n	8000740 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800073e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000740:	4b4f      	ldr	r3, [pc, #316]	@ (8000880 <main+0x18c>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000748:	2b00      	cmp	r3, #0
 800074a:	d138      	bne.n	80007be <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800074c:	4b4c      	ldr	r3, [pc, #304]	@ (8000880 <main+0x18c>)
 800074e:	2200      	movs	r2, #0
 8000750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000754:	f3bf 8f4f 	dsb	sy
}
 8000758:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800075a:	4b49      	ldr	r3, [pc, #292]	@ (8000880 <main+0x18c>)
 800075c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000760:	62bb      	str	r3, [r7, #40]	@ 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000764:	0b5b      	lsrs	r3, r3, #13
 8000766:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800076c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000774:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	015a      	lsls	r2, r3, #5
 800077a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800077e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000780:	6a3a      	ldr	r2, [r7, #32]
 8000782:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000784:	493e      	ldr	r1, [pc, #248]	@ (8000880 <main+0x18c>)
 8000786:	4313      	orrs	r3, r2
 8000788:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	1e5a      	subs	r2, r3, #1
 8000790:	623a      	str	r2, [r7, #32]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ef      	bne.n	8000776 <main+0x82>
    } while(sets-- != 0U);
 8000796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	627a      	str	r2, [r7, #36]	@ 0x24
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1e5      	bne.n	800076c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80007a0:	f3bf 8f4f 	dsb	sy
}
 80007a4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007a6:	4b36      	ldr	r3, [pc, #216]	@ (8000880 <main+0x18c>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a35      	ldr	r2, [pc, #212]	@ (8000880 <main+0x18c>)
 80007ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007b2:	f3bf 8f4f 	dsb	sy
}
 80007b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007b8:	f3bf 8f6f 	isb	sy
}
 80007bc:	e000      	b.n	80007c0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007be:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007c6:	bf00      	nop
 80007c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000884 <main+0x190>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d004      	beq.n	80007de <main+0xea>
 80007d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d6:	1e5a      	subs	r2, r3, #1
 80007d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80007da:	2b00      	cmp	r3, #0
 80007dc:	dcf4      	bgt.n	80007c8 <main+0xd4>
  if ( timeout < 0 )
 80007de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	da01      	bge.n	80007e8 <main+0xf4>
  {
  Error_Handler();
 80007e4:	f000 fa00 	bl	8000be8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fb30 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f852 	bl	8000894 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f0:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <main+0x190>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <main+0x190>)
 80007f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000800:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <main+0x190>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800080e:	2000      	movs	r0, #0
 8000810:	f000 fe8c 	bl	800152c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000814:	2100      	movs	r1, #0
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fea2 	bl	8001560 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800081c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000820:	62fb      	str	r3, [r7, #44]	@ 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000822:	bf00      	nop
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <main+0x190>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800082c:	2b00      	cmp	r3, #0
 800082e:	d104      	bne.n	800083a <main+0x146>
 8000830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000836:	2b00      	cmp	r3, #0
 8000838:	dcf4      	bgt.n	8000824 <main+0x130>
if ( timeout < 0 )
 800083a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800083c:	2b00      	cmp	r3, #0
 800083e:	da01      	bge.n	8000844 <main+0x150>
{
Error_Handler();
 8000840:	f000 f9d2 	bl	8000be8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f000 f93a 	bl	8000abc <MX_GPIO_Init>
  MX_UART7_Init();
 8000848:	f000 f8a0 	bl	800098c <MX_UART7_Init>
  MX_UART8_Init();
 800084c:	f000 f8ea 	bl	8000a24 <MX_UART8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t tx_buffer[27] = "Hello World \n";
 8000850:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <main+0x194>)
 8000852:	1d3c      	adds	r4, r7, #4
 8000854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000856:	c407      	stmia	r4!, {r0, r1, r2}
 8000858:	8023      	strh	r3, [r4, #0]
 800085a:	f107 0312 	add.w	r3, r7, #18
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	731a      	strb	r2, [r3, #12]
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
//	  HAL_Delay(1000);
//
//	  HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_9);

	  HAL_UART_Transmit(&huart8, "Hello World", 27, 10);
 8000868:	230a      	movs	r3, #10
 800086a:	221b      	movs	r2, #27
 800086c:	4907      	ldr	r1, [pc, #28]	@ (800088c <main+0x198>)
 800086e:	4808      	ldr	r0, [pc, #32]	@ (8000890 <main+0x19c>)
 8000870:	f003 fd46 	bl	8004300 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000874:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000878:	f000 fb7a 	bl	8000f70 <HAL_Delay>
	  HAL_UART_Transmit(&huart8, "Hello World", 27, 10);
 800087c:	bf00      	nop
 800087e:	e7f3      	b.n	8000868 <main+0x174>
 8000880:	e000ed00 	.word	0xe000ed00
 8000884:	58024400 	.word	0x58024400
 8000888:	080055b0 	.word	0x080055b0
 800088c:	080055a4 	.word	0x080055a4
 8000890:	240000c0 	.word	0x240000c0

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09c      	sub	sp, #112	@ 0x70
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089e:	224c      	movs	r2, #76	@ 0x4c
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fe46 	bl	8005534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2220      	movs	r2, #32
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 fe40 	bl	8005534 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008b4:	2004      	movs	r0, #4
 80008b6:	f000 fe67 	bl	8001588 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b31      	ldr	r3, [pc, #196]	@ (8000984 <SystemClock_Config+0xf0>)
 80008c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c2:	4a30      	ldr	r2, [pc, #192]	@ (8000984 <SystemClock_Config+0xf0>)
 80008c4:	f023 0301 	bic.w	r3, r3, #1
 80008c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <SystemClock_Config+0xf0>)
 80008cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <SystemClock_Config+0xf4>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000988 <SystemClock_Config+0xf4>)
 80008da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <SystemClock_Config+0xf4>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008ec:	bf00      	nop
 80008ee:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <SystemClock_Config+0xf4>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008fa:	d1f8      	bne.n	80008ee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fc:	2302      	movs	r3, #2
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000900:	2301      	movs	r3, #1
 8000902:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000908:	2302      	movs	r3, #2
 800090a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090c:	2300      	movs	r3, #0
 800090e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000914:	2332      	movs	r3, #50	@ 0x32
 8000916:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800091c:	2305      	movs	r3, #5
 800091e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000920:	2302      	movs	r3, #2
 8000922:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000924:	230c      	movs	r3, #12
 8000926:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000928:	2300      	movs	r3, #0
 800092a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fe81 	bl	800163c <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000940:	f000 f952 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	233f      	movs	r3, #63	@ 0x3f
 8000946:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	2303      	movs	r3, #3
 800094a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000950:	2308      	movs	r3, #8
 8000952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000958:	2340      	movs	r3, #64	@ 0x40
 800095a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000960:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000962:	2340      	movs	r3, #64	@ 0x40
 8000964:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2102      	movs	r1, #2
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fac0 	bl	8001ef0 <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000976:	f000 f937 	bl	8000be8 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3770      	adds	r7, #112	@ 0x70
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	58000400 	.word	0x58000400
 8000988:	58024800 	.word	0x58024800

0800098c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000990:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <MX_UART7_Init+0x90>)
 8000992:	4a23      	ldr	r2, [pc, #140]	@ (8000a20 <MX_UART7_Init+0x94>)
 8000994:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000996:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <MX_UART7_Init+0x90>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ce:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80009d4:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009d6:	f003 fc43 	bl	8004260 <HAL_UART_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80009e0:	f000 f902 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009e8:	f004 fcd9 	bl	800539e <HAL_UARTEx_SetTxFifoThreshold>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80009f2:	f000 f8f9 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <MX_UART7_Init+0x90>)
 80009fa:	f004 fd0e 	bl	800541a <HAL_UARTEx_SetRxFifoThreshold>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f000 f8f0 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MX_UART7_Init+0x90>)
 8000a0a:	f004 fc8f 	bl	800532c <HAL_UARTEx_DisableFifoMode>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f000 f8e8 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2400002c 	.word	0x2400002c
 8000a20:	40007800 	.word	0x40007800

08000a24 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000a28:	4b22      	ldr	r3, [pc, #136]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	@ (8000ab8 <MX_UART8_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a6e:	f003 fbf7 	bl	8004260 <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 f8b6 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a80:	f004 fc8d 	bl	800539e <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f000 f8ad 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000a92:	f004 fcc2 	bl	800541a <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f000 f8a4 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_UART8_Init+0x90>)
 8000aa2:	f004 fc43 	bl	800532c <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 f89c 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	240000c0 	.word	0x240000c0
 8000ab8:	40007c00 	.word	0x40007c00

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b41      	ldr	r3, [pc, #260]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	4a3f      	ldr	r2, [pc, #252]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	f003 0320 	and.w	r3, r3, #32
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af6:	4a38      	ldr	r2, [pc, #224]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b00:	4b35      	ldr	r3, [pc, #212]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b32      	ldr	r3, [pc, #200]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	4a30      	ldr	r2, [pc, #192]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b32:	4a29      	ldr	r2, [pc, #164]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3c:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4a:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b50:	4a21      	ldr	r2, [pc, #132]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <MX_GPIO_Init+0x11c>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b6e:	481b      	ldr	r0, [pc, #108]	@ (8000bdc <MX_GPIO_Init+0x120>)
 8000b70:	f000 fcc2 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4813      	ldr	r0, [pc, #76]	@ (8000bdc <MX_GPIO_Init+0x120>)
 8000b8e:	f000 fb03 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : TPS1_Pin */
  GPIO_InitStruct.Pin = TPS1_Pin;
 8000b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TPS1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480e      	ldr	r0, [pc, #56]	@ (8000be0 <MX_GPIO_Init+0x124>)
 8000ba8:	f000 faf6 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4806      	ldr	r0, [pc, #24]	@ (8000be4 <MX_GPIO_Init+0x128>)
 8000bca:	f000 fae5 	bl	8001198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	@ 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	58020400 	.word	0x58020400
 8000be0:	58020800 	.word	0x58020800
 8000be4:	58020000 	.word	0x58020000

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <HAL_MspInit+0x30>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c00:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_MspInit+0x30>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_MspInit+0x30>)
 8000c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	58024400 	.word	0x58024400

08000c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0bc      	sub	sp, #240	@ 0xf0
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	22c0      	movs	r2, #192	@ 0xc0
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 fc73 	bl	8005534 <memset>
  if(huart->Instance==UART7)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a4c      	ldr	r2, [pc, #304]	@ (8000d84 <HAL_UART_MspInit+0x15c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d146      	bne.n	8000ce6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000c58:	f04f 0202 	mov.w	r2, #2
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fcca 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c7a:	f7ff ffb5 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000c7e:	4b42      	ldr	r3, [pc, #264]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c84:	4a40      	ldr	r2, [pc, #256]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000c86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	4a39      	ldr	r2, [pc, #228]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cac:	4b36      	ldr	r3, [pc, #216]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb2:	f003 0320 	and.w	r3, r3, #32
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cba:	23c0      	movs	r3, #192	@ 0xc0
 8000cbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cd8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cdc:	4619      	mov	r1, r3
 8000cde:	482b      	ldr	r0, [pc, #172]	@ (8000d8c <HAL_UART_MspInit+0x164>)
 8000ce0:	f000 fa5a 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8000ce4:	e04a      	b.n	8000d7c <HAL_UART_MspInit+0x154>
  else if(huart->Instance==UART8)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a29      	ldr	r2, [pc, #164]	@ (8000d90 <HAL_UART_MspInit+0x168>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d145      	bne.n	8000d7c <HAL_UART_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000cf0:	f04f 0202 	mov.w	r2, #2
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fc7e 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000d12:	f7ff ff69 	bl	8000be8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000d1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3a:	4a13      	ldr	r2, [pc, #76]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d44:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <HAL_UART_MspInit+0x160>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d52:	2303      	movs	r3, #3
 8000d54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d70:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <HAL_UART_MspInit+0x16c>)
 8000d78:	f000 fa0e 	bl	8001198 <HAL_GPIO_Init>
}
 8000d7c:	bf00      	nop
 8000d7e:	37f0      	adds	r7, #240	@ 0xf0
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40007800 	.word	0x40007800
 8000d88:	58024400 	.word	0x58024400
 8000d8c:	58021400 	.word	0x58021400
 8000d90:	40007c00 	.word	0x40007c00
 8000d94:	58021000 	.word	0x58021000

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <NMI_Handler+0x4>

08000da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <MemManage_Handler+0x4>

08000db0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dee:	f000 f89f 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dfc:	f7ff fbe4 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	@ (8000e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	@ (8000e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f004 fb8d 	bl	8005544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fc63 	bl	80006f4 <main>
  bx  lr
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e38:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e3c:	08005614 	.word	0x08005614
  ldr r2, =_sbss
 8000e40:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e44:	24000158 	.word	0x24000158

08000e48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC3_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e52:	2003      	movs	r0, #3
 8000e54:	f000 f96e 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e58:	f001 fa00 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_Init+0x68>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	4913      	ldr	r1, [pc, #76]	@ (8000eb8 <HAL_Init+0x6c>)
 8000e6a:	5ccb      	ldrb	r3, [r1, r3]
 8000e6c:	f003 031f 	and.w	r3, r3, #31
 8000e70:	fa22 f303 	lsr.w	r3, r2, r3
 8000e74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_Init+0x68>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb8 <HAL_Init+0x6c>)
 8000e80:	5cd3      	ldrb	r3, [r2, r3]
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <HAL_Init+0x70>)
 8000e8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <HAL_Init+0x74>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f814 	bl	8000ec4 <HAL_InitTick>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e002      	b.n	8000eac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea6:	f7ff fea5 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	080055cc 	.word	0x080055cc
 8000ebc:	24000004 	.word	0x24000004
 8000ec0:	24000000 	.word	0x24000000

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_InitTick+0x60>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e021      	b.n	8000f1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <HAL_InitTick+0x64>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <HAL_InitTick+0x60>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f945 	bl	800117e <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f0c:	f000 f91d 	bl	800114a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <HAL_InitTick+0x68>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2400000c 	.word	0x2400000c
 8000f28:	24000000 	.word	0x24000000
 8000f2c:	24000008 	.word	0x24000008

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2400000c 	.word	0x2400000c
 8000f54:	24000154 	.word	0x24000154

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	24000154 	.word	0x24000154

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2400000c 	.word	0x2400000c

08000fb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_GetREVID+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	0c1b      	lsrs	r3, r3, #16
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	5c001000 	.word	0x5c001000

08000fd0 <__NVIC_SetPriorityGrouping>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	05fa0000 	.word	0x05fa0000

08001018 <__NVIC_GetPriorityGrouping>:
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_SetPriority>:
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	@ (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	@ (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	@ 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff47 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff5e 	bl	8001018 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff90 	bl	8001088 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5f 	bl	8001034 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffb2 	bl	80010f0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	@ 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011a6:	4b89      	ldr	r3, [pc, #548]	@ (80013cc <HAL_GPIO_Init+0x234>)
 80011a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011aa:	e194      	b.n	80014d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8186 	beq.w	80014d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d005      	beq.n	80011dc <HAL_GPIO_Init+0x44>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d130      	bne.n	800123e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001212:	2201      	movs	r2, #1
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 0201 	and.w	r2, r3, #1
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b03      	cmp	r3, #3
 8001248:	d017      	beq.n	800127a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d123      	bne.n	80012ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	691a      	ldr	r2, [r3, #16]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	08da      	lsrs	r2, r3, #3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3208      	adds	r2, #8
 80012c8:	69b9      	ldr	r1, [r7, #24]
 80012ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0203 	and.w	r2, r3, #3
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80e0 	beq.w	80014d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001310:	4b2f      	ldr	r3, [pc, #188]	@ (80013d0 <HAL_GPIO_Init+0x238>)
 8001312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001316:	4a2e      	ldr	r2, [pc, #184]	@ (80013d0 <HAL_GPIO_Init+0x238>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001320:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <HAL_GPIO_Init+0x238>)
 8001322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a29      	ldr	r2, [pc, #164]	@ (80013d4 <HAL_GPIO_Init+0x23c>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a20      	ldr	r2, [pc, #128]	@ (80013d8 <HAL_GPIO_Init+0x240>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d052      	beq.n	8001400 <HAL_GPIO_Init+0x268>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a1f      	ldr	r2, [pc, #124]	@ (80013dc <HAL_GPIO_Init+0x244>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d031      	beq.n	80013c6 <HAL_GPIO_Init+0x22e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a1e      	ldr	r2, [pc, #120]	@ (80013e0 <HAL_GPIO_Init+0x248>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d02b      	beq.n	80013c2 <HAL_GPIO_Init+0x22a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a1d      	ldr	r2, [pc, #116]	@ (80013e4 <HAL_GPIO_Init+0x24c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d025      	beq.n	80013be <HAL_GPIO_Init+0x226>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a1c      	ldr	r2, [pc, #112]	@ (80013e8 <HAL_GPIO_Init+0x250>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01f      	beq.n	80013ba <HAL_GPIO_Init+0x222>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <HAL_GPIO_Init+0x254>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x21e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a1a      	ldr	r2, [pc, #104]	@ (80013f0 <HAL_GPIO_Init+0x258>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x21a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a19      	ldr	r2, [pc, #100]	@ (80013f4 <HAL_GPIO_Init+0x25c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x216>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a18      	ldr	r2, [pc, #96]	@ (80013f8 <HAL_GPIO_Init+0x260>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x212>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a17      	ldr	r2, [pc, #92]	@ (80013fc <HAL_GPIO_Init+0x264>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x20e>
 80013a2:	2309      	movs	r3, #9
 80013a4:	e02d      	b.n	8001402 <HAL_GPIO_Init+0x26a>
 80013a6:	230a      	movs	r3, #10
 80013a8:	e02b      	b.n	8001402 <HAL_GPIO_Init+0x26a>
 80013aa:	2308      	movs	r3, #8
 80013ac:	e029      	b.n	8001402 <HAL_GPIO_Init+0x26a>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e027      	b.n	8001402 <HAL_GPIO_Init+0x26a>
 80013b2:	2306      	movs	r3, #6
 80013b4:	e025      	b.n	8001402 <HAL_GPIO_Init+0x26a>
 80013b6:	2305      	movs	r3, #5
 80013b8:	e023      	b.n	8001402 <HAL_GPIO_Init+0x26a>
 80013ba:	2304      	movs	r3, #4
 80013bc:	e021      	b.n	8001402 <HAL_GPIO_Init+0x26a>
 80013be:	2303      	movs	r3, #3
 80013c0:	e01f      	b.n	8001402 <HAL_GPIO_Init+0x26a>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e01d      	b.n	8001402 <HAL_GPIO_Init+0x26a>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e01b      	b.n	8001402 <HAL_GPIO_Init+0x26a>
 80013ca:	bf00      	nop
 80013cc:	58000080 	.word	0x58000080
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58000400 	.word	0x58000400
 80013d8:	58020000 	.word	0x58020000
 80013dc:	58020400 	.word	0x58020400
 80013e0:	58020800 	.word	0x58020800
 80013e4:	58020c00 	.word	0x58020c00
 80013e8:	58021000 	.word	0x58021000
 80013ec:	58021400 	.word	0x58021400
 80013f0:	58021800 	.word	0x58021800
 80013f4:	58021c00 	.word	0x58021c00
 80013f8:	58022000 	.word	0x58022000
 80013fc:	58022400 	.word	0x58022400
 8001400:	2300      	movs	r3, #0
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	f002 0203 	and.w	r2, r2, #3
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	4093      	lsls	r3, r2
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001412:	4938      	ldr	r1, [pc, #224]	@ (80014f4 <HAL_GPIO_Init+0x35c>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001446:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800144e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001474:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	3301      	adds	r3, #1
 80014d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f47f ae63 	bne.w	80011ac <HAL_GPIO_Init+0x14>
  }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3724      	adds	r7, #36	@ 0x24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	58000400 	.word	0x58000400

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001534:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <HAL_HSEM_FastTake+0x2c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3320      	adds	r3, #32
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	4a07      	ldr	r2, [pc, #28]	@ (800155c <HAL_HSEM_FastTake+0x30>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d101      	bne.n	8001548 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	e000      	b.n	800154a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	58026400 	.word	0x58026400
 800155c:	80000300 	.word	0x80000300

08001560 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800156a:	4906      	ldr	r1, [pc, #24]	@ (8001584 <HAL_HSEM_Release+0x24>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	58026400 	.word	0x58026400

08001588 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001590:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <HAL_PWREx_ConfigSupply+0xb0>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	2b06      	cmp	r3, #6
 800159a:	d00a      	beq.n	80015b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800159c:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <HAL_PWREx_ConfigSupply+0xb0>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d001      	beq.n	80015ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e040      	b.n	8001630 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e03e      	b.n	8001630 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <HAL_PWREx_ConfigSupply+0xb0>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80015ba:	491f      	ldr	r1, [pc, #124]	@ (8001638 <HAL_PWREx_ConfigSupply+0xb0>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4313      	orrs	r3, r2
 80015c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015c2:	f7ff fcc9 	bl	8000f58 <HAL_GetTick>
 80015c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015c8:	e009      	b.n	80015de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015ca:	f7ff fcc5 	bl	8000f58 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015d8:	d901      	bls.n	80015de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e028      	b.n	8001630 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015de:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <HAL_PWREx_ConfigSupply+0xb0>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015ea:	d1ee      	bne.n	80015ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b1e      	cmp	r3, #30
 80015f0:	d008      	beq.n	8001604 <HAL_PWREx_ConfigSupply+0x7c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80015f6:	d005      	beq.n	8001604 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b1d      	cmp	r3, #29
 80015fc:	d002      	beq.n	8001604 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b2d      	cmp	r3, #45	@ 0x2d
 8001602:	d114      	bne.n	800162e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001604:	f7ff fca8 	bl	8000f58 <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800160a:	e009      	b.n	8001620 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800160c:	f7ff fca4 	bl	8000f58 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800161a:	d901      	bls.n	8001620 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e007      	b.n	8001630 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <HAL_PWREx_ConfigSupply+0xb0>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800162c:	d1ee      	bne.n	800160c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	58024800 	.word	0x58024800

0800163c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	@ 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f000 bc48 	b.w	8001ee0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8088 	beq.w	800176e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	4b99      	ldr	r3, [pc, #612]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001668:	4b96      	ldr	r3, [pc, #600]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800166a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800166e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001670:	2b10      	cmp	r3, #16
 8001672:	d007      	beq.n	8001684 <HAL_RCC_OscConfig+0x48>
 8001674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001676:	2b18      	cmp	r3, #24
 8001678:	d111      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
 800167a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d10c      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	4b8f      	ldr	r3, [pc, #572]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d06d      	beq.n	800176c <HAL_RCC_OscConfig+0x130>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d169      	bne.n	800176c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	f000 bc21 	b.w	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x7a>
 80016a8:	4b86      	ldr	r3, [pc, #536]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a85      	ldr	r2, [pc, #532]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e02e      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x9c>
 80016be:	4b81      	ldr	r3, [pc, #516]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a80      	ldr	r2, [pc, #512]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b7e      	ldr	r3, [pc, #504]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7d      	ldr	r2, [pc, #500]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0xc0>
 80016e2:	4b78      	ldr	r3, [pc, #480]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a77      	ldr	r2, [pc, #476]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b75      	ldr	r3, [pc, #468]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a74      	ldr	r2, [pc, #464]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016fc:	4b71      	ldr	r3, [pc, #452]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a70      	ldr	r2, [pc, #448]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b6e      	ldr	r3, [pc, #440]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a6d      	ldr	r2, [pc, #436]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800170e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fc1c 	bl	8000f58 <HAL_GetTick>
 8001720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fc18 	bl	8000f58 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	@ 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e3d4      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001736:	4b63      	ldr	r3, [pc, #396]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0xe8>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fc08 	bl	8000f58 <HAL_GetTick>
 8001748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fc04 	bl	8000f58 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	@ 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e3c0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800175e:	4b59      	ldr	r3, [pc, #356]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x110>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80ca 	beq.w	8001910 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177c:	4b51      	ldr	r3, [pc, #324]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001784:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001786:	4b4f      	ldr	r3, [pc, #316]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_RCC_OscConfig+0x166>
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	2b18      	cmp	r3, #24
 8001796:	d156      	bne.n	8001846 <HAL_RCC_OscConfig+0x20a>
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d151      	bne.n	8001846 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a2:	4b48      	ldr	r3, [pc, #288]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x17e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e392      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017ba:	4b42      	ldr	r3, [pc, #264]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 0219 	bic.w	r2, r3, #25
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	493f      	ldr	r1, [pc, #252]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fbc4 	bl	8000f58 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff fbc0 	bl	8000f58 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e37c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e6:	4b37      	ldr	r3, [pc, #220]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	f7ff fbe1 	bl	8000fb8 <HAL_GetREVID>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d817      	bhi.n	8001830 <HAL_RCC_OscConfig+0x1f4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b40      	cmp	r3, #64	@ 0x40
 8001806:	d108      	bne.n	800181a <HAL_RCC_OscConfig+0x1de>
 8001808:	4b2e      	ldr	r3, [pc, #184]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001810:	4a2c      	ldr	r2, [pc, #176]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001816:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001818:	e07a      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	4926      	ldr	r1, [pc, #152]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800182e:	e06f      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	4921      	ldr	r1, [pc, #132]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001844:	e064      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d047      	beq.n	80018de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800184e:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 0219 	bic.w	r2, r3, #25
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	491a      	ldr	r1, [pc, #104]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fb7a 	bl	8000f58 <HAL_GetTick>
 8001864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fb76 	bl	8000f58 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e332      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800187a:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	f7ff fb97 	bl	8000fb8 <HAL_GetREVID>
 800188a:	4603      	mov	r3, r0
 800188c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001890:	4293      	cmp	r3, r2
 8001892:	d819      	bhi.n	80018c8 <HAL_RCC_OscConfig+0x28c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b40      	cmp	r3, #64	@ 0x40
 800189a:	d108      	bne.n	80018ae <HAL_RCC_OscConfig+0x272>
 800189c:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80018a4:	4a07      	ldr	r2, [pc, #28]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80018a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018aa:	6053      	str	r3, [r2, #4]
 80018ac:	e030      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	031b      	lsls	r3, r3, #12
 80018bc:	4901      	ldr	r1, [pc, #4]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
 80018c2:	e025      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
 80018c4:	58024400 	.word	0x58024400
 80018c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	4997      	ldr	r1, [pc, #604]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	e018      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b95      	ldr	r3, [pc, #596]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a94      	ldr	r2, [pc, #592]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb35 	bl	8000f58 <HAL_GetTick>
 80018ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fb31 	bl	8000f58 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e2ed      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001904:	4b8b      	ldr	r3, [pc, #556]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a9 	beq.w	8001a70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191e:	4b85      	ldr	r3, [pc, #532]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001928:	4b82      	ldr	r3, [pc, #520]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d007      	beq.n	8001944 <HAL_RCC_OscConfig+0x308>
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b18      	cmp	r3, #24
 8001938:	d13a      	bne.n	80019b0 <HAL_RCC_OscConfig+0x374>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d135      	bne.n	80019b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001944:	4b7b      	ldr	r3, [pc, #492]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x320>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b80      	cmp	r3, #128	@ 0x80
 8001956:	d001      	beq.n	800195c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e2c1      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800195c:	f7ff fb2c 	bl	8000fb8 <HAL_GetREVID>
 8001960:	4603      	mov	r3, r0
 8001962:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001966:	4293      	cmp	r3, r2
 8001968:	d817      	bhi.n	800199a <HAL_RCC_OscConfig+0x35e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b20      	cmp	r3, #32
 8001970:	d108      	bne.n	8001984 <HAL_RCC_OscConfig+0x348>
 8001972:	4b70      	ldr	r3, [pc, #448]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800197a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 800197c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001980:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001982:	e075      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001984:	4b6b      	ldr	r3, [pc, #428]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	069b      	lsls	r3, r3, #26
 8001992:	4968      	ldr	r1, [pc, #416]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001998:	e06a      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800199a:	4b66      	ldr	r3, [pc, #408]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	061b      	lsls	r3, r3, #24
 80019a8:	4962      	ldr	r1, [pc, #392]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019ae:	e05f      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d042      	beq.n	8001a3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fac8 	bl	8000f58 <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019cc:	f7ff fac4 	bl	8000f58 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e280      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019de:	4b55      	ldr	r3, [pc, #340]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019ea:	f7ff fae5 	bl	8000fb8 <HAL_GetREVID>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d817      	bhi.n	8001a28 <HAL_RCC_OscConfig+0x3ec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d108      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3d6>
 8001a00:	4b4c      	ldr	r3, [pc, #304]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001a08:	4a4a      	ldr	r2, [pc, #296]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a0e:	6053      	str	r3, [r2, #4]
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
 8001a12:	4b48      	ldr	r3, [pc, #288]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	069b      	lsls	r3, r3, #26
 8001a20:	4944      	ldr	r1, [pc, #272]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
 8001a26:	e023      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
 8001a28:	4b42      	ldr	r3, [pc, #264]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	493f      	ldr	r1, [pc, #252]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
 8001a3c:	e018      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a3c      	ldr	r2, [pc, #240]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fa85 	bl	8000f58 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a52:	f7ff fa81 	bl	8000f58 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e23d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a64:	4b33      	ldr	r3, [pc, #204]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d036      	beq.n	8001aea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d019      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a84:	4b2b      	ldr	r3, [pc, #172]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a88:	4a2a      	ldr	r2, [pc, #168]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff fa62 	bl	8000f58 <HAL_GetTick>
 8001a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fa5e 	bl	8000f58 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e21a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aaa:	4b22      	ldr	r3, [pc, #136]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x45c>
 8001ab6:	e018      	b.n	8001aea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001abc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa48 	bl	8000f58 <HAL_GetTick>
 8001ac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff fa44 	bl	8000f58 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e200      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d039      	beq.n	8001b6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fa25 	bl	8000f58 <HAL_GetTick>
 8001b0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b12:	f7ff fa21 	bl	8000f58 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1dd      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x4d6>
 8001b30:	e01b      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
 8001b32:	bf00      	nop
 8001b34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b38:	4b9b      	ldr	r3, [pc, #620]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a9a      	ldr	r2, [pc, #616]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b44:	f7ff fa08 	bl	8000f58 <HAL_GetTick>
 8001b48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b4c:	f7ff fa04 	bl	8000f58 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1c0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b5e:	4b92      	ldr	r3, [pc, #584]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8081 	beq.w	8001c7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b78:	4b8c      	ldr	r3, [pc, #560]	@ (8001dac <HAL_RCC_OscConfig+0x770>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a8b      	ldr	r2, [pc, #556]	@ (8001dac <HAL_RCC_OscConfig+0x770>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b84:	f7ff f9e8 	bl	8000f58 <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7ff f9e4 	bl	8000f58 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	@ 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1a0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b9e:	4b83      	ldr	r3, [pc, #524]	@ (8001dac <HAL_RCC_OscConfig+0x770>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x584>
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bbe:	e02d      	b.n	8001c1c <HAL_RCC_OscConfig+0x5e0>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x5a6>
 8001bc8:	4b77      	ldr	r3, [pc, #476]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bcc:	4a76      	ldr	r2, [pc, #472]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd4:	4b74      	ldr	r3, [pc, #464]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd8:	4a73      	ldr	r2, [pc, #460]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x5e0>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x5c8>
 8001bea:	4b6f      	ldr	r3, [pc, #444]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	4a6e      	ldr	r2, [pc, #440]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfa:	4a6b      	ldr	r2, [pc, #428]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0x5e0>
 8001c04:	4b68      	ldr	r3, [pc, #416]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	4a67      	ldr	r2, [pc, #412]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c10:	4b65      	ldr	r3, [pc, #404]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c14:	4a64      	ldr	r2, [pc, #400]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d015      	beq.n	8001c50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff f998 	bl	8000f58 <HAL_GetTick>
 8001c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f994 	bl	8000f58 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e14e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c42:	4b59      	ldr	r3, [pc, #356]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0ee      	beq.n	8001c2c <HAL_RCC_OscConfig+0x5f0>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f982 	bl	8000f58 <HAL_GetTick>
 8001c54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff f97e 	bl	8000f58 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e138      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ee      	bne.n	8001c58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 812d 	beq.w	8001ede <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c84:	4b48      	ldr	r3, [pc, #288]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c8c:	2b18      	cmp	r3, #24
 8001c8e:	f000 80bd 	beq.w	8001e0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	f040 809e 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	4b42      	ldr	r3, [pc, #264]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a41      	ldr	r2, [pc, #260]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f956 	bl	8000f58 <HAL_GetTick>
 8001cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff f952 	bl	8000f58 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e10e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cc2:	4b39      	ldr	r3, [pc, #228]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cce:	4b36      	ldr	r3, [pc, #216]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cd2:	4b37      	ldr	r3, [pc, #220]	@ (8001db0 <HAL_RCC_OscConfig+0x774>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	4931      	ldr	r1, [pc, #196]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cec:	3b01      	subs	r3, #1
 8001cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	025b      	lsls	r3, r3, #9
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d02:	3b01      	subs	r3, #1
 8001d04:	041b      	lsls	r3, r3, #16
 8001d06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d10:	3b01      	subs	r3, #1
 8001d12:	061b      	lsls	r3, r3, #24
 8001d14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001d18:	4923      	ldr	r1, [pc, #140]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d1e:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d22:	4a21      	ldr	r2, [pc, #132]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d2e:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <HAL_RCC_OscConfig+0x778>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d36:	00d2      	lsls	r2, r2, #3
 8001d38:	491b      	ldr	r1, [pc, #108]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	f023 020c 	bic.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	4917      	ldr	r1, [pc, #92]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d50:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	f023 0202 	bic.w	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5c:	4912      	ldr	r1, [pc, #72]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	4a10      	ldr	r2, [pc, #64]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d72:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d86:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8a:	4a07      	ldr	r2, [pc, #28]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d92:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a04      	ldr	r2, [pc, #16]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7ff f8db 	bl	8000f58 <HAL_GetTick>
 8001da2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001da4:	e011      	b.n	8001dca <HAL_RCC_OscConfig+0x78e>
 8001da6:	bf00      	nop
 8001da8:	58024400 	.word	0x58024400
 8001dac:	58024800 	.word	0x58024800
 8001db0:	fffffc0c 	.word	0xfffffc0c
 8001db4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff f8ce 	bl	8000f58 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e08a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dca:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x77c>
 8001dd6:	e082      	b.n	8001ede <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	4b43      	ldr	r3, [pc, #268]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a42      	ldr	r2, [pc, #264]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001dde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f8b8 	bl	8000f58 <HAL_GetTick>
 8001de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f8b4 	bl	8000f58 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e070      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x7b0>
 8001e0a:	e068      	b.n	8001ede <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e12:	4b35      	ldr	r3, [pc, #212]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d031      	beq.n	8001e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f003 0203 	and.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d12a      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d122      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d11a      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0a5b      	lsrs	r3, r3, #9
 8001e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d111      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	0c1b      	lsrs	r3, r3, #16
 8001e64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0e1b      	lsrs	r3, r3, #24
 8001e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e02b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e88:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d01f      	beq.n	8001ede <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	4a11      	ldr	r2, [pc, #68]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eaa:	f7ff f855 	bl	8000f58 <HAL_GetTick>
 8001eae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001eb0:	bf00      	nop
 8001eb2:	f7ff f851 	bl	8000f58 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d0f9      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_RCC_OscConfig+0x8b0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001eca:	00d2      	lsls	r2, r2, #3
 8001ecc:	4906      	ldr	r1, [pc, #24]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	4a04      	ldr	r2, [pc, #16]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3730      	adds	r7, #48	@ 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	ffff0007 	.word	0xffff0007

08001ef0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e19c      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b8a      	ldr	r3, [pc, #552]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d910      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b87      	ldr	r3, [pc, #540]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 020f 	bic.w	r2, r3, #15
 8001f1a:	4985      	ldr	r1, [pc, #532]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b83      	ldr	r3, [pc, #524]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e184      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d010      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	4b7b      	ldr	r3, [pc, #492]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d908      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f50:	4b78      	ldr	r3, [pc, #480]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4975      	ldr	r1, [pc, #468]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d010      	beq.n	8001f90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	4b70      	ldr	r3, [pc, #448]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	496a      	ldr	r1, [pc, #424]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d010      	beq.n	8001fbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	4b64      	ldr	r3, [pc, #400]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d908      	bls.n	8001fbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fac:	4b61      	ldr	r3, [pc, #388]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	495e      	ldr	r1, [pc, #376]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d010      	beq.n	8001fec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69da      	ldr	r2, [r3, #28]
 8001fce:	4b59      	ldr	r3, [pc, #356]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d908      	bls.n	8001fec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fda:	4b56      	ldr	r3, [pc, #344]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4953      	ldr	r1, [pc, #332]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	429a      	cmp	r2, r3
 8002006:	d908      	bls.n	800201a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b4a      	ldr	r3, [pc, #296]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f023 020f 	bic.w	r2, r3, #15
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4947      	ldr	r1, [pc, #284]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002016:	4313      	orrs	r3, r2
 8002018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d055      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002026:	4b43      	ldr	r3, [pc, #268]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4940      	ldr	r1, [pc, #256]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002034:	4313      	orrs	r3, r2
 8002036:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002040:	4b3c      	ldr	r3, [pc, #240]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d121      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0f6      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d107      	bne.n	8002068 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002058:	4b36      	ldr	r3, [pc, #216]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d115      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0ea      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002070:	4b30      	ldr	r3, [pc, #192]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0de      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002080:	4b2c      	ldr	r3, [pc, #176]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d6      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002090:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f023 0207 	bic.w	r2, r3, #7
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4925      	ldr	r1, [pc, #148]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a2:	f7fe ff59 	bl	8000f58 <HAL_GetTick>
 80020a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020aa:	f7fe ff55 	bl	8000f58 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0be      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d1eb      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d208      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ee:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	490e      	ldr	r1, [pc, #56]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d214      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 020f 	bic.w	r2, r3, #15
 8002116:	4906      	ldr	r1, [pc, #24]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e086      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
 8002130:	52002000 	.word	0x52002000
 8002134:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002150:	429a      	cmp	r2, r3
 8002152:	d208      	bcs.n	8002166 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002154:	4b3c      	ldr	r3, [pc, #240]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	4939      	ldr	r1, [pc, #228]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002162:	4313      	orrs	r3, r2
 8002164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d010      	beq.n	8002194 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	4b34      	ldr	r3, [pc, #208]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800217e:	429a      	cmp	r2, r3
 8002180:	d208      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002182:	4b31      	ldr	r3, [pc, #196]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	492e      	ldr	r1, [pc, #184]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002190:	4313      	orrs	r3, r2
 8002192:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	d010      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	4b28      	ldr	r3, [pc, #160]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d208      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021b0:	4b25      	ldr	r3, [pc, #148]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4922      	ldr	r1, [pc, #136]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d010      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021da:	429a      	cmp	r2, r3
 80021dc:	d208      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021de:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4917      	ldr	r1, [pc, #92]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021f0:	f000 f834 	bl	800225c <HAL_RCC_GetSysClockFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	4912      	ldr	r1, [pc, #72]	@ (800224c <HAL_RCC_ClockConfig+0x35c>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800220e:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <HAL_RCC_ClockConfig+0x35c>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <HAL_RCC_ClockConfig+0x360>)
 8002226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <HAL_RCC_ClockConfig+0x364>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_RCC_ClockConfig+0x368>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fe46 	bl	8000ec4 <HAL_InitTick>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	58024400 	.word	0x58024400
 800224c:	080055cc 	.word	0x080055cc
 8002250:	24000004 	.word	0x24000004
 8002254:	24000000 	.word	0x24000000
 8002258:	24000008 	.word	0x24000008

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	@ 0x24
 8002260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002262:	4bb3      	ldr	r3, [pc, #716]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800226a:	2b18      	cmp	r3, #24
 800226c:	f200 8155 	bhi.w	800251a <HAL_RCC_GetSysClockFreq+0x2be>
 8002270:	a201      	add	r2, pc, #4	@ (adr r2, 8002278 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	080022dd 	.word	0x080022dd
 800227c:	0800251b 	.word	0x0800251b
 8002280:	0800251b 	.word	0x0800251b
 8002284:	0800251b 	.word	0x0800251b
 8002288:	0800251b 	.word	0x0800251b
 800228c:	0800251b 	.word	0x0800251b
 8002290:	0800251b 	.word	0x0800251b
 8002294:	0800251b 	.word	0x0800251b
 8002298:	08002303 	.word	0x08002303
 800229c:	0800251b 	.word	0x0800251b
 80022a0:	0800251b 	.word	0x0800251b
 80022a4:	0800251b 	.word	0x0800251b
 80022a8:	0800251b 	.word	0x0800251b
 80022ac:	0800251b 	.word	0x0800251b
 80022b0:	0800251b 	.word	0x0800251b
 80022b4:	0800251b 	.word	0x0800251b
 80022b8:	08002309 	.word	0x08002309
 80022bc:	0800251b 	.word	0x0800251b
 80022c0:	0800251b 	.word	0x0800251b
 80022c4:	0800251b 	.word	0x0800251b
 80022c8:	0800251b 	.word	0x0800251b
 80022cc:	0800251b 	.word	0x0800251b
 80022d0:	0800251b 	.word	0x0800251b
 80022d4:	0800251b 	.word	0x0800251b
 80022d8:	0800230f 	.word	0x0800230f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022dc:	4b94      	ldr	r3, [pc, #592]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022e8:	4b91      	ldr	r3, [pc, #580]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	4a90      	ldr	r2, [pc, #576]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
 80022f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80022fa:	e111      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022fe:	61bb      	str	r3, [r7, #24]
      break;
 8002300:	e10e      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002302:	4b8d      	ldr	r3, [pc, #564]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002304:	61bb      	str	r3, [r7, #24]
      break;
 8002306:	e10b      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002308:	4b8c      	ldr	r3, [pc, #560]	@ (800253c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800230a:	61bb      	str	r3, [r7, #24]
      break;
 800230c:	e108      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800230e:	4b88      	ldr	r3, [pc, #544]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002318:	4b85      	ldr	r3, [pc, #532]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002322:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002324:	4b82      	ldr	r3, [pc, #520]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800232e:	4b80      	ldr	r3, [pc, #512]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002332:	08db      	lsrs	r3, r3, #3
 8002334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80e1 	beq.w	8002514 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b02      	cmp	r3, #2
 8002356:	f000 8083 	beq.w	8002460 <HAL_RCC_GetSysClockFreq+0x204>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b02      	cmp	r3, #2
 800235e:	f200 80a1 	bhi.w	80024a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x114>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d056      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x1c0>
 800236e:	e099      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002370:	4b6f      	ldr	r3, [pc, #444]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02d      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800237c:	4b6c      	ldr	r3, [pc, #432]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	4a6b      	ldr	r2, [pc, #428]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a6:	4b62      	ldr	r3, [pc, #392]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023d6:	e087      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002544 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ea:	4b51      	ldr	r3, [pc, #324]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80023fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800240a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800240e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800241a:	e065      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002426:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002548 <HAL_RCC_GetSysClockFreq+0x2ec>
 800242a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800242e:	4b40      	ldr	r3, [pc, #256]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800243e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002442:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800244a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800244e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800245e:	e043      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800254c <HAL_RCC_GetSysClockFreq+0x2f0>
 800246e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002472:	4b2f      	ldr	r3, [pc, #188]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002482:	ed97 6a02 	vldr	s12, [r7, #8]
 8002486:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800248a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800248e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800249a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024a2:	e021      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002548 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	0a5b      	lsrs	r3, r3, #9
 80024ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024f2:	3301      	adds	r3, #1
 80024f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002500:	edd7 6a07 	vldr	s13, [r7, #28]
 8002504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250c:	ee17 3a90 	vmov	r3, s15
 8002510:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002512:	e005      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
      break;
 8002518:	e002      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800251c:	61bb      	str	r3, [r7, #24]
      break;
 800251e:	bf00      	nop
  }

  return sysclockfreq;
 8002520:	69bb      	ldr	r3, [r7, #24]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	@ 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	58024400 	.word	0x58024400
 8002534:	03d09000 	.word	0x03d09000
 8002538:	003d0900 	.word	0x003d0900
 800253c:	017d7840 	.word	0x017d7840
 8002540:	46000000 	.word	0x46000000
 8002544:	4c742400 	.word	0x4c742400
 8002548:	4a742400 	.word	0x4a742400
 800254c:	4bbebc20 	.word	0x4bbebc20

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002556:	f7ff fe81 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800255a:	4602      	mov	r2, r0
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	490f      	ldr	r1, [pc, #60]	@ (80025a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002568:	5ccb      	ldrb	r3, [r1, r3]
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002574:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a07      	ldr	r2, [pc, #28]	@ (80025a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800258c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800258e:	4a07      	ldr	r2, [pc, #28]	@ (80025ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	58024400 	.word	0x58024400
 80025a4:	080055cc 	.word	0x080055cc
 80025a8:	24000004 	.word	0x24000004
 80025ac:	24000000 	.word	0x24000000

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80025b4:	f7ff ffcc 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4904      	ldr	r1, [pc, #16]	@ (80025d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	58024400 	.word	0x58024400
 80025d8:	080055cc 	.word	0x080055cc

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025e0:	f7ff ffb6 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4904      	ldr	r1, [pc, #16]	@ (8002604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	58024400 	.word	0x58024400
 8002604:	080055cc 	.word	0x080055cc

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800260c:	b0ca      	sub	sp, #296	@ 0x128
 800260e:	af00      	add	r7, sp, #0
 8002610:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800262c:	2500      	movs	r5, #0
 800262e:	ea54 0305 	orrs.w	r3, r4, r5
 8002632:	d049      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800263a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800263e:	d02f      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002640:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002644:	d828      	bhi.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800264a:	d01a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800264c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002650:	d822      	bhi.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800265a:	d007      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800265c:	e01c      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800265e:	4bb8      	ldr	r3, [pc, #736]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002662:	4ab7      	ldr	r2, [pc, #732]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002668:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800266a:	e01a      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800266c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002670:	3308      	adds	r3, #8
 8002672:	2102      	movs	r1, #2
 8002674:	4618      	mov	r0, r3
 8002676:	f001 fc8f 	bl	8003f98 <RCCEx_PLL2_Config>
 800267a:	4603      	mov	r3, r0
 800267c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002680:	e00f      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002686:	3328      	adds	r3, #40	@ 0x28
 8002688:	2102      	movs	r1, #2
 800268a:	4618      	mov	r0, r3
 800268c:	f001 fd36 	bl	80040fc <RCCEx_PLL3_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002696:	e004      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800269e:	e000      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80026a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10a      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026aa:	4ba5      	ldr	r3, [pc, #660]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80026b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026b8:	4aa1      	ldr	r2, [pc, #644]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ba:	430b      	orrs	r3, r1
 80026bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80026be:	e003      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80026d4:	f04f 0900 	mov.w	r9, #0
 80026d8:	ea58 0309 	orrs.w	r3, r8, r9
 80026dc:	d047      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d82a      	bhi.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026e8:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002705 	.word	0x08002705
 80026f4:	08002713 	.word	0x08002713
 80026f8:	08002729 	.word	0x08002729
 80026fc:	08002747 	.word	0x08002747
 8002700:	08002747 	.word	0x08002747
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002704:	4b8e      	ldr	r3, [pc, #568]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	4a8d      	ldr	r2, [pc, #564]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800270a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800270e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002710:	e01a      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002716:	3308      	adds	r3, #8
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f001 fc3c 	bl	8003f98 <RCCEx_PLL2_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002726:	e00f      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800272c:	3328      	adds	r3, #40	@ 0x28
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f001 fce3 	bl	80040fc <RCCEx_PLL3_Config>
 8002736:	4603      	mov	r3, r0
 8002738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800273c:	e004      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002744:	e000      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002750:	4b7b      	ldr	r3, [pc, #492]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002754:	f023 0107 	bic.w	r1, r3, #7
 8002758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275e:	4a78      	ldr	r2, [pc, #480]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002760:	430b      	orrs	r3, r1
 8002762:	6513      	str	r3, [r2, #80]	@ 0x50
 8002764:	e003      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800276a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800276e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800277a:	f04f 0b00 	mov.w	fp, #0
 800277e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002782:	d04c      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800278e:	d030      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002794:	d829      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002796:	2bc0      	cmp	r3, #192	@ 0xc0
 8002798:	d02d      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800279a:	2bc0      	cmp	r3, #192	@ 0xc0
 800279c:	d825      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800279e:	2b80      	cmp	r3, #128	@ 0x80
 80027a0:	d018      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027a2:	2b80      	cmp	r3, #128	@ 0x80
 80027a4:	d821      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80027aa:	2b40      	cmp	r3, #64	@ 0x40
 80027ac:	d007      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80027ae:	e01c      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b0:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	4a62      	ldr	r2, [pc, #392]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027bc:	e01c      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027c2:	3308      	adds	r3, #8
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 fbe6 	bl	8003f98 <RCCEx_PLL2_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027d2:	e011      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027d8:	3328      	adds	r3, #40	@ 0x28
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 fc8d 	bl	80040fc <RCCEx_PLL3_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027e8:	e006      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027f0:	e002      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002800:	4b4f      	ldr	r3, [pc, #316]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002804:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800280c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280e:	4a4c      	ldr	r2, [pc, #304]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002810:	430b      	orrs	r3, r1
 8002812:	6513      	str	r3, [r2, #80]	@ 0x50
 8002814:	e003      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800281a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800281e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800282a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002834:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002838:	460b      	mov	r3, r1
 800283a:	4313      	orrs	r3, r2
 800283c:	d053      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800283e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002846:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800284a:	d035      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800284c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002850:	d82e      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002852:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002856:	d031      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002858:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800285c:	d828      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800285e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002862:	d01a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002864:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002868:	d822      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800286e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002872:	d007      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002874:	e01c      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002876:	4b32      	ldr	r3, [pc, #200]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287a:	4a31      	ldr	r2, [pc, #196]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800287c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002882:	e01c      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002888:	3308      	adds	r3, #8
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f001 fb83 	bl	8003f98 <RCCEx_PLL2_Config>
 8002892:	4603      	mov	r3, r0
 8002894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002898:	e011      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800289a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289e:	3328      	adds	r3, #40	@ 0x28
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 fc2a 	bl	80040fc <RCCEx_PLL3_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028ae:	e006      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028b6:	e002      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80028b8:	bf00      	nop
 80028ba:	e000      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80028bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10b      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80028ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028d8:	430b      	orrs	r3, r1
 80028da:	6593      	str	r3, [r2, #88]	@ 0x58
 80028dc:	e003      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80028f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002900:	460b      	mov	r3, r1
 8002902:	4313      	orrs	r3, r2
 8002904:	d056      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800290a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800290e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002912:	d038      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002914:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002918:	d831      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800291a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800291e:	d034      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002920:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002924:	d82b      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800292a:	d01d      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800292c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002930:	d825      	bhi.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800293c:	e01f      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800293e:	bf00      	nop
 8002940:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002944:	4ba2      	ldr	r3, [pc, #648]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	4aa1      	ldr	r2, [pc, #644]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800294a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800294e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002950:	e01c      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002956:	3308      	adds	r3, #8
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f001 fb1c 	bl	8003f98 <RCCEx_PLL2_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002966:	e011      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800296c:	3328      	adds	r3, #40	@ 0x28
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f001 fbc3 	bl	80040fc <RCCEx_PLL3_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800297c:	e006      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002984:	e002      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002986:	bf00      	nop
 8002988:	e000      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800298a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800298c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002994:	4b8e      	ldr	r3, [pc, #568]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800299c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80029a4:	4a8a      	ldr	r2, [pc, #552]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80029aa:	e003      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80029c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80029ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80029ce:	460b      	mov	r3, r1
 80029d0:	4313      	orrs	r3, r2
 80029d2:	d03a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80029d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029da:	2b30      	cmp	r3, #48	@ 0x30
 80029dc:	d01f      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80029de:	2b30      	cmp	r3, #48	@ 0x30
 80029e0:	d819      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d00c      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d815      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d019      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d111      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f2:	4b77      	ldr	r3, [pc, #476]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	4a76      	ldr	r2, [pc, #472]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029fe:	e011      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a04:	3308      	adds	r3, #8
 8002a06:	2102      	movs	r1, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 fac5 	bl	8003f98 <RCCEx_PLL2_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002a14:	e006      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a1c:	e002      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a2c:	4b68      	ldr	r3, [pc, #416]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3a:	4a65      	ldr	r2, [pc, #404]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a40:	e003      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002a56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002a60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4313      	orrs	r3, r2
 8002a68:	d051      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a74:	d035      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a7a:	d82e      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a80:	d031      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a86:	d828      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a8c:	d01a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a92:	d822      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a9c:	d007      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002a9e:	e01c      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002aac:	e01c      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 fa6e 	bl	8003f98 <RCCEx_PLL2_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ac2:	e011      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac8:	3328      	adds	r3, #40	@ 0x28
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 fb15 	bl	80040fc <RCCEx_PLL3_Config>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ad8:	e006      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ae0:	e002      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002af0:	4b37      	ldr	r3, [pc, #220]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002afe:	4a34      	ldr	r2, [pc, #208]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b04:	e003      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002b24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	d056      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b38:	d033      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002b3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b3e:	d82c      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b44:	d02f      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002b46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b4a:	d826      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b50:	d02b      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002b52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b56:	d820      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b5c:	d012      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002b5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b62:	d81a      	bhi.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d022      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b6c:	d115      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b72:	3308      	adds	r3, #8
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 fa0e 	bl	8003f98 <RCCEx_PLL2_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b82:	e015      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b88:	3328      	adds	r3, #40	@ 0x28
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 fab5 	bl	80040fc <RCCEx_PLL3_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ba0:	e006      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ba2:	bf00      	nop
 8002ba4:	e004      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ba6:	bf00      	nop
 8002ba8:	e002      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10d      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bc6:	4a02      	ldr	r2, [pc, #8]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002bce:	bf00      	nop
 8002bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bf2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	d055      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c08:	d033      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c0e:	d82c      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c14:	d02f      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c1a:	d826      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c20:	d02b      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002c22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c26:	d820      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c2c:	d012      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c32:	d81a      	bhi.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d022      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c3c:	d115      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c42:	3308      	adds	r3, #8
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 f9a6 	bl	8003f98 <RCCEx_PLL2_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c52:	e015      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c58:	3328      	adds	r3, #40	@ 0x28
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 fa4d 	bl	80040fc <RCCEx_PLL3_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c68:	e00a      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c70:	e006      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c72:	bf00      	nop
 8002c74:	e004      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c76:	bf00      	nop
 8002c78:	e002      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c7a:	bf00      	nop
 8002c7c:	e000      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c88:	4ba3      	ldr	r3, [pc, #652]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c98:	4a9f      	ldr	r2, [pc, #636]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c9e:	e003      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	d037      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cd8:	d816      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d018      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002cde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ce2:	d111      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	4a8b      	ldr	r2, [pc, #556]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cf0:	e00f      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 f94c 	bl	8003f98 <RCCEx_PLL2_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d06:	e004      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d0e:	e000      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	4a7b      	ldr	r2, [pc, #492]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d2e:	e003      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002d4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4313      	orrs	r3, r2
 8002d56:	d039      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d81c      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002d62:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002da5 	.word	0x08002da5
 8002d6c:	08002d79 	.word	0x08002d79
 8002d70:	08002d87 	.word	0x08002d87
 8002d74:	08002da5 	.word	0x08002da5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d78:	4b67      	ldr	r3, [pc, #412]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	4a66      	ldr	r2, [pc, #408]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d84:	e00f      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 f902 	bl	8003f98 <RCCEx_PLL2_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d9a:	e004      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002da2:	e000      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dae:	4b5a      	ldr	r3, [pc, #360]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db2:	f023 0103 	bic.w	r1, r3, #3
 8002db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dbc:	4a56      	ldr	r2, [pc, #344]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dc2:	e003      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002de2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002de6:	460b      	mov	r3, r1
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f000 809f 	beq.w	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dee:	4b4b      	ldr	r3, [pc, #300]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a4a      	ldr	r2, [pc, #296]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dfa:	f7fe f8ad 	bl	8000f58 <HAL_GetTick>
 8002dfe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e02:	e00b      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e04:	f7fe f8a8 	bl	8000f58 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b64      	cmp	r3, #100	@ 0x64
 8002e12:	d903      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e1a:	e005      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ed      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d179      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e30:	4b39      	ldr	r3, [pc, #228]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e3c:	4053      	eors	r3, r2
 8002e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e46:	4b34      	ldr	r3, [pc, #208]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e52:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e56:	4a30      	ldr	r2, [pc, #192]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	4a2d      	ldr	r2, [pc, #180]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e7e:	d118      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe f86a 	bl	8000f58 <HAL_GetTick>
 8002e84:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e88:	e00d      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe f865 	bl	8000f58 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e94:	1ad2      	subs	r2, r2, r3
 8002e96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d903      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002ea4:	e005      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0eb      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d129      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eca:	d10e      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002ecc:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002edc:	091a      	lsrs	r2, r3, #4
 8002ede:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6113      	str	r3, [r2, #16]
 8002ee8:	e005      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002eea:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ef4:	6113      	str	r3, [r2, #16]
 8002ef6:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f06:	4a04      	ldr	r2, [pc, #16]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0c:	e00e      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002f16:	e009      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	58024800 	.word	0x58024800
 8002f20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f002 0301 	and.w	r3, r2, #1
 8002f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f000 8089 	beq.w	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f54:	2b28      	cmp	r3, #40	@ 0x28
 8002f56:	d86b      	bhi.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002f58:	a201      	add	r2, pc, #4	@ (adr r2, 8002f60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08003039 	.word	0x08003039
 8002f64:	08003031 	.word	0x08003031
 8002f68:	08003031 	.word	0x08003031
 8002f6c:	08003031 	.word	0x08003031
 8002f70:	08003031 	.word	0x08003031
 8002f74:	08003031 	.word	0x08003031
 8002f78:	08003031 	.word	0x08003031
 8002f7c:	08003031 	.word	0x08003031
 8002f80:	08003005 	.word	0x08003005
 8002f84:	08003031 	.word	0x08003031
 8002f88:	08003031 	.word	0x08003031
 8002f8c:	08003031 	.word	0x08003031
 8002f90:	08003031 	.word	0x08003031
 8002f94:	08003031 	.word	0x08003031
 8002f98:	08003031 	.word	0x08003031
 8002f9c:	08003031 	.word	0x08003031
 8002fa0:	0800301b 	.word	0x0800301b
 8002fa4:	08003031 	.word	0x08003031
 8002fa8:	08003031 	.word	0x08003031
 8002fac:	08003031 	.word	0x08003031
 8002fb0:	08003031 	.word	0x08003031
 8002fb4:	08003031 	.word	0x08003031
 8002fb8:	08003031 	.word	0x08003031
 8002fbc:	08003031 	.word	0x08003031
 8002fc0:	08003039 	.word	0x08003039
 8002fc4:	08003031 	.word	0x08003031
 8002fc8:	08003031 	.word	0x08003031
 8002fcc:	08003031 	.word	0x08003031
 8002fd0:	08003031 	.word	0x08003031
 8002fd4:	08003031 	.word	0x08003031
 8002fd8:	08003031 	.word	0x08003031
 8002fdc:	08003031 	.word	0x08003031
 8002fe0:	08003039 	.word	0x08003039
 8002fe4:	08003031 	.word	0x08003031
 8002fe8:	08003031 	.word	0x08003031
 8002fec:	08003031 	.word	0x08003031
 8002ff0:	08003031 	.word	0x08003031
 8002ff4:	08003031 	.word	0x08003031
 8002ff8:	08003031 	.word	0x08003031
 8002ffc:	08003031 	.word	0x08003031
 8003000:	08003039 	.word	0x08003039
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003008:	3308      	adds	r3, #8
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f000 ffc3 	bl	8003f98 <RCCEx_PLL2_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003018:	e00f      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800301a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301e:	3328      	adds	r3, #40	@ 0x28
 8003020:	2101      	movs	r1, #1
 8003022:	4618      	mov	r0, r3
 8003024:	f001 f86a 	bl	80040fc <RCCEx_PLL3_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800302e:	e004      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003036:	e000      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003042:	4bbf      	ldr	r3, [pc, #764]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003046:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003050:	4abb      	ldr	r2, [pc, #748]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003052:	430b      	orrs	r3, r1
 8003054:	6553      	str	r3, [r2, #84]	@ 0x54
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800305c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f002 0302 	and.w	r3, r2, #2
 800306c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003076:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800307a:	460b      	mov	r3, r1
 800307c:	4313      	orrs	r3, r2
 800307e:	d041      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003086:	2b05      	cmp	r3, #5
 8003088:	d824      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800308a:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030dd 	.word	0x080030dd
 8003094:	080030a9 	.word	0x080030a9
 8003098:	080030bf 	.word	0x080030bf
 800309c:	080030dd 	.word	0x080030dd
 80030a0:	080030dd 	.word	0x080030dd
 80030a4:	080030dd 	.word	0x080030dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ac:	3308      	adds	r3, #8
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 ff71 	bl	8003f98 <RCCEx_PLL2_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030bc:	e00f      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c2:	3328      	adds	r3, #40	@ 0x28
 80030c4:	2101      	movs	r1, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 f818 	bl	80040fc <RCCEx_PLL3_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030d2:	e004      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030da:	e000      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80030dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030e6:	4b96      	ldr	r3, [pc, #600]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	f023 0107 	bic.w	r1, r3, #7
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030f4:	4a92      	ldr	r2, [pc, #584]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030f6:	430b      	orrs	r3, r1
 80030f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f002 0304 	and.w	r3, r2, #4
 8003110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800311a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800311e:	460b      	mov	r3, r1
 8003120:	4313      	orrs	r3, r2
 8003122:	d044      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800312c:	2b05      	cmp	r3, #5
 800312e:	d825      	bhi.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003130:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003185 	.word	0x08003185
 800313c:	08003151 	.word	0x08003151
 8003140:	08003167 	.word	0x08003167
 8003144:	08003185 	.word	0x08003185
 8003148:	08003185 	.word	0x08003185
 800314c:	08003185 	.word	0x08003185
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003154:	3308      	adds	r3, #8
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f000 ff1d 	bl	8003f98 <RCCEx_PLL2_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003164:	e00f      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	3328      	adds	r3, #40	@ 0x28
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f000 ffc4 	bl	80040fc <RCCEx_PLL3_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800317a:	e004      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10b      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800318e:	4b6c      	ldr	r3, [pc, #432]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003192:	f023 0107 	bic.w	r1, r3, #7
 8003196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800319e:	4a68      	ldr	r2, [pc, #416]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f002 0320 	and.w	r3, r2, #32
 80031ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031c8:	460b      	mov	r3, r1
 80031ca:	4313      	orrs	r3, r2
 80031cc:	d055      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80031ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031da:	d033      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80031dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031e0:	d82c      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e6:	d02f      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ec:	d826      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031f2:	d02b      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80031f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031f8:	d820      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031fe:	d012      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003204:	d81a      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d022      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800320a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800320e:	d115      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003214:	3308      	adds	r3, #8
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 febd 	bl	8003f98 <RCCEx_PLL2_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003224:	e015      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322a:	3328      	adds	r3, #40	@ 0x28
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 ff64 	bl	80040fc <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800323a:	e00a      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003242:	e006      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003244:	bf00      	nop
 8003246:	e004      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003248:	bf00      	nop
 800324a:	e002      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800325a:	4b39      	ldr	r3, [pc, #228]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800325c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326a:	4a35      	ldr	r2, [pc, #212]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800326c:	430b      	orrs	r3, r1
 800326e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003270:	e003      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800328a:	2300      	movs	r3, #0
 800328c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003290:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003294:	460b      	mov	r3, r1
 8003296:	4313      	orrs	r3, r2
 8003298:	d058      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800329a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80032a6:	d033      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80032a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80032ac:	d82c      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b2:	d02f      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80032b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b8:	d826      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032be:	d02b      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80032c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032c4:	d820      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032ca:	d012      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80032cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032d0:	d81a      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d022      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032da:	d115      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e0:	3308      	adds	r3, #8
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fe57 	bl	8003f98 <RCCEx_PLL2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032f0:	e015      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f6:	3328      	adds	r3, #40	@ 0x28
 80032f8:	2102      	movs	r1, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fefe 	bl	80040fc <RCCEx_PLL3_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003306:	e00a      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800330e:	e006      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003310:	bf00      	nop
 8003312:	e004      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003314:	bf00      	nop
 8003316:	e002      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800331c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800331e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10e      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003326:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003332:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003336:	4a02      	ldr	r2, [pc, #8]	@ (8003340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003338:	430b      	orrs	r3, r1
 800333a:	6593      	str	r3, [r2, #88]	@ 0x58
 800333c:	e006      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800333e:	bf00      	nop
 8003340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003362:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003366:	460b      	mov	r3, r1
 8003368:	4313      	orrs	r3, r2
 800336a:	d055      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003374:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003378:	d033      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800337a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800337e:	d82c      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003384:	d02f      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800338a:	d826      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800338c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003390:	d02b      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003392:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003396:	d820      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800339c:	d012      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800339e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033a2:	d81a      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d022      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80033a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ac:	d115      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b2:	3308      	adds	r3, #8
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fdee 	bl	8003f98 <RCCEx_PLL2_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033c2:	e015      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c8:	3328      	adds	r3, #40	@ 0x28
 80033ca:	2102      	movs	r1, #2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fe95 	bl	80040fc <RCCEx_PLL3_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033d8:	e00a      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033e0:	e006      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033e2:	bf00      	nop
 80033e4:	e004      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033f8:	4ba1      	ldr	r3, [pc, #644]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003404:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003408:	4a9d      	ldr	r2, [pc, #628]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6593      	str	r3, [r2, #88]	@ 0x58
 800340e:	e003      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f002 0308 	and.w	r3, r2, #8
 8003424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800342e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003432:	460b      	mov	r3, r1
 8003434:	4313      	orrs	r3, r2
 8003436:	d01e      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003444:	d10c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	3328      	adds	r3, #40	@ 0x28
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fe54 	bl	80040fc <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003460:	4b87      	ldr	r3, [pc, #540]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003464:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003470:	4a83      	ldr	r2, [pc, #524]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003472:	430b      	orrs	r3, r1
 8003474:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	f002 0310 	and.w	r3, r2, #16
 8003482:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800348c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003490:	460b      	mov	r3, r1
 8003492:	4313      	orrs	r3, r2
 8003494:	d01e      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800349e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034a2:	d10c      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a8:	3328      	adds	r3, #40	@ 0x28
 80034aa:	2102      	movs	r1, #2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fe25 	bl	80040fc <RCCEx_PLL3_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034be:	4b70      	ldr	r3, [pc, #448]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80034e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80034ee:	460b      	mov	r3, r1
 80034f0:	4313      	orrs	r3, r2
 80034f2:	d03e      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003500:	d022      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003502:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003506:	d81b      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003510:	d00b      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003512:	e015      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003518:	3308      	adds	r3, #8
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fd3b 	bl	8003f98 <RCCEx_PLL2_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003528:	e00f      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352e:	3328      	adds	r3, #40	@ 0x28
 8003530:	2102      	movs	r1, #2
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fde2 	bl	80040fc <RCCEx_PLL3_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800353e:	e004      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800354a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003552:	4b4b      	ldr	r3, [pc, #300]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003562:	4a47      	ldr	r2, [pc, #284]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003564:	430b      	orrs	r3, r1
 8003566:	6593      	str	r3, [r2, #88]	@ 0x58
 8003568:	e003      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800356e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800357e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003580:	2300      	movs	r3, #0
 8003582:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003584:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003588:	460b      	mov	r3, r1
 800358a:	4313      	orrs	r3, r2
 800358c:	d03b      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003596:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800359a:	d01f      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800359c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035a0:	d818      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80035a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035a6:	d003      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80035a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035ac:	d007      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80035ae:	e011      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b0:	4b33      	ldr	r3, [pc, #204]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	4a32      	ldr	r2, [pc, #200]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80035bc:	e00f      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c2:	3328      	adds	r3, #40	@ 0x28
 80035c4:	2101      	movs	r1, #1
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fd98 	bl	80040fc <RCCEx_PLL3_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80035d2:	e004      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035da:	e000      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80035dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035e6:	4b26      	ldr	r3, [pc, #152]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f6:	4a22      	ldr	r2, [pc, #136]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80035fc:	e003      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003612:	673b      	str	r3, [r7, #112]	@ 0x70
 8003614:	2300      	movs	r3, #0
 8003616:	677b      	str	r3, [r7, #116]	@ 0x74
 8003618:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800361c:	460b      	mov	r3, r1
 800361e:	4313      	orrs	r3, r2
 8003620:	d034      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003630:	d007      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003632:	e011      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	4a11      	ldr	r2, [pc, #68]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800363e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003640:	e00e      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003646:	3308      	adds	r3, #8
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fca4 	bl	8003f98 <RCCEx_PLL2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003656:	e003      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800365e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10d      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800366a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003676:	4a02      	ldr	r2, [pc, #8]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003678:	430b      	orrs	r3, r1
 800367a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800367e:	bf00      	nop
 8003680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800369a:	2300      	movs	r3, #0
 800369c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800369e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	d00c      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ac:	3328      	adds	r3, #40	@ 0x28
 80036ae:	2102      	movs	r1, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fd23 	bl	80040fc <RCCEx_PLL3_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80036ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80036d0:	2300      	movs	r3, #0
 80036d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80036d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80036d8:	460b      	mov	r3, r1
 80036da:	4313      	orrs	r3, r2
 80036dc:	d038      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80036de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ea:	d018      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80036ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036f0:	d811      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f6:	d014      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80036f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036fc:	d80b      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d011      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003706:	d106      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003708:	4bc3      	ldr	r3, [pc, #780]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800370a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370c:	4ac2      	ldr	r2, [pc, #776]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003714:	e008      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800371c:	e004      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003730:	4bb9      	ldr	r3, [pc, #740]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003740:	4ab5      	ldr	r2, [pc, #724]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003742:	430b      	orrs	r3, r1
 8003744:	6553      	str	r3, [r2, #84]	@ 0x54
 8003746:	e003      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800375c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800375e:	2300      	movs	r3, #0
 8003760:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003762:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003766:	460b      	mov	r3, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800376c:	4baa      	ldr	r3, [pc, #680]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800376e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003770:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377a:	4aa7      	ldr	r2, [pc, #668]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800377c:	430b      	orrs	r3, r1
 800377e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800378c:	653b      	str	r3, [r7, #80]	@ 0x50
 800378e:	2300      	movs	r3, #0
 8003790:	657b      	str	r3, [r7, #84]	@ 0x54
 8003792:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800379c:	4b9e      	ldr	r3, [pc, #632]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80037ac:	4a9a      	ldr	r2, [pc, #616]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80037be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037c0:	2300      	movs	r3, #0
 80037c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ce:	4b92      	ldr	r3, [pc, #584]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037dc:	4a8e      	ldr	r2, [pc, #568]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037de:	430b      	orrs	r3, r1
 80037e0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80037ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80037f0:	2300      	movs	r3, #0
 80037f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037fe:	4b86      	ldr	r3, [pc, #536]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	4a85      	ldr	r2, [pc, #532]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003804:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003808:	6113      	str	r3, [r2, #16]
 800380a:	4b83      	ldr	r3, [pc, #524]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800380c:	6919      	ldr	r1, [r3, #16]
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003816:	4a80      	ldr	r2, [pc, #512]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003818:	430b      	orrs	r3, r1
 800381a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003828:	63bb      	str	r3, [r7, #56]	@ 0x38
 800382a:	2300      	movs	r3, #0
 800382c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800382e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003832:	460b      	mov	r3, r1
 8003834:	4313      	orrs	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003838:	4b77      	ldr	r3, [pc, #476]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800383a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	4a74      	ldr	r2, [pc, #464]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003848:	430b      	orrs	r3, r1
 800384a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003858:	633b      	str	r3, [r7, #48]	@ 0x30
 800385a:	2300      	movs	r3, #0
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
 800385e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003862:	460b      	mov	r3, r1
 8003864:	4313      	orrs	r3, r2
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003868:	4b6b      	ldr	r3, [pc, #428]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800386a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003878:	4a67      	ldr	r2, [pc, #412]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800387a:	430b      	orrs	r3, r1
 800387c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	2100      	movs	r1, #0
 8003888:	62b9      	str	r1, [r7, #40]	@ 0x28
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003890:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003894:	460b      	mov	r3, r1
 8003896:	4313      	orrs	r3, r2
 8003898:	d011      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389e:	3308      	adds	r3, #8
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fb78 	bl	8003f98 <RCCEx_PLL2_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	2100      	movs	r1, #0
 80038c8:	6239      	str	r1, [r7, #32]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038d4:	460b      	mov	r3, r1
 80038d6:	4313      	orrs	r3, r2
 80038d8:	d011      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	3308      	adds	r3, #8
 80038e0:	2101      	movs	r1, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fb58 	bl	8003f98 <RCCEx_PLL2_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	2100      	movs	r1, #0
 8003908:	61b9      	str	r1, [r7, #24]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003914:	460b      	mov	r3, r1
 8003916:	4313      	orrs	r3, r2
 8003918:	d011      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391e:	3308      	adds	r3, #8
 8003920:	2102      	movs	r1, #2
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fb38 	bl	8003f98 <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800392e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	2100      	movs	r1, #0
 8003948:	6139      	str	r1, [r7, #16]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003954:	460b      	mov	r3, r1
 8003956:	4313      	orrs	r3, r2
 8003958:	d011      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395e:	3328      	adds	r3, #40	@ 0x28
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fbca 	bl	80040fc <RCCEx_PLL3_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800396e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	2100      	movs	r1, #0
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003994:	460b      	mov	r3, r1
 8003996:	4313      	orrs	r3, r2
 8003998:	d011      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	3328      	adds	r3, #40	@ 0x28
 80039a0:	2101      	movs	r1, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fbaa 	bl	80040fc <RCCEx_PLL3_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	2100      	movs	r1, #0
 80039c8:	6039      	str	r1, [r7, #0]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039d4:	460b      	mov	r3, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d011      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	3328      	adds	r3, #40	@ 0x28
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fb8a 	bl	80040fc <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80039fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003a12:	46bd      	mov	sp, r7
 8003a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a18:	58024400 	.word	0x58024400

08003a1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003a20:	f7fe fd96 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4904      	ldr	r1, [pc, #16]	@ (8003a44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	58024400 	.word	0x58024400
 8003a44:	080055cc 	.word	0x080055cc

08003a48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	@ 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a50:	4ba1      	ldr	r3, [pc, #644]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003a5a:	4b9f      	ldr	r3, [pc, #636]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5e:	0b1b      	lsrs	r3, r3, #12
 8003a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a66:	4b9c      	ldr	r3, [pc, #624]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a72:	4b99      	ldr	r3, [pc, #612]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a76:	08db      	lsrs	r3, r3, #3
 8003a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8111 	beq.w	8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	f000 8083 	beq.w	8003ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	f200 80a1 	bhi.w	8003be8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d056      	beq.n	8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003ab2:	e099      	b.n	8003be8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ab4:	4b88      	ldr	r3, [pc, #544]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02d      	beq.n	8003b1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ac0:	4b85      	ldr	r3, [pc, #532]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	08db      	lsrs	r3, r3, #3
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	4a84      	ldr	r2, [pc, #528]	@ (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aea:	4b7b      	ldr	r3, [pc, #492]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003afe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b1a:	e087      	b.n	8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b5e:	e065      	b.n	8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b72:	4b59      	ldr	r3, [pc, #356]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ba2:	e043      	b.n	8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb6:	4b48      	ldr	r3, [pc, #288]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003be6:	e021      	b.n	8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfa:	4b37      	ldr	r3, [pc, #220]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c30:	0a5b      	lsrs	r3, r3, #9
 8003c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c52:	ee17 2a90 	vmov	r2, s15
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c80:	ee17 2a90 	vmov	r2, s15
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c88:	4b13      	ldr	r3, [pc, #76]	@ (8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8c:	0e1b      	lsrs	r3, r3, #24
 8003c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cae:	ee17 2a90 	vmov	r2, s15
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003cb6:	e008      	b.n	8003cca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
}
 8003cca:	bf00      	nop
 8003ccc:	3724      	adds	r7, #36	@ 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	58024400 	.word	0x58024400
 8003cdc:	03d09000 	.word	0x03d09000
 8003ce0:	46000000 	.word	0x46000000
 8003ce4:	4c742400 	.word	0x4c742400
 8003ce8:	4a742400 	.word	0x4a742400
 8003cec:	4bbebc20 	.word	0x4bbebc20

08003cf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b089      	sub	sp, #36	@ 0x24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cf8:	4ba1      	ldr	r3, [pc, #644]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003d02:	4b9f      	ldr	r3, [pc, #636]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	0d1b      	lsrs	r3, r3, #20
 8003d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d0e:	4b9c      	ldr	r3, [pc, #624]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003d1a:	4b99      	ldr	r3, [pc, #612]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	08db      	lsrs	r3, r3, #3
 8003d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	fb02 f303 	mul.w	r3, r2, r3
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8111 	beq.w	8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	f000 8083 	beq.w	8003e4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	f200 80a1 	bhi.w	8003e90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d056      	beq.n	8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d5a:	e099      	b.n	8003e90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d5c:	4b88      	ldr	r3, [pc, #544]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d02d      	beq.n	8003dc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d68:	4b85      	ldr	r3, [pc, #532]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	08db      	lsrs	r3, r3, #3
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	4a84      	ldr	r2, [pc, #528]	@ (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
 8003d78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	ee07 3a90 	vmov	s15, r3
 8003d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d92:	4b7b      	ldr	r3, [pc, #492]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003da6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003dc2:	e087      	b.n	8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e06:	e065      	b.n	8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e1a:	4b59      	ldr	r3, [pc, #356]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e4a:	e043      	b.n	8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5e:	4b48      	ldr	r3, [pc, #288]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e8e:	e021      	b.n	8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea2:	4b37      	ldr	r3, [pc, #220]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eb6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ed2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	0a5b      	lsrs	r3, r3, #9
 8003eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003efa:	ee17 2a90 	vmov	r2, s15
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003f02:	4b1f      	ldr	r3, [pc, #124]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	0c1b      	lsrs	r3, r3, #16
 8003f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f28:	ee17 2a90 	vmov	r2, s15
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003f30:	4b13      	ldr	r3, [pc, #76]	@ (8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	0e1b      	lsrs	r3, r3, #24
 8003f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f56:	ee17 2a90 	vmov	r2, s15
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f5e:	e008      	b.n	8003f72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
}
 8003f72:	bf00      	nop
 8003f74:	3724      	adds	r7, #36	@ 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	58024400 	.word	0x58024400
 8003f84:	03d09000 	.word	0x03d09000
 8003f88:	46000000 	.word	0x46000000
 8003f8c:	4c742400 	.word	0x4c742400
 8003f90:	4a742400 	.word	0x4a742400
 8003f94:	4bbebc20 	.word	0x4bbebc20

08003f98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fa6:	4b53      	ldr	r3, [pc, #332]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d101      	bne.n	8003fb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e099      	b.n	80040ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003fb6:	4b4f      	ldr	r3, [pc, #316]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a4e      	ldr	r2, [pc, #312]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003fbc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc2:	f7fc ffc9 	bl	8000f58 <HAL_GetTick>
 8003fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fc8:	e008      	b.n	8003fdc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fca:	f7fc ffc5 	bl	8000f58 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e086      	b.n	80040ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fdc:	4b45      	ldr	r3, [pc, #276]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fe8:	4b42      	ldr	r3, [pc, #264]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	031b      	lsls	r3, r3, #12
 8003ff6:	493f      	ldr	r1, [pc, #252]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	3b01      	subs	r3, #1
 8004002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	3b01      	subs	r3, #1
 800400c:	025b      	lsls	r3, r3, #9
 800400e:	b29b      	uxth	r3, r3
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	3b01      	subs	r3, #1
 8004018:	041b      	lsls	r3, r3, #16
 800401a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	3b01      	subs	r3, #1
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800402c:	4931      	ldr	r1, [pc, #196]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800402e:	4313      	orrs	r3, r2
 8004030:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004032:	4b30      	ldr	r3, [pc, #192]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	492d      	ldr	r1, [pc, #180]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004044:	4b2b      	ldr	r3, [pc, #172]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	f023 0220 	bic.w	r2, r3, #32
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	4928      	ldr	r1, [pc, #160]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004052:	4313      	orrs	r3, r2
 8004054:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004056:	4b27      	ldr	r3, [pc, #156]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	4a26      	ldr	r2, [pc, #152]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800405c:	f023 0310 	bic.w	r3, r3, #16
 8004060:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004062:	4b24      	ldr	r3, [pc, #144]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004064:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004066:	4b24      	ldr	r3, [pc, #144]	@ (80040f8 <RCCEx_PLL2_Config+0x160>)
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	69d2      	ldr	r2, [r2, #28]
 800406e:	00d2      	lsls	r2, r2, #3
 8004070:	4920      	ldr	r1, [pc, #128]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004072:	4313      	orrs	r3, r2
 8004074:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004076:	4b1f      	ldr	r3, [pc, #124]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	4a1e      	ldr	r2, [pc, #120]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800407c:	f043 0310 	orr.w	r3, r3, #16
 8004080:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004088:	4b1a      	ldr	r3, [pc, #104]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800408a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408c:	4a19      	ldr	r2, [pc, #100]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800408e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004092:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004094:	e00f      	b.n	80040b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d106      	bne.n	80040aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800409c:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	4a14      	ldr	r2, [pc, #80]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80040a8:	e005      	b.n	80040b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80040aa:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ae:	4a11      	ldr	r2, [pc, #68]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80040b6:	4b0f      	ldr	r3, [pc, #60]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a0e      	ldr	r2, [pc, #56]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c2:	f7fc ff49 	bl	8000f58 <HAL_GetTick>
 80040c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040c8:	e008      	b.n	80040dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040ca:	f7fc ff45 	bl	8000f58 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e006      	b.n	80040ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	58024400 	.word	0x58024400
 80040f8:	ffff0007 	.word	0xffff0007

080040fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800410a:	4b53      	ldr	r3, [pc, #332]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 800410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b03      	cmp	r3, #3
 8004114:	d101      	bne.n	800411a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e099      	b.n	800424e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800411a:	4b4f      	ldr	r3, [pc, #316]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a4e      	ldr	r2, [pc, #312]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004126:	f7fc ff17 	bl	8000f58 <HAL_GetTick>
 800412a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800412c:	e008      	b.n	8004140 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800412e:	f7fc ff13 	bl	8000f58 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e086      	b.n	800424e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004140:	4b45      	ldr	r3, [pc, #276]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800414c:	4b42      	ldr	r3, [pc, #264]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	051b      	lsls	r3, r3, #20
 800415a:	493f      	ldr	r1, [pc, #252]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	3b01      	subs	r3, #1
 8004166:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	3b01      	subs	r3, #1
 8004170:	025b      	lsls	r3, r3, #9
 8004172:	b29b      	uxth	r3, r3
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	3b01      	subs	r3, #1
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	3b01      	subs	r3, #1
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004190:	4931      	ldr	r1, [pc, #196]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004192:	4313      	orrs	r3, r2
 8004194:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004196:	4b30      	ldr	r3, [pc, #192]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	492d      	ldr	r1, [pc, #180]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80041a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	4928      	ldr	r1, [pc, #160]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80041ba:	4b27      	ldr	r3, [pc, #156]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	4a26      	ldr	r2, [pc, #152]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80041c6:	4b24      	ldr	r3, [pc, #144]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ca:	4b24      	ldr	r3, [pc, #144]	@ (800425c <RCCEx_PLL3_Config+0x160>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	69d2      	ldr	r2, [r2, #28]
 80041d2:	00d2      	lsls	r2, r2, #3
 80041d4:	4920      	ldr	r1, [pc, #128]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041da:	4b1f      	ldr	r3, [pc, #124]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	4a1e      	ldr	r2, [pc, #120]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	4a19      	ldr	r2, [pc, #100]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041f8:	e00f      	b.n	800421a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d106      	bne.n	800420e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004200:	4b15      	ldr	r3, [pc, #84]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	4a14      	ldr	r2, [pc, #80]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004206:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800420a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800420c:	e005      	b.n	800421a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800420e:	4b12      	ldr	r3, [pc, #72]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004212:	4a11      	ldr	r2, [pc, #68]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004214:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004218:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800421a:	4b0f      	ldr	r3, [pc, #60]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a0e      	ldr	r2, [pc, #56]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004226:	f7fc fe97 	bl	8000f58 <HAL_GetTick>
 800422a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800422c:	e008      	b.n	8004240 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800422e:	f7fc fe93 	bl	8000f58 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e006      	b.n	800424e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004240:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	58024400 	.word	0x58024400
 800425c:	ffff0007 	.word	0xffff0007

08004260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e042      	b.n	80042f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7fc fccf 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2224      	movs	r2, #36	@ 0x24
 800428e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fe1e 	bl	8004eec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8b3 	bl	800441c <UART_SetConfig>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e01b      	b.n	80042f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fe9d 	bl	8005030 <UART_CheckIdleState>
 80042f6:	4603      	mov	r3, r0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	@ 0x28
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004316:	2b20      	cmp	r3, #32
 8004318:	d17b      	bne.n	8004412 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_UART_Transmit+0x26>
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e074      	b.n	8004414 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2221      	movs	r2, #33	@ 0x21
 8004336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800433a:	f7fc fe0d 	bl	8000f58 <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	88fa      	ldrh	r2, [r7, #6]
 800434c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004358:	d108      	bne.n	800436c <HAL_UART_Transmit+0x6c>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e003      	b.n	8004374 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004374:	e030      	b.n	80043d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2200      	movs	r2, #0
 800437e:	2180      	movs	r1, #128	@ 0x80
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 feff 	bl	8005184 <UART_WaitOnFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e03d      	b.n	8004414 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10b      	bne.n	80043b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	3302      	adds	r3, #2
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	e007      	b.n	80043c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	781a      	ldrb	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	3301      	adds	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1c8      	bne.n	8004376 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2200      	movs	r2, #0
 80043ec:	2140      	movs	r1, #64	@ 0x40
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fec8 	bl	8005184 <UART_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e006      	b.n	8004414 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	e000      	b.n	8004414 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004412:	2302      	movs	r3, #2
  }
}
 8004414:	4618      	mov	r0, r3
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800441c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004420:	b092      	sub	sp, #72	@ 0x48
 8004422:	af00      	add	r7, sp, #0
 8004424:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	431a      	orrs	r2, r3
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	431a      	orrs	r2, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	4313      	orrs	r3, r2
 8004442:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4bbe      	ldr	r3, [pc, #760]	@ (8004744 <UART_SetConfig+0x328>)
 800444c:	4013      	ands	r3, r2
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004454:	430b      	orrs	r3, r1
 8004456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4ab3      	ldr	r2, [pc, #716]	@ (8004748 <UART_SetConfig+0x32c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004484:	4313      	orrs	r3, r2
 8004486:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	4baf      	ldr	r3, [pc, #700]	@ (800474c <UART_SetConfig+0x330>)
 8004490:	4013      	ands	r3, r2
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004498:	430b      	orrs	r3, r1
 800449a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	f023 010f 	bic.w	r1, r3, #15
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4aa6      	ldr	r2, [pc, #664]	@ (8004750 <UART_SetConfig+0x334>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d177      	bne.n	80045ac <UART_SetConfig+0x190>
 80044bc:	4ba5      	ldr	r3, [pc, #660]	@ (8004754 <UART_SetConfig+0x338>)
 80044be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044c4:	2b28      	cmp	r3, #40	@ 0x28
 80044c6:	d86d      	bhi.n	80045a4 <UART_SetConfig+0x188>
 80044c8:	a201      	add	r2, pc, #4	@ (adr r2, 80044d0 <UART_SetConfig+0xb4>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	08004575 	.word	0x08004575
 80044d4:	080045a5 	.word	0x080045a5
 80044d8:	080045a5 	.word	0x080045a5
 80044dc:	080045a5 	.word	0x080045a5
 80044e0:	080045a5 	.word	0x080045a5
 80044e4:	080045a5 	.word	0x080045a5
 80044e8:	080045a5 	.word	0x080045a5
 80044ec:	080045a5 	.word	0x080045a5
 80044f0:	0800457d 	.word	0x0800457d
 80044f4:	080045a5 	.word	0x080045a5
 80044f8:	080045a5 	.word	0x080045a5
 80044fc:	080045a5 	.word	0x080045a5
 8004500:	080045a5 	.word	0x080045a5
 8004504:	080045a5 	.word	0x080045a5
 8004508:	080045a5 	.word	0x080045a5
 800450c:	080045a5 	.word	0x080045a5
 8004510:	08004585 	.word	0x08004585
 8004514:	080045a5 	.word	0x080045a5
 8004518:	080045a5 	.word	0x080045a5
 800451c:	080045a5 	.word	0x080045a5
 8004520:	080045a5 	.word	0x080045a5
 8004524:	080045a5 	.word	0x080045a5
 8004528:	080045a5 	.word	0x080045a5
 800452c:	080045a5 	.word	0x080045a5
 8004530:	0800458d 	.word	0x0800458d
 8004534:	080045a5 	.word	0x080045a5
 8004538:	080045a5 	.word	0x080045a5
 800453c:	080045a5 	.word	0x080045a5
 8004540:	080045a5 	.word	0x080045a5
 8004544:	080045a5 	.word	0x080045a5
 8004548:	080045a5 	.word	0x080045a5
 800454c:	080045a5 	.word	0x080045a5
 8004550:	08004595 	.word	0x08004595
 8004554:	080045a5 	.word	0x080045a5
 8004558:	080045a5 	.word	0x080045a5
 800455c:	080045a5 	.word	0x080045a5
 8004560:	080045a5 	.word	0x080045a5
 8004564:	080045a5 	.word	0x080045a5
 8004568:	080045a5 	.word	0x080045a5
 800456c:	080045a5 	.word	0x080045a5
 8004570:	0800459d 	.word	0x0800459d
 8004574:	2301      	movs	r3, #1
 8004576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800457a:	e222      	b.n	80049c2 <UART_SetConfig+0x5a6>
 800457c:	2304      	movs	r3, #4
 800457e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004582:	e21e      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004584:	2308      	movs	r3, #8
 8004586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800458a:	e21a      	b.n	80049c2 <UART_SetConfig+0x5a6>
 800458c:	2310      	movs	r3, #16
 800458e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004592:	e216      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004594:	2320      	movs	r3, #32
 8004596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800459a:	e212      	b.n	80049c2 <UART_SetConfig+0x5a6>
 800459c:	2340      	movs	r3, #64	@ 0x40
 800459e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045a2:	e20e      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80045a4:	2380      	movs	r3, #128	@ 0x80
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045aa:	e20a      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a69      	ldr	r2, [pc, #420]	@ (8004758 <UART_SetConfig+0x33c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d130      	bne.n	8004618 <UART_SetConfig+0x1fc>
 80045b6:	4b67      	ldr	r3, [pc, #412]	@ (8004754 <UART_SetConfig+0x338>)
 80045b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	2b05      	cmp	r3, #5
 80045c0:	d826      	bhi.n	8004610 <UART_SetConfig+0x1f4>
 80045c2:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <UART_SetConfig+0x1ac>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	080045e1 	.word	0x080045e1
 80045cc:	080045e9 	.word	0x080045e9
 80045d0:	080045f1 	.word	0x080045f1
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	08004601 	.word	0x08004601
 80045dc:	08004609 	.word	0x08004609
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e6:	e1ec      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80045e8:	2304      	movs	r3, #4
 80045ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ee:	e1e8      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80045f0:	2308      	movs	r3, #8
 80045f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045f6:	e1e4      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045fe:	e1e0      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004600:	2320      	movs	r3, #32
 8004602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004606:	e1dc      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004608:	2340      	movs	r3, #64	@ 0x40
 800460a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800460e:	e1d8      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004610:	2380      	movs	r3, #128	@ 0x80
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004616:	e1d4      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a4f      	ldr	r2, [pc, #316]	@ (800475c <UART_SetConfig+0x340>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d130      	bne.n	8004684 <UART_SetConfig+0x268>
 8004622:	4b4c      	ldr	r3, [pc, #304]	@ (8004754 <UART_SetConfig+0x338>)
 8004624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	2b05      	cmp	r3, #5
 800462c:	d826      	bhi.n	800467c <UART_SetConfig+0x260>
 800462e:	a201      	add	r2, pc, #4	@ (adr r2, 8004634 <UART_SetConfig+0x218>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	0800464d 	.word	0x0800464d
 8004638:	08004655 	.word	0x08004655
 800463c:	0800465d 	.word	0x0800465d
 8004640:	08004665 	.word	0x08004665
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004675 	.word	0x08004675
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004652:	e1b6      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004654:	2304      	movs	r3, #4
 8004656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800465a:	e1b2      	b.n	80049c2 <UART_SetConfig+0x5a6>
 800465c:	2308      	movs	r3, #8
 800465e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004662:	e1ae      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004664:	2310      	movs	r3, #16
 8004666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800466a:	e1aa      	b.n	80049c2 <UART_SetConfig+0x5a6>
 800466c:	2320      	movs	r3, #32
 800466e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004672:	e1a6      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004674:	2340      	movs	r3, #64	@ 0x40
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467a:	e1a2      	b.n	80049c2 <UART_SetConfig+0x5a6>
 800467c:	2380      	movs	r3, #128	@ 0x80
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004682:	e19e      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a35      	ldr	r2, [pc, #212]	@ (8004760 <UART_SetConfig+0x344>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d130      	bne.n	80046f0 <UART_SetConfig+0x2d4>
 800468e:	4b31      	ldr	r3, [pc, #196]	@ (8004754 <UART_SetConfig+0x338>)
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	2b05      	cmp	r3, #5
 8004698:	d826      	bhi.n	80046e8 <UART_SetConfig+0x2cc>
 800469a:	a201      	add	r2, pc, #4	@ (adr r2, 80046a0 <UART_SetConfig+0x284>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046b9 	.word	0x080046b9
 80046a4:	080046c1 	.word	0x080046c1
 80046a8:	080046c9 	.word	0x080046c9
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046d9 	.word	0x080046d9
 80046b4:	080046e1 	.word	0x080046e1
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046be:	e180      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80046c0:	2304      	movs	r3, #4
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c6:	e17c      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80046c8:	2308      	movs	r3, #8
 80046ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ce:	e178      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80046d0:	2310      	movs	r3, #16
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d6:	e174      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80046d8:	2320      	movs	r3, #32
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046de:	e170      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80046e0:	2340      	movs	r3, #64	@ 0x40
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e6:	e16c      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80046e8:	2380      	movs	r3, #128	@ 0x80
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ee:	e168      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004764 <UART_SetConfig+0x348>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d142      	bne.n	8004780 <UART_SetConfig+0x364>
 80046fa:	4b16      	ldr	r3, [pc, #88]	@ (8004754 <UART_SetConfig+0x338>)
 80046fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	2b05      	cmp	r3, #5
 8004704:	d838      	bhi.n	8004778 <UART_SetConfig+0x35c>
 8004706:	a201      	add	r2, pc, #4	@ (adr r2, 800470c <UART_SetConfig+0x2f0>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004725 	.word	0x08004725
 8004710:	0800472d 	.word	0x0800472d
 8004714:	08004735 	.word	0x08004735
 8004718:	0800473d 	.word	0x0800473d
 800471c:	08004769 	.word	0x08004769
 8004720:	08004771 	.word	0x08004771
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472a:	e14a      	b.n	80049c2 <UART_SetConfig+0x5a6>
 800472c:	2304      	movs	r3, #4
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004732:	e146      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004734:	2308      	movs	r3, #8
 8004736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473a:	e142      	b.n	80049c2 <UART_SetConfig+0x5a6>
 800473c:	2310      	movs	r3, #16
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004742:	e13e      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004744:	cfff69f3 	.word	0xcfff69f3
 8004748:	58000c00 	.word	0x58000c00
 800474c:	11fff4ff 	.word	0x11fff4ff
 8004750:	40011000 	.word	0x40011000
 8004754:	58024400 	.word	0x58024400
 8004758:	40004400 	.word	0x40004400
 800475c:	40004800 	.word	0x40004800
 8004760:	40004c00 	.word	0x40004c00
 8004764:	40005000 	.word	0x40005000
 8004768:	2320      	movs	r3, #32
 800476a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476e:	e128      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004770:	2340      	movs	r3, #64	@ 0x40
 8004772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004776:	e124      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004778:	2380      	movs	r3, #128	@ 0x80
 800477a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800477e:	e120      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4acb      	ldr	r2, [pc, #812]	@ (8004ab4 <UART_SetConfig+0x698>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d176      	bne.n	8004878 <UART_SetConfig+0x45c>
 800478a:	4bcb      	ldr	r3, [pc, #812]	@ (8004ab8 <UART_SetConfig+0x69c>)
 800478c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004792:	2b28      	cmp	r3, #40	@ 0x28
 8004794:	d86c      	bhi.n	8004870 <UART_SetConfig+0x454>
 8004796:	a201      	add	r2, pc, #4	@ (adr r2, 800479c <UART_SetConfig+0x380>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	08004841 	.word	0x08004841
 80047a0:	08004871 	.word	0x08004871
 80047a4:	08004871 	.word	0x08004871
 80047a8:	08004871 	.word	0x08004871
 80047ac:	08004871 	.word	0x08004871
 80047b0:	08004871 	.word	0x08004871
 80047b4:	08004871 	.word	0x08004871
 80047b8:	08004871 	.word	0x08004871
 80047bc:	08004849 	.word	0x08004849
 80047c0:	08004871 	.word	0x08004871
 80047c4:	08004871 	.word	0x08004871
 80047c8:	08004871 	.word	0x08004871
 80047cc:	08004871 	.word	0x08004871
 80047d0:	08004871 	.word	0x08004871
 80047d4:	08004871 	.word	0x08004871
 80047d8:	08004871 	.word	0x08004871
 80047dc:	08004851 	.word	0x08004851
 80047e0:	08004871 	.word	0x08004871
 80047e4:	08004871 	.word	0x08004871
 80047e8:	08004871 	.word	0x08004871
 80047ec:	08004871 	.word	0x08004871
 80047f0:	08004871 	.word	0x08004871
 80047f4:	08004871 	.word	0x08004871
 80047f8:	08004871 	.word	0x08004871
 80047fc:	08004859 	.word	0x08004859
 8004800:	08004871 	.word	0x08004871
 8004804:	08004871 	.word	0x08004871
 8004808:	08004871 	.word	0x08004871
 800480c:	08004871 	.word	0x08004871
 8004810:	08004871 	.word	0x08004871
 8004814:	08004871 	.word	0x08004871
 8004818:	08004871 	.word	0x08004871
 800481c:	08004861 	.word	0x08004861
 8004820:	08004871 	.word	0x08004871
 8004824:	08004871 	.word	0x08004871
 8004828:	08004871 	.word	0x08004871
 800482c:	08004871 	.word	0x08004871
 8004830:	08004871 	.word	0x08004871
 8004834:	08004871 	.word	0x08004871
 8004838:	08004871 	.word	0x08004871
 800483c:	08004869 	.word	0x08004869
 8004840:	2301      	movs	r3, #1
 8004842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004846:	e0bc      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004848:	2304      	movs	r3, #4
 800484a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800484e:	e0b8      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004850:	2308      	movs	r3, #8
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004856:	e0b4      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004858:	2310      	movs	r3, #16
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485e:	e0b0      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004860:	2320      	movs	r3, #32
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004866:	e0ac      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004868:	2340      	movs	r3, #64	@ 0x40
 800486a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800486e:	e0a8      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004870:	2380      	movs	r3, #128	@ 0x80
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004876:	e0a4      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a8f      	ldr	r2, [pc, #572]	@ (8004abc <UART_SetConfig+0x6a0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d130      	bne.n	80048e4 <UART_SetConfig+0x4c8>
 8004882:	4b8d      	ldr	r3, [pc, #564]	@ (8004ab8 <UART_SetConfig+0x69c>)
 8004884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	2b05      	cmp	r3, #5
 800488c:	d826      	bhi.n	80048dc <UART_SetConfig+0x4c0>
 800488e:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <UART_SetConfig+0x478>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048ad 	.word	0x080048ad
 8004898:	080048b5 	.word	0x080048b5
 800489c:	080048bd 	.word	0x080048bd
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048cd 	.word	0x080048cd
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b2:	e086      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80048b4:	2304      	movs	r3, #4
 80048b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ba:	e082      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80048bc:	2308      	movs	r3, #8
 80048be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c2:	e07e      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80048c4:	2310      	movs	r3, #16
 80048c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ca:	e07a      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80048cc:	2320      	movs	r3, #32
 80048ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048d2:	e076      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80048d4:	2340      	movs	r3, #64	@ 0x40
 80048d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048da:	e072      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80048dc:	2380      	movs	r3, #128	@ 0x80
 80048de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e2:	e06e      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a75      	ldr	r2, [pc, #468]	@ (8004ac0 <UART_SetConfig+0x6a4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d130      	bne.n	8004950 <UART_SetConfig+0x534>
 80048ee:	4b72      	ldr	r3, [pc, #456]	@ (8004ab8 <UART_SetConfig+0x69c>)
 80048f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d826      	bhi.n	8004948 <UART_SetConfig+0x52c>
 80048fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004900 <UART_SetConfig+0x4e4>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004919 	.word	0x08004919
 8004904:	08004921 	.word	0x08004921
 8004908:	08004929 	.word	0x08004929
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	2300      	movs	r3, #0
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491e:	e050      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004926:	e04c      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800492e:	e048      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004936:	e044      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004938:	2320      	movs	r3, #32
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493e:	e040      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004940:	2340      	movs	r3, #64	@ 0x40
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004946:	e03c      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004948:	2380      	movs	r3, #128	@ 0x80
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494e:	e038      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a5b      	ldr	r2, [pc, #364]	@ (8004ac4 <UART_SetConfig+0x6a8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d130      	bne.n	80049bc <UART_SetConfig+0x5a0>
 800495a:	4b57      	ldr	r3, [pc, #348]	@ (8004ab8 <UART_SetConfig+0x69c>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	2b05      	cmp	r3, #5
 8004964:	d826      	bhi.n	80049b4 <UART_SetConfig+0x598>
 8004966:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <UART_SetConfig+0x550>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	08004985 	.word	0x08004985
 8004970:	0800498d 	.word	0x0800498d
 8004974:	08004995 	.word	0x08004995
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049a5 	.word	0x080049a5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	2302      	movs	r3, #2
 8004986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498a:	e01a      	b.n	80049c2 <UART_SetConfig+0x5a6>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004992:	e016      	b.n	80049c2 <UART_SetConfig+0x5a6>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499a:	e012      	b.n	80049c2 <UART_SetConfig+0x5a6>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a2:	e00e      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80049a4:	2320      	movs	r3, #32
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049aa:	e00a      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80049ac:	2340      	movs	r3, #64	@ 0x40
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b2:	e006      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e002      	b.n	80049c2 <UART_SetConfig+0x5a6>
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ac4 <UART_SetConfig+0x6a8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	f040 80f8 	bne.w	8004bbe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	dc46      	bgt.n	8004a64 <UART_SetConfig+0x648>
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	f2c0 8082 	blt.w	8004ae0 <UART_SetConfig+0x6c4>
 80049dc:	3b02      	subs	r3, #2
 80049de:	2b1e      	cmp	r3, #30
 80049e0:	d87e      	bhi.n	8004ae0 <UART_SetConfig+0x6c4>
 80049e2:	a201      	add	r2, pc, #4	@ (adr r2, 80049e8 <UART_SetConfig+0x5cc>)
 80049e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e8:	08004a6b 	.word	0x08004a6b
 80049ec:	08004ae1 	.word	0x08004ae1
 80049f0:	08004a73 	.word	0x08004a73
 80049f4:	08004ae1 	.word	0x08004ae1
 80049f8:	08004ae1 	.word	0x08004ae1
 80049fc:	08004ae1 	.word	0x08004ae1
 8004a00:	08004a83 	.word	0x08004a83
 8004a04:	08004ae1 	.word	0x08004ae1
 8004a08:	08004ae1 	.word	0x08004ae1
 8004a0c:	08004ae1 	.word	0x08004ae1
 8004a10:	08004ae1 	.word	0x08004ae1
 8004a14:	08004ae1 	.word	0x08004ae1
 8004a18:	08004ae1 	.word	0x08004ae1
 8004a1c:	08004ae1 	.word	0x08004ae1
 8004a20:	08004a93 	.word	0x08004a93
 8004a24:	08004ae1 	.word	0x08004ae1
 8004a28:	08004ae1 	.word	0x08004ae1
 8004a2c:	08004ae1 	.word	0x08004ae1
 8004a30:	08004ae1 	.word	0x08004ae1
 8004a34:	08004ae1 	.word	0x08004ae1
 8004a38:	08004ae1 	.word	0x08004ae1
 8004a3c:	08004ae1 	.word	0x08004ae1
 8004a40:	08004ae1 	.word	0x08004ae1
 8004a44:	08004ae1 	.word	0x08004ae1
 8004a48:	08004ae1 	.word	0x08004ae1
 8004a4c:	08004ae1 	.word	0x08004ae1
 8004a50:	08004ae1 	.word	0x08004ae1
 8004a54:	08004ae1 	.word	0x08004ae1
 8004a58:	08004ae1 	.word	0x08004ae1
 8004a5c:	08004ae1 	.word	0x08004ae1
 8004a60:	08004ad3 	.word	0x08004ad3
 8004a64:	2b40      	cmp	r3, #64	@ 0x40
 8004a66:	d037      	beq.n	8004ad8 <UART_SetConfig+0x6bc>
 8004a68:	e03a      	b.n	8004ae0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a6a:	f7fe ffd7 	bl	8003a1c <HAL_RCCEx_GetD3PCLK1Freq>
 8004a6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a70:	e03c      	b.n	8004aec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe ffe6 	bl	8003a48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a80:	e034      	b.n	8004aec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a82:	f107 0318 	add.w	r3, r7, #24
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff f932 	bl	8003cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a90:	e02c      	b.n	8004aec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a92:	4b09      	ldr	r3, [pc, #36]	@ (8004ab8 <UART_SetConfig+0x69c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a9e:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <UART_SetConfig+0x69c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	08db      	lsrs	r3, r3, #3
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	4a07      	ldr	r2, [pc, #28]	@ (8004ac8 <UART_SetConfig+0x6ac>)
 8004aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ab0:	e01c      	b.n	8004aec <UART_SetConfig+0x6d0>
 8004ab2:	bf00      	nop
 8004ab4:	40011400 	.word	0x40011400
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	40007800 	.word	0x40007800
 8004ac0:	40007c00 	.word	0x40007c00
 8004ac4:	58000c00 	.word	0x58000c00
 8004ac8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004acc:	4b9d      	ldr	r3, [pc, #628]	@ (8004d44 <UART_SetConfig+0x928>)
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ad0:	e00c      	b.n	8004aec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ad2:	4b9d      	ldr	r3, [pc, #628]	@ (8004d48 <UART_SetConfig+0x92c>)
 8004ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ad6:	e009      	b.n	8004aec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ade:	e005      	b.n	8004aec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004aea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 81de 	beq.w	8004eb0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	4a94      	ldr	r2, [pc, #592]	@ (8004d4c <UART_SetConfig+0x930>)
 8004afa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004afe:	461a      	mov	r2, r3
 8004b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b06:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d305      	bcc.n	8004b24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d903      	bls.n	8004b2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004b2a:	e1c1      	b.n	8004eb0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b2e:	2200      	movs	r2, #0
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	60fa      	str	r2, [r7, #12]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	4a84      	ldr	r2, [pc, #528]	@ (8004d4c <UART_SetConfig+0x930>)
 8004b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2200      	movs	r2, #0
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b4e:	f7fb fbc3 	bl	80002d8 <__aeabi_uldivmod>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	020b      	lsls	r3, r1, #8
 8004b64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b68:	0202      	lsls	r2, r0, #8
 8004b6a:	6979      	ldr	r1, [r7, #20]
 8004b6c:	6849      	ldr	r1, [r1, #4]
 8004b6e:	0849      	lsrs	r1, r1, #1
 8004b70:	2000      	movs	r0, #0
 8004b72:	460c      	mov	r4, r1
 8004b74:	4605      	mov	r5, r0
 8004b76:	eb12 0804 	adds.w	r8, r2, r4
 8004b7a:	eb43 0905 	adc.w	r9, r3, r5
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	469a      	mov	sl, r3
 8004b86:	4693      	mov	fp, r2
 8004b88:	4652      	mov	r2, sl
 8004b8a:	465b      	mov	r3, fp
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	4649      	mov	r1, r9
 8004b90:	f7fb fba2 	bl	80002d8 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4613      	mov	r3, r2
 8004b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ba2:	d308      	bcc.n	8004bb6 <UART_SetConfig+0x79a>
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004baa:	d204      	bcs.n	8004bb6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004bb2:	60da      	str	r2, [r3, #12]
 8004bb4:	e17c      	b.n	8004eb0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004bbc:	e178      	b.n	8004eb0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bc6:	f040 80c5 	bne.w	8004d54 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004bca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	dc48      	bgt.n	8004c64 <UART_SetConfig+0x848>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	db7b      	blt.n	8004cce <UART_SetConfig+0x8b2>
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d879      	bhi.n	8004cce <UART_SetConfig+0x8b2>
 8004bda:	a201      	add	r2, pc, #4	@ (adr r2, 8004be0 <UART_SetConfig+0x7c4>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004c6b 	.word	0x08004c6b
 8004be4:	08004c73 	.word	0x08004c73
 8004be8:	08004ccf 	.word	0x08004ccf
 8004bec:	08004ccf 	.word	0x08004ccf
 8004bf0:	08004c7b 	.word	0x08004c7b
 8004bf4:	08004ccf 	.word	0x08004ccf
 8004bf8:	08004ccf 	.word	0x08004ccf
 8004bfc:	08004ccf 	.word	0x08004ccf
 8004c00:	08004c8b 	.word	0x08004c8b
 8004c04:	08004ccf 	.word	0x08004ccf
 8004c08:	08004ccf 	.word	0x08004ccf
 8004c0c:	08004ccf 	.word	0x08004ccf
 8004c10:	08004ccf 	.word	0x08004ccf
 8004c14:	08004ccf 	.word	0x08004ccf
 8004c18:	08004ccf 	.word	0x08004ccf
 8004c1c:	08004ccf 	.word	0x08004ccf
 8004c20:	08004c9b 	.word	0x08004c9b
 8004c24:	08004ccf 	.word	0x08004ccf
 8004c28:	08004ccf 	.word	0x08004ccf
 8004c2c:	08004ccf 	.word	0x08004ccf
 8004c30:	08004ccf 	.word	0x08004ccf
 8004c34:	08004ccf 	.word	0x08004ccf
 8004c38:	08004ccf 	.word	0x08004ccf
 8004c3c:	08004ccf 	.word	0x08004ccf
 8004c40:	08004ccf 	.word	0x08004ccf
 8004c44:	08004ccf 	.word	0x08004ccf
 8004c48:	08004ccf 	.word	0x08004ccf
 8004c4c:	08004ccf 	.word	0x08004ccf
 8004c50:	08004ccf 	.word	0x08004ccf
 8004c54:	08004ccf 	.word	0x08004ccf
 8004c58:	08004ccf 	.word	0x08004ccf
 8004c5c:	08004ccf 	.word	0x08004ccf
 8004c60:	08004cc1 	.word	0x08004cc1
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d02e      	beq.n	8004cc6 <UART_SetConfig+0x8aa>
 8004c68:	e031      	b.n	8004cce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c6a:	f7fd fca1 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8004c6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c70:	e033      	b.n	8004cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c72:	f7fd fcb3 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8004c76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c78:	e02f      	b.n	8004cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fee2 	bl	8003a48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c88:	e027      	b.n	8004cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c8a:	f107 0318 	add.w	r3, r7, #24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff f82e 	bl	8003cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c98:	e01f      	b.n	8004cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004d50 <UART_SetConfig+0x934>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8004d50 <UART_SetConfig+0x934>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	08db      	lsrs	r3, r3, #3
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	4a24      	ldr	r2, [pc, #144]	@ (8004d44 <UART_SetConfig+0x928>)
 8004cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004cb8:	e00f      	b.n	8004cda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004cba:	4b22      	ldr	r3, [pc, #136]	@ (8004d44 <UART_SetConfig+0x928>)
 8004cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cbe:	e00c      	b.n	8004cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004cc0:	4b21      	ldr	r3, [pc, #132]	@ (8004d48 <UART_SetConfig+0x92c>)
 8004cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cc4:	e009      	b.n	8004cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ccc:	e005      	b.n	8004cda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80e7 	beq.w	8004eb0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce6:	4a19      	ldr	r2, [pc, #100]	@ (8004d4c <UART_SetConfig+0x930>)
 8004ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cec:	461a      	mov	r2, r3
 8004cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf4:	005a      	lsls	r2, r3, #1
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	441a      	add	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0a:	2b0f      	cmp	r3, #15
 8004d0c:	d916      	bls.n	8004d3c <UART_SetConfig+0x920>
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d14:	d212      	bcs.n	8004d3c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f023 030f 	bic.w	r3, r3, #15
 8004d1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	e0b9      	b.n	8004eb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004d42:	e0b5      	b.n	8004eb0 <UART_SetConfig+0xa94>
 8004d44:	03d09000 	.word	0x03d09000
 8004d48:	003d0900 	.word	0x003d0900
 8004d4c:	080055dc 	.word	0x080055dc
 8004d50:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	dc49      	bgt.n	8004df0 <UART_SetConfig+0x9d4>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	db7c      	blt.n	8004e5a <UART_SetConfig+0xa3e>
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d87a      	bhi.n	8004e5a <UART_SetConfig+0xa3e>
 8004d64:	a201      	add	r2, pc, #4	@ (adr r2, 8004d6c <UART_SetConfig+0x950>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004df7 	.word	0x08004df7
 8004d70:	08004dff 	.word	0x08004dff
 8004d74:	08004e5b 	.word	0x08004e5b
 8004d78:	08004e5b 	.word	0x08004e5b
 8004d7c:	08004e07 	.word	0x08004e07
 8004d80:	08004e5b 	.word	0x08004e5b
 8004d84:	08004e5b 	.word	0x08004e5b
 8004d88:	08004e5b 	.word	0x08004e5b
 8004d8c:	08004e17 	.word	0x08004e17
 8004d90:	08004e5b 	.word	0x08004e5b
 8004d94:	08004e5b 	.word	0x08004e5b
 8004d98:	08004e5b 	.word	0x08004e5b
 8004d9c:	08004e5b 	.word	0x08004e5b
 8004da0:	08004e5b 	.word	0x08004e5b
 8004da4:	08004e5b 	.word	0x08004e5b
 8004da8:	08004e5b 	.word	0x08004e5b
 8004dac:	08004e27 	.word	0x08004e27
 8004db0:	08004e5b 	.word	0x08004e5b
 8004db4:	08004e5b 	.word	0x08004e5b
 8004db8:	08004e5b 	.word	0x08004e5b
 8004dbc:	08004e5b 	.word	0x08004e5b
 8004dc0:	08004e5b 	.word	0x08004e5b
 8004dc4:	08004e5b 	.word	0x08004e5b
 8004dc8:	08004e5b 	.word	0x08004e5b
 8004dcc:	08004e5b 	.word	0x08004e5b
 8004dd0:	08004e5b 	.word	0x08004e5b
 8004dd4:	08004e5b 	.word	0x08004e5b
 8004dd8:	08004e5b 	.word	0x08004e5b
 8004ddc:	08004e5b 	.word	0x08004e5b
 8004de0:	08004e5b 	.word	0x08004e5b
 8004de4:	08004e5b 	.word	0x08004e5b
 8004de8:	08004e5b 	.word	0x08004e5b
 8004dec:	08004e4d 	.word	0x08004e4d
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	d02e      	beq.n	8004e52 <UART_SetConfig+0xa36>
 8004df4:	e031      	b.n	8004e5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df6:	f7fd fbdb 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8004dfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004dfc:	e033      	b.n	8004e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dfe:	f7fd fbed 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8004e02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e04:	e02f      	b.n	8004e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fe1c 	bl	8003a48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e14:	e027      	b.n	8004e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e16:	f107 0318 	add.w	r3, r7, #24
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe ff68 	bl	8003cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e24:	e01f      	b.n	8004e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e26:	4b2d      	ldr	r3, [pc, #180]	@ (8004edc <UART_SetConfig+0xac0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e32:	4b2a      	ldr	r3, [pc, #168]	@ (8004edc <UART_SetConfig+0xac0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	08db      	lsrs	r3, r3, #3
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	4a28      	ldr	r2, [pc, #160]	@ (8004ee0 <UART_SetConfig+0xac4>)
 8004e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e44:	e00f      	b.n	8004e66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004e46:	4b26      	ldr	r3, [pc, #152]	@ (8004ee0 <UART_SetConfig+0xac4>)
 8004e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e4a:	e00c      	b.n	8004e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ee4 <UART_SetConfig+0xac8>)
 8004e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e50:	e009      	b.n	8004e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e58:	e005      	b.n	8004e66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004e64:	bf00      	nop
    }

    if (pclk != 0U)
 8004e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d021      	beq.n	8004eb0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee8 <UART_SetConfig+0xacc>)
 8004e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	441a      	add	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e92:	2b0f      	cmp	r3, #15
 8004e94:	d909      	bls.n	8004eaa <UART_SetConfig+0xa8e>
 8004e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e9c:	d205      	bcs.n	8004eaa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60da      	str	r2, [r3, #12]
 8004ea8:	e002      	b.n	8004eb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004ecc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3748      	adds	r7, #72	@ 0x48
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eda:	bf00      	nop
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	03d09000 	.word	0x03d09000
 8004ee4:	003d0900 	.word	0x003d0900
 8004ee8:	080055dc 	.word	0x080055dc

08004eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01a      	beq.n	8005002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fea:	d10a      	bne.n	8005002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]
  }
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b098      	sub	sp, #96	@ 0x60
 8005034:	af02      	add	r7, sp, #8
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005040:	f7fb ff8a 	bl	8000f58 <HAL_GetTick>
 8005044:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b08      	cmp	r3, #8
 8005052:	d12f      	bne.n	80050b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800505c:	2200      	movs	r2, #0
 800505e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f88e 	bl	8005184 <UART_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d022      	beq.n	80050b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800507c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005082:	653b      	str	r3, [r7, #80]	@ 0x50
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800508c:	647b      	str	r3, [r7, #68]	@ 0x44
 800508e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800509a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e6      	bne.n	800506e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e063      	b.n	800517c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d149      	bne.n	8005156 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ca:	2200      	movs	r2, #0
 80050cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f857 	bl	8005184 <UART_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d03c      	beq.n	8005156 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	623b      	str	r3, [r7, #32]
   return(result);
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80050fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e6      	bne.n	80050dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3308      	adds	r3, #8
 8005114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	60fb      	str	r3, [r7, #12]
   return(result);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3308      	adds	r3, #8
 800512c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800512e:	61fa      	str	r2, [r7, #28]
 8005130:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	69b9      	ldr	r1, [r7, #24]
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	617b      	str	r3, [r7, #20]
   return(result);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e5      	bne.n	800510e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e012      	b.n	800517c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3758      	adds	r7, #88	@ 0x58
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005194:	e04f      	b.n	8005236 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800519c:	d04b      	beq.n	8005236 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fb fedb 	bl	8000f58 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e04e      	b.n	8005256 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d037      	beq.n	8005236 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b80      	cmp	r3, #128	@ 0x80
 80051ca:	d034      	beq.n	8005236 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b40      	cmp	r3, #64	@ 0x40
 80051d0:	d031      	beq.n	8005236 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d110      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2208      	movs	r2, #8
 80051e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f839 	bl	8005260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2208      	movs	r2, #8
 80051f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e029      	b.n	8005256 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800520c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005210:	d111      	bne.n	8005236 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800521a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f81f 	bl	8005260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2220      	movs	r2, #32
 8005226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e00f      	b.n	8005256 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	429a      	cmp	r2, r3
 8005252:	d0a0      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b095      	sub	sp, #84	@ 0x54
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800527c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005286:	643b      	str	r3, [r7, #64]	@ 0x40
 8005288:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800528c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e6      	bne.n	8005268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3308      	adds	r3, #8
 80052a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005328 <UART_EndRxTransfer+0xc8>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3308      	adds	r3, #8
 80052b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e5      	bne.n	800529a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d118      	bne.n	8005308 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f023 0310 	bic.w	r3, r3, #16
 80052ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052f4:	61bb      	str	r3, [r7, #24]
 80052f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6979      	ldr	r1, [r7, #20]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	613b      	str	r3, [r7, #16]
   return(result);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e6      	bne.n	80052d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800531c:	bf00      	nop
 800531e:	3754      	adds	r7, #84	@ 0x54
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	effffffe 	.word	0xeffffffe

0800532c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_UARTEx_DisableFifoMode+0x16>
 800533e:	2302      	movs	r3, #2
 8005340:	e027      	b.n	8005392 <HAL_UARTEx_DisableFifoMode+0x66>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2224      	movs	r2, #36	@ 0x24
 800534e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e02d      	b.n	8005412 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2224      	movs	r2, #36	@ 0x24
 80053c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f850 	bl	8005498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800542e:	2302      	movs	r3, #2
 8005430:	e02d      	b.n	800548e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2224      	movs	r2, #36	@ 0x24
 800543e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f812 	bl	8005498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d108      	bne.n	80054ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054b8:	e031      	b.n	800551e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054ba:	2310      	movs	r3, #16
 80054bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054be:	2310      	movs	r3, #16
 80054c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	0e5b      	lsrs	r3, r3, #25
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	0f5b      	lsrs	r3, r3, #29
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054e2:	7bbb      	ldrb	r3, [r7, #14]
 80054e4:	7b3a      	ldrb	r2, [r7, #12]
 80054e6:	4911      	ldr	r1, [pc, #68]	@ (800552c <UARTEx_SetNbDataToProcess+0x94>)
 80054e8:	5c8a      	ldrb	r2, [r1, r2]
 80054ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054ee:	7b3a      	ldrb	r2, [r7, #12]
 80054f0:	490f      	ldr	r1, [pc, #60]	@ (8005530 <UARTEx_SetNbDataToProcess+0x98>)
 80054f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	7b7a      	ldrb	r2, [r7, #13]
 8005504:	4909      	ldr	r1, [pc, #36]	@ (800552c <UARTEx_SetNbDataToProcess+0x94>)
 8005506:	5c8a      	ldrb	r2, [r1, r2]
 8005508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800550c:	7b7a      	ldrb	r2, [r7, #13]
 800550e:	4908      	ldr	r1, [pc, #32]	@ (8005530 <UARTEx_SetNbDataToProcess+0x98>)
 8005510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005512:	fb93 f3f2 	sdiv	r3, r3, r2
 8005516:	b29a      	uxth	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	080055f4 	.word	0x080055f4
 8005530:	080055fc 	.word	0x080055fc

08005534 <memset>:
 8005534:	4402      	add	r2, r0
 8005536:	4603      	mov	r3, r0
 8005538:	4293      	cmp	r3, r2
 800553a:	d100      	bne.n	800553e <memset+0xa>
 800553c:	4770      	bx	lr
 800553e:	f803 1b01 	strb.w	r1, [r3], #1
 8005542:	e7f9      	b.n	8005538 <memset+0x4>

08005544 <__libc_init_array>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	4d0d      	ldr	r5, [pc, #52]	@ (800557c <__libc_init_array+0x38>)
 8005548:	4c0d      	ldr	r4, [pc, #52]	@ (8005580 <__libc_init_array+0x3c>)
 800554a:	1b64      	subs	r4, r4, r5
 800554c:	10a4      	asrs	r4, r4, #2
 800554e:	2600      	movs	r6, #0
 8005550:	42a6      	cmp	r6, r4
 8005552:	d109      	bne.n	8005568 <__libc_init_array+0x24>
 8005554:	4d0b      	ldr	r5, [pc, #44]	@ (8005584 <__libc_init_array+0x40>)
 8005556:	4c0c      	ldr	r4, [pc, #48]	@ (8005588 <__libc_init_array+0x44>)
 8005558:	f000 f818 	bl	800558c <_init>
 800555c:	1b64      	subs	r4, r4, r5
 800555e:	10a4      	asrs	r4, r4, #2
 8005560:	2600      	movs	r6, #0
 8005562:	42a6      	cmp	r6, r4
 8005564:	d105      	bne.n	8005572 <__libc_init_array+0x2e>
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	f855 3b04 	ldr.w	r3, [r5], #4
 800556c:	4798      	blx	r3
 800556e:	3601      	adds	r6, #1
 8005570:	e7ee      	b.n	8005550 <__libc_init_array+0xc>
 8005572:	f855 3b04 	ldr.w	r3, [r5], #4
 8005576:	4798      	blx	r3
 8005578:	3601      	adds	r6, #1
 800557a:	e7f2      	b.n	8005562 <__libc_init_array+0x1e>
 800557c:	0800560c 	.word	0x0800560c
 8005580:	0800560c 	.word	0x0800560c
 8005584:	0800560c 	.word	0x0800560c
 8005588:	08005610 	.word	0x08005610

0800558c <_init>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr

08005598 <_fini>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	bf00      	nop
 800559c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559e:	bc08      	pop	{r3}
 80055a0:	469e      	mov	lr, r3
 80055a2:	4770      	bx	lr
