
Code_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008950  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008bf0  08008bf0  00009bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c60  08008c60  0000a088  2**0
                  CONTENTS
  4 .ARM          00000008  08008c60  08008c60  00009c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c68  08008c68  0000a088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c68  08008c68  00009c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c6c  08008c6c  00009c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08008c70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  24000088  08008cf8  0000a088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000310  08008cf8  0000a310  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b39  00000000  00000000  0000a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002963  00000000  00000000  0001fbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00022558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c71  00000000  00000000  000235a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cc02  00000000  00000000  00024211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cc5  00000000  00000000  00060e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019292a  00000000  00000000  00075ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00208402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf4  00000000  00000000  00208448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0020d03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008bd8 	.word	0x08008bd8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008bd8 	.word	0x08008bd8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007a8:	bf00      	nop
 80007aa:	4b3e      	ldr	r3, [pc, #248]	@ (80008a4 <main+0x108>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0x24>
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	60fa      	str	r2, [r7, #12]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dcf4      	bgt.n	80007aa <main+0xe>
  if ( timeout < 0 )
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da01      	bge.n	80007ca <main+0x2e>
  {
  Error_Handler();
 80007c6:	f000 fa27 	bl	8000c18 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fd93 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f871 	bl	80008b4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007d2:	4b34      	ldr	r3, [pc, #208]	@ (80008a4 <main+0x108>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a32      	ldr	r2, [pc, #200]	@ (80008a4 <main+0x108>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b30      	ldr	r3, [pc, #192]	@ (80008a4 <main+0x108>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f002 fce5 	bl	80031c0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f002 fcfb 	bl	80031f4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000802:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000804:	bf00      	nop
 8000806:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <main+0x108>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x80>
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	60fa      	str	r2, [r7, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf4      	bgt.n	8000806 <main+0x6a>
if ( timeout < 0 )
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <main+0x8a>
{
Error_Handler();
 8000822:	f000 f9f9 	bl	8000c18 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f93b 	bl	8000aa0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800082a:	f000 f8b5 	bl	8000998 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 fb88 	bl	8000f44 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 fb85 	bl	8000f44 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800083a:	2002      	movs	r0, #2
 800083c:	f000 fb82 	bl	8000f44 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000840:	2101      	movs	r1, #1
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fbf4 	bl	8001030 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <main+0x10c>)
 800084a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800084e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000850:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <main+0x10c>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000856:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <main+0x10c>)
 8000858:	2200      	movs	r2, #0
 800085a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <main+0x10c>)
 800085e:	2200      	movs	r2, #0
 8000860:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <main+0x10c>)
 8000864:	2200      	movs	r2, #0
 8000866:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000868:	490f      	ldr	r1, [pc, #60]	@ (80008a8 <main+0x10c>)
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fc64 	bl	8001138 <BSP_COM_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <main+0xde>
  {
    Error_Handler();
 8000876:	f000 f9cf 	bl	8000c18 <Error_Handler>
//	  }


//		  // Start the ADC conversion
//		  HAL_ADC_Start(&hadc1);
	  	  HAL_ADC_Start(&hadc1);
 800087a:	480c      	ldr	r0, [pc, #48]	@ (80008ac <main+0x110>)
 800087c:	f001 f980 	bl	8001b80 <HAL_ADC_Start>
		  // Poll for conversion completion (blocking function)
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8000880:	2164      	movs	r1, #100	@ 0x64
 8000882:	480a      	ldr	r0, [pc, #40]	@ (80008ac <main+0x110>)
 8000884:	f001 fa46 	bl	8001d14 <HAL_ADC_PollForConversion>

		  // Get the ADC value (raw digital value)
		  adcValue = HAL_ADC_GetValue(&hadc1);
 8000888:	4808      	ldr	r0, [pc, #32]	@ (80008ac <main+0x110>)
 800088a:	f001 fb37 	bl	8001efc <HAL_ADC_GetValue>
 800088e:	60b8      	str	r0, [r7, #8]

		  // Convert the raw value to voltage (assuming a 12-bit ADC with 3.3V reference)
		  //voltage = ((float)adcValue * 2.0) / 65535.0;
		  HAL_Delay(1000);
 8000890:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000894:	f000 fdc0 	bl	8001418 <HAL_Delay>
		  printf("%" PRIu32 "\n", adcValue);
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <main+0x114>)
 800089c:	f007 fb2e 	bl	8007efc <iprintf>
	  	  HAL_ADC_Start(&hadc1);
 80008a0:	bf00      	nop
 80008a2:	e7ea      	b.n	800087a <main+0xde>
 80008a4:	58024400 	.word	0x58024400
 80008a8:	240000a4 	.word	0x240000a4
 80008ac:	240000b8 	.word	0x240000b8
 80008b0:	08008bf0 	.word	0x08008bf0

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b09c      	sub	sp, #112	@ 0x70
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008be:	224c      	movs	r2, #76	@ 0x4c
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f007 fb6f 	bl	8007fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2220      	movs	r2, #32
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f007 fb69 	bl	8007fa6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008d4:	2004      	movs	r0, #4
 80008d6:	f002 fca1 	bl	800321c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <SystemClock_Config+0xd8>)
 80008e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e2:	4a2a      	ldr	r2, [pc, #168]	@ (800098c <SystemClock_Config+0xd8>)
 80008e4:	f023 0301 	bic.w	r3, r3, #1
 80008e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ea:	4b28      	ldr	r3, [pc, #160]	@ (800098c <SystemClock_Config+0xd8>)
 80008ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <SystemClock_Config+0xdc>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008fc:	4a24      	ldr	r2, [pc, #144]	@ (8000990 <SystemClock_Config+0xdc>)
 80008fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <SystemClock_Config+0xdc>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000910:	bf00      	nop
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <SystemClock_Config+0xdc>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800091a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800091e:	d1f8      	bne.n	8000912 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000920:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <SystemClock_Config+0xe0>)
 8000922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000924:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <SystemClock_Config+0xe0>)
 8000926:	f023 0303 	bic.w	r3, r3, #3
 800092a:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000930:	2301      	movs	r3, #1
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2340      	movs	r3, #64	@ 0x40
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000940:	4618      	mov	r0, r3
 8000942:	f002 fcc5 	bl	80032d0 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800094c:	f000 f964 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	233f      	movs	r3, #63	@ 0x3f
 8000952:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2101      	movs	r1, #1
 8000974:	4618      	mov	r0, r3
 8000976:	f003 f905 	bl	8003b84 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000980:	f000 f94a 	bl	8000c18 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3770      	adds	r7, #112	@ 0x70
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	58000400 	.word	0x58000400
 8000990:	58024800 	.word	0x58024800
 8000994:	58024400 	.word	0x58024400

08000998 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009bc:	4b35      	ldr	r3, [pc, #212]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009be:	4a36      	ldr	r2, [pc, #216]	@ (8000a98 <MX_ADC1_Init+0x100>)
 80009c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c2:	4b34      	ldr	r3, [pc, #208]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c8:	4b32      	ldr	r3, [pc, #200]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009da:	4b2e      	ldr	r3, [pc, #184]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009dc:	2201      	movs	r2, #1
 80009de:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ec:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009f2:	4b28      	ldr	r3, [pc, #160]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f8:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009fe:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a04:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a0c:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a12:	4820      	ldr	r0, [pc, #128]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 8000a14:	f000 ff12 	bl	800183c <HAL_ADC_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a1e:	f000 f8fb 	bl	8000c18 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 8000a24:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a30:	4818      	ldr	r0, [pc, #96]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 8000a32:	f000 ff03 	bl	800183c <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000a3c:	f000 f8ec 	bl	8000c18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4812      	ldr	r0, [pc, #72]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 8000a4c:	f001 ff7c 	bl	8002948 <HAL_ADCEx_MultiModeConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000a56:	f000 f8df 	bl	8000c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_ADC1_Init+0x104>)
 8000a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5e:	2306      	movs	r3, #6
 8000a60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000a62:	2303      	movs	r3, #3
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a66:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a6a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_ADC1_Init+0xfc>)
 8000a7e:	f001 fa4b 	bl	8001f18 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000a88:	f000 f8c6 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	240000b8 	.word	0x240000b8
 8000a98:	40022000 	.word	0x40022000
 8000a9c:	4b840000 	.word	0x4b840000

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b49      	ldr	r3, [pc, #292]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	4a47      	ldr	r2, [pc, #284]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac6:	4b45      	ldr	r3, [pc, #276]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b41      	ldr	r3, [pc, #260]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ada:	4a40      	ldr	r2, [pc, #256]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae4:	4b3d      	ldr	r3, [pc, #244]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	4a38      	ldr	r2, [pc, #224]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b02:	4b36      	ldr	r3, [pc, #216]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b10:	4b32      	ldr	r3, [pc, #200]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	4a31      	ldr	r2, [pc, #196]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b20:	4b2e      	ldr	r3, [pc, #184]	@ (8000bdc <MX_GPIO_Init+0x13c>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b2e:	2332      	movs	r3, #50	@ 0x32
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3e:	230b      	movs	r3, #11
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4825      	ldr	r0, [pc, #148]	@ (8000be0 <MX_GPIO_Init+0x140>)
 8000b4a:	f002 f96f 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b4e:	2386      	movs	r3, #134	@ 0x86
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b5e:	230b      	movs	r3, #11
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	481e      	ldr	r0, [pc, #120]	@ (8000be4 <MX_GPIO_Init+0x144>)
 8000b6a:	f002 f95f 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b80:	230b      	movs	r3, #11
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4817      	ldr	r0, [pc, #92]	@ (8000be8 <MX_GPIO_Init+0x148>)
 8000b8c:	f002 f94e 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b90:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <MX_GPIO_Init+0x144>)
 8000bae:	f002 f93d 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bb2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4807      	ldr	r0, [pc, #28]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000bd0:	f002 f92c 	bl	8002e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	@ 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	58024400 	.word	0x58024400
 8000be0:	58020800 	.word	0x58020800
 8000be4:	58020000 	.word	0x58020000
 8000be8:	58020400 	.word	0x58020400
 8000bec:	58021800 	.word	0x58021800

08000bf0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <BSP_PB_Callback+0x24>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	240000b4 	.word	0x240000b4

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_MspInit+0x30>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c30:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <HAL_MspInit+0x30>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_MspInit+0x30>)
 8000c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	58024400 	.word	0x58024400

08000c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	22c0      	movs	r2, #192	@ 0xc0
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f007 f994 	bl	8007fa6 <memset>
  if(hadc->Instance==ADC1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a2b      	ldr	r2, [pc, #172]	@ (8000d30 <HAL_ADC_MspInit+0xd8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d14f      	bne.n	8000d28 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c88:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000c94:	2304      	movs	r3, #4
 8000c96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000c98:	230a      	movs	r3, #10
 8000c9a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ca8:	23c0      	movs	r3, #192	@ 0xc0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000cac:	2320      	movs	r3, #32
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 faec 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000cca:	f7ff ffa5 	bl	8000c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_ADC_MspInit+0xdc>)
 8000cd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cd4:	4a17      	ldr	r2, [pc, #92]	@ (8000d34 <HAL_ADC_MspInit+0xdc>)
 8000cd6:	f043 0320 	orr.w	r3, r3, #32
 8000cda:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_ADC_MspInit+0xdc>)
 8000ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ce4:	f003 0320 	and.w	r3, r3, #32
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <HAL_ADC_MspInit+0xdc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <HAL_ADC_MspInit+0xdc>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <HAL_ADC_MspInit+0xdc>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d10:	2303      	movs	r3, #3
 8000d12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <HAL_ADC_MspInit+0xe0>)
 8000d24:	f002 f882 	bl	8002e2c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d28:	bf00      	nop
 8000d2a:	37e8      	adds	r7, #232	@ 0xe8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40022000 	.word	0x40022000
 8000d34:	58024400 	.word	0x58024400
 8000d38:	58020000 	.word	0x58020000

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <NMI_Handler+0x4>

08000d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <MemManage_Handler+0x4>

08000d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d92:	f000 fb21 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 f9b8 	bl	8001114 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e00a      	b.n	8000dd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dba:	f3af 8000 	nop.w
 8000dbe:	4601      	mov	r1, r0
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf0      	blt.n	8000dba <_read+0x12>
  }

  return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e009      	b.n	8000e08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60ba      	str	r2, [r7, #8]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f9fd 	bl	80011fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf1      	blt.n	8000df4 <_write+0x12>
  }
  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_close>:

int _close(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e42:	605a      	str	r2, [r3, #4]
  return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_isatty>:

int _isatty(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f007 f8c6 	bl	8008044 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	24080000 	.word	0x24080000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	2400011c 	.word	0x2400011c
 8000eec:	24000310 	.word	0x24000310

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef4:	f7ff fbbc 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	@ (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	@ (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f007 f897 	bl	8008050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fc3b 	bl	800079c <main>
  bx  lr
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f30:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000f34:	08008c70 	.word	0x08008c70
  ldr r2, =_sbss
 8000f38:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000f3c:	24000310 	.word	0x24000310

08000f40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC3_IRQHandler>
	...

08000f44 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	@ 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d009      	beq.n	8000f6c <BSP_LED_Init+0x28>
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d006      	beq.n	8000f6c <BSP_LED_Init+0x28>
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d003      	beq.n	8000f6c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f64:	f06f 0301 	mvn.w	r3, #1
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f6a:	e055      	b.n	8001018 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10f      	bne.n	8000f92 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000f72:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	4a2a      	ldr	r2, [pc, #168]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f82:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	e021      	b.n	8000fd6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d10f      	bne.n	8000fb8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000f98:	4b22      	ldr	r3, [pc, #136]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	4a21      	ldr	r2, [pc, #132]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	e00e      	b.n	8000fd6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4a13      	ldr	r2, [pc, #76]	@ (8001028 <BSP_LED_Init+0xe4>)
 8000fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fde:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <BSP_LED_Init+0xe8>)
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	f107 0218 	add.w	r2, r7, #24
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 ff16 	bl	8002e2c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <BSP_LED_Init+0xe8>)
 8001004:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <BSP_LED_Init+0xe4>)
 800100c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	f002 f8ba 	bl	800318c <HAL_GPIO_WritePin>
  }

  return ret;
 8001018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800101a:	4618      	mov	r0, r3
 800101c:	3730      	adds	r7, #48	@ 0x30
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	58024400 	.word	0x58024400
 8001028:	08008c08 	.word	0x08008c08
 800102c:	2400000c 	.word	0x2400000c

08001030 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001040:	4b2e      	ldr	r3, [pc, #184]	@ (80010fc <BSP_PB_Init+0xcc>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	4a2d      	ldr	r2, [pc, #180]	@ (80010fc <BSP_PB_Init+0xcc>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <BSP_PB_Init+0xcc>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800105e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001062:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001064:	2302      	movs	r3, #2
 8001066:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10c      	bne.n	800108c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <BSP_PB_Init+0xd0>)
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	f107 020c 	add.w	r2, r7, #12
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fed1 	bl	8002e2c <HAL_GPIO_Init>
 800108a:	e031      	b.n	80010f0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800108c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001090:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4a1a      	ldr	r2, [pc, #104]	@ (8001100 <BSP_PB_Init+0xd0>)
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	f107 020c 	add.w	r2, r7, #12
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fec3 	bl	8002e2c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <BSP_PB_Init+0xd4>)
 80010ac:	441a      	add	r2, r3
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4915      	ldr	r1, [pc, #84]	@ (8001108 <BSP_PB_Init+0xd8>)
 80010b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f001 fe66 	bl	8002d8a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4a10      	ldr	r2, [pc, #64]	@ (8001104 <BSP_PB_Init+0xd4>)
 80010c4:	1898      	adds	r0, r3, r2
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4a10      	ldr	r2, [pc, #64]	@ (800110c <BSP_PB_Init+0xdc>)
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	461a      	mov	r2, r3
 80010d0:	2100      	movs	r1, #0
 80010d2:	f001 fe3b 	bl	8002d4c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80010d6:	2028      	movs	r0, #40	@ 0x28
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <BSP_PB_Init+0xe0>)
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	f001 fde9 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80010e8:	2328      	movs	r3, #40	@ 0x28
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fdff 	bl	8002cee <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	58024400 	.word	0x58024400
 8001100:	24000018 	.word	0x24000018
 8001104:	24000120 	.word	0x24000120
 8001108:	08008c10 	.word	0x08008c10
 800110c:	2400001c 	.word	0x2400001c
 8001110:	24000020 	.word	0x24000020

08001114 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <BSP_PB_IRQHandler+0x20>)
 8001124:	4413      	add	r3, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fe44 	bl	8002db4 <HAL_EXTI_IRQHandler>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	24000120 	.word	0x24000120

08001138 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800114e:	f06f 0301 	mvn.w	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e018      	b.n	8001188 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2294      	movs	r2, #148	@ 0x94
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <BSP_COM_Init+0x5c>)
 8001160:	4413      	add	r3, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f86e 	bl	8001244 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2294      	movs	r2, #148	@ 0x94
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <BSP_COM_Init+0x5c>)
 8001172:	4413      	add	r3, r2
 8001174:	6839      	ldr	r1, [r7, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f80e 	bl	8001198 <MX_USART3_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001182:	f06f 0303 	mvn.w	r3, #3
 8001186:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	24000128 	.word	0x24000128

08001198 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <MX_USART3_Init+0x60>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	220c      	movs	r2, #12
 80011b6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	895b      	ldrh	r3, [r3, #10]
 80011bc:	461a      	mov	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	891b      	ldrh	r3, [r3, #8]
 80011ce:	461a      	mov	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	899b      	ldrh	r3, [r3, #12]
 80011d8:	461a      	mov	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011e4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f005 fd56 	bl	8006c98 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	24000008 	.word	0x24000008

080011fc <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <__io_putchar+0x30>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	2394      	movs	r3, #148	@ 0x94
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <__io_putchar+0x34>)
 8001212:	1898      	adds	r0, r3, r2
 8001214:	1d39      	adds	r1, r7, #4
 8001216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121a:	2201      	movs	r2, #1
 800121c:	f005 fd96 	bl	8006d4c <HAL_UART_Transmit>
  return ch;
 8001220:	687b      	ldr	r3, [r7, #4]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	240001bc 	.word	0x240001bc
 8001230:	24000128 	.word	0x24000128

08001234 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fcd9 	bl	8000bf0 <BSP_PB_Callback>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800124c:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <COM1_MspInit+0xa8>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001252:	4a26      	ldr	r2, [pc, #152]	@ (80012ec <COM1_MspInit+0xa8>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800125c:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <COM1_MspInit+0xa8>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800126a:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <COM1_MspInit+0xa8>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001270:	4a1e      	ldr	r2, [pc, #120]	@ (80012ec <COM1_MspInit+0xa8>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800127a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <COM1_MspInit+0xa8>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <COM1_MspInit+0xa8>)
 800128a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800128e:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <COM1_MspInit+0xa8>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001294:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <COM1_MspInit+0xa8>)
 800129a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800129e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80012a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012aa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80012b8:	2307      	movs	r3, #7
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <COM1_MspInit+0xac>)
 80012c4:	f001 fdb2 	bl	8002e2c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80012c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012cc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80012d2:	2307      	movs	r3, #7
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <COM1_MspInit+0xac>)
 80012de:	f001 fda5 	bl	8002e2c <HAL_GPIO_Init>
}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58020c00 	.word	0x58020c00

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f001 fcd2 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001300:	f002 fdf6 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8001304:	4602      	mov	r2, r0
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_Init+0x68>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	4913      	ldr	r1, [pc, #76]	@ (8001360 <HAL_Init+0x6c>)
 8001312:	5ccb      	ldrb	r3, [r1, r3]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
 800131c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_Init+0x68>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <HAL_Init+0x6c>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <HAL_Init+0x70>)
 8001336:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001338:	4a0b      	ldr	r2, [pc, #44]	@ (8001368 <HAL_Init+0x74>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f814 	bl	800136c <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e002      	b.n	8001354 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800134e:	f7ff fc69 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	58024400 	.word	0x58024400
 8001360:	08008bf8 	.word	0x08008bf8
 8001364:	24000004 	.word	0x24000004
 8001368:	24000000 	.word	0x24000000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_InitTick+0x60>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e021      	b.n	80013c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_InitTick+0x64>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fcb7 	bl	8002d0a <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013b4:	f001 fc81 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	@ (80013d4 <HAL_InitTick+0x68>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	24000028 	.word	0x24000028
 80013d0:	24000000 	.word	0x24000000
 80013d4:	24000024 	.word	0x24000024

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	24000028 	.word	0x24000028
 80013fc:	240001c0 	.word	0x240001c0

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	240001c0 	.word	0x240001c0

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24000028 	.word	0x24000028

08001460 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_GetREVID+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0c1b      	lsrs	r3, r3, #16
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	5c001000 	.word	0x5c001000

08001478 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3360      	adds	r3, #96	@ 0x60
 80014f2:	461a      	mov	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	430b      	orrs	r3, r1
 800150e:	431a      	orrs	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001514:	bf00      	nop
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	431a      	orrs	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	611a      	str	r2, [r3, #16]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001552:	b480      	push	{r7}
 8001554:	b087      	sub	sp, #28
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3360      	adds	r3, #96	@ 0x60
 8001562:	461a      	mov	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	431a      	orrs	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	601a      	str	r2, [r3, #0]
  }
}
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3330      	adds	r3, #48	@ 0x30
 80015be:	461a      	mov	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	4413      	add	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	211f      	movs	r1, #31
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	401a      	ands	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	0e9b      	lsrs	r3, r3, #26
 80015e6:	f003 011f 	and.w	r1, r3, #31
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001606:	b480      	push	{r7}
 8001608:	b087      	sub	sp, #28
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3314      	adds	r3, #20
 8001616:	461a      	mov	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	0e5b      	lsrs	r3, r3, #25
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	0d1b      	lsrs	r3, r3, #20
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2107      	movs	r1, #7
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	0d1b      	lsrs	r3, r3, #20
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	431a      	orrs	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001650:	bf00      	nop
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0318 	and.w	r3, r3, #24
 800167e:	4908      	ldr	r1, [pc, #32]	@ (80016a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001680:	40d9      	lsrs	r1, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	400b      	ands	r3, r1
 8001686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800168a:	431a      	orrs	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	000fffff 	.word	0x000fffff

080016a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 031f 	and.w	r3, r3, #31
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <LL_ADC_DisableDeepPowerDown+0x20>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6093      	str	r3, [r2, #8]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	5fffffc0 	.word	0x5fffffc0

08001700 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001714:	d101      	bne.n	800171a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <LL_ADC_EnableInternalRegulator+0x24>)
 8001736:	4013      	ands	r3, r2
 8001738:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	6fffffc0 	.word	0x6fffffc0

08001750 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001760:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001764:	d101      	bne.n	800176a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <LL_ADC_Enable+0x24>)
 8001786:	4013      	ands	r3, r2
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	7fffffc0 	.word	0x7fffffc0

080017a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <LL_ADC_IsEnabled+0x18>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <LL_ADC_IsEnabled+0x1a>
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <LL_ADC_REG_StartConversion+0x24>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	f043 0204 	orr.w	r2, r3, #4
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	7fffffc0 	.word	0x7fffffc0

080017f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b04      	cmp	r3, #4
 8001802:	d101      	bne.n	8001808 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b08      	cmp	r3, #8
 8001828:	d101      	bne.n	800182e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e18f      	b.n	8001b76 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff f9f7 	bl	8000c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff3f 	bl	8001700 <LL_ADC_IsDeepPowerDownEnabled>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff25 	bl	80016dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff5a 	bl	8001750 <LL_ADC_IsInternalRegulatorEnabled>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d114      	bne.n	80018cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff3e 	bl	8001728 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018ac:	4b87      	ldr	r3, [pc, #540]	@ (8001acc <HAL_ADC_Init+0x290>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	099b      	lsrs	r3, r3, #6
 80018b2:	4a87      	ldr	r2, [pc, #540]	@ (8001ad0 <HAL_ADC_Init+0x294>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	3301      	adds	r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018be:	e002      	b.n	80018c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f9      	bne.n	80018c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff3d 	bl	8001750 <LL_ADC_IsInternalRegulatorEnabled>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10d      	bne.n	80018f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e0:	f043 0210 	orr.w	r2, r3, #16
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	f043 0201 	orr.w	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff77 	bl	80017f0 <LL_ADC_REG_IsConversionOngoing>
 8001902:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 8129 	bne.w	8001b64 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f040 8125 	bne.w	8001b64 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001922:	f043 0202 	orr.w	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff36 	bl	80017a0 <LL_ADC_IsEnabled>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d136      	bne.n	80019a8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a65      	ldr	r2, [pc, #404]	@ (8001ad4 <HAL_ADC_Init+0x298>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d004      	beq.n	800194e <HAL_ADC_Init+0x112>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a63      	ldr	r2, [pc, #396]	@ (8001ad8 <HAL_ADC_Init+0x29c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10e      	bne.n	800196c <HAL_ADC_Init+0x130>
 800194e:	4861      	ldr	r0, [pc, #388]	@ (8001ad4 <HAL_ADC_Init+0x298>)
 8001950:	f7ff ff26 	bl	80017a0 <LL_ADC_IsEnabled>
 8001954:	4604      	mov	r4, r0
 8001956:	4860      	ldr	r0, [pc, #384]	@ (8001ad8 <HAL_ADC_Init+0x29c>)
 8001958:	f7ff ff22 	bl	80017a0 <LL_ADC_IsEnabled>
 800195c:	4603      	mov	r3, r0
 800195e:	4323      	orrs	r3, r4
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	e008      	b.n	800197e <HAL_ADC_Init+0x142>
 800196c:	485b      	ldr	r0, [pc, #364]	@ (8001adc <HAL_ADC_Init+0x2a0>)
 800196e:	f7ff ff17 	bl	80017a0 <LL_ADC_IsEnabled>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d012      	beq.n	80019a8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a53      	ldr	r2, [pc, #332]	@ (8001ad4 <HAL_ADC_Init+0x298>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d004      	beq.n	8001996 <HAL_ADC_Init+0x15a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a51      	ldr	r2, [pc, #324]	@ (8001ad8 <HAL_ADC_Init+0x29c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_ADC_Init+0x15e>
 8001996:	4a52      	ldr	r2, [pc, #328]	@ (8001ae0 <HAL_ADC_Init+0x2a4>)
 8001998:	e000      	b.n	800199c <HAL_ADC_Init+0x160>
 800199a:	4a52      	ldr	r2, [pc, #328]	@ (8001ae4 <HAL_ADC_Init+0x2a8>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f7ff fd68 	bl	8001478 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80019a8:	f7ff fd5a 	bl	8001460 <HAL_GetREVID>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d914      	bls.n	80019e0 <HAL_ADC_Init+0x1a4>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b10      	cmp	r3, #16
 80019bc:	d110      	bne.n	80019e0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7d5b      	ldrb	r3, [r3, #21]
 80019c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019c8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80019ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7f1b      	ldrb	r3, [r3, #28]
 80019d4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80019d6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019d8:	f043 030c 	orr.w	r3, r3, #12
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	e00d      	b.n	80019fc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7d5b      	ldrb	r3, [r3, #21]
 80019e4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019ea:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80019f0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7f1b      	ldrb	r3, [r3, #28]
 80019f6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7f1b      	ldrb	r3, [r3, #28]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	045b      	lsls	r3, r3, #17
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a26:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae8 <HAL_ADC_Init+0x2ac>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	69b9      	ldr	r1, [r7, #24]
 8001a3e:	430b      	orrs	r3, r1
 8001a40:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fed2 	bl	80017f0 <LL_ADC_REG_IsConversionOngoing>
 8001a4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fedf 	bl	8001816 <LL_ADC_INJ_IsConversionOngoing>
 8001a58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d15f      	bne.n	8001b20 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d15c      	bne.n	8001b20 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7d1b      	ldrb	r3, [r3, #20]
 8001a6a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <HAL_ADC_Init+0x2b0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d130      	bne.n	8001af4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <HAL_ADC_Init+0x2b4>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001aa6:	3a01      	subs	r2, #1
 8001aa8:	0411      	lsls	r1, r2, #16
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001aba:	430a      	orrs	r2, r1
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	e01c      	b.n	8001b04 <HAL_ADC_Init+0x2c8>
 8001aca:	bf00      	nop
 8001acc:	24000000 	.word	0x24000000
 8001ad0:	053e2d63 	.word	0x053e2d63
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40022100 	.word	0x40022100
 8001adc:	58026000 	.word	0x58026000
 8001ae0:	40022300 	.word	0x40022300
 8001ae4:	58026300 	.word	0x58026300
 8001ae8:	fff0c003 	.word	0xfff0c003
 8001aec:	ffffbffc 	.word	0xffffbffc
 8001af0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fde2 	bl	80026e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10c      	bne.n	8001b42 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f023 010f 	bic.w	r1, r3, #15
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	1e5a      	subs	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b40:	e007      	b.n	8001b52 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 020f 	bic.w	r2, r2, #15
 8001b50:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b56:	f023 0303 	bic.w	r3, r3, #3
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b62:	e007      	b.n	8001b74 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b68:	f043 0210 	orr.w	r2, r3, #16
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	bf00      	nop

08001b80 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5c      	ldr	r2, [pc, #368]	@ (8001d00 <HAL_ADC_Start+0x180>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_ADC_Start+0x1c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a5b      	ldr	r2, [pc, #364]	@ (8001d04 <HAL_ADC_Start+0x184>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_Start+0x20>
 8001b9c:	4b5a      	ldr	r3, [pc, #360]	@ (8001d08 <HAL_ADC_Start+0x188>)
 8001b9e:	e000      	b.n	8001ba2 <HAL_ADC_Start+0x22>
 8001ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8001d0c <HAL_ADC_Start+0x18c>)
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fd7e 	bl	80016a4 <LL_ADC_GetMultimode>
 8001ba8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fe1e 	bl	80017f0 <LL_ADC_REG_IsConversionOngoing>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 809a 	bne.w	8001cf0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_Start+0x4a>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e095      	b.n	8001cf6 <HAL_ADC_Start+0x176>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fcfc 	bl	80025d0 <ADC_Enable>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 8081 	bne.w	8001ce6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001be8:	4b49      	ldr	r3, [pc, #292]	@ (8001d10 <HAL_ADC_Start+0x190>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a42      	ldr	r2, [pc, #264]	@ (8001d04 <HAL_ADC_Start+0x184>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d002      	beq.n	8001c04 <HAL_ADC_Start+0x84>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	e000      	b.n	8001c06 <HAL_ADC_Start+0x86>
 8001c04:	4b3e      	ldr	r3, [pc, #248]	@ (8001d00 <HAL_ADC_Start+0x180>)
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d002      	beq.n	8001c14 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c2c:	d106      	bne.n	8001c3c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	f023 0206 	bic.w	r2, r3, #6
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c3a:	e002      	b.n	8001c42 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	221c      	movs	r2, #28
 8001c48:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2b      	ldr	r2, [pc, #172]	@ (8001d04 <HAL_ADC_Start+0x184>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d002      	beq.n	8001c62 <HAL_ADC_Start+0xe2>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	e000      	b.n	8001c64 <HAL_ADC_Start+0xe4>
 8001c62:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <HAL_ADC_Start+0x180>)
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d008      	beq.n	8001c7e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d002      	beq.n	8001c7e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b09      	cmp	r3, #9
 8001c7c:	d114      	bne.n	8001ca8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fd91 	bl	80017c8 <LL_ADC_REG_StartConversion>
 8001ca6:	e025      	b.n	8001cf4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <HAL_ADC_Start+0x184>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d002      	beq.n	8001cc4 <HAL_ADC_Start+0x144>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	e000      	b.n	8001cc6 <HAL_ADC_Start+0x146>
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <HAL_ADC_Start+0x180>)
 8001cc6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00f      	beq.n	8001cf4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cdc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ce4:	e006      	b.n	8001cf4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001cee:	e001      	b.n	8001cf4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40022100 	.word	0x40022100
 8001d08:	40022300 	.word	0x40022300
 8001d0c:	58026300 	.word	0x58026300
 8001d10:	fffff0fe 	.word	0xfffff0fe

08001d14 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a72      	ldr	r2, [pc, #456]	@ (8001eec <HAL_ADC_PollForConversion+0x1d8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d004      	beq.n	8001d32 <HAL_ADC_PollForConversion+0x1e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a70      	ldr	r2, [pc, #448]	@ (8001ef0 <HAL_ADC_PollForConversion+0x1dc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_PollForConversion+0x22>
 8001d32:	4b70      	ldr	r3, [pc, #448]	@ (8001ef4 <HAL_ADC_PollForConversion+0x1e0>)
 8001d34:	e000      	b.n	8001d38 <HAL_ADC_PollForConversion+0x24>
 8001d36:	4b70      	ldr	r3, [pc, #448]	@ (8001ef8 <HAL_ADC_PollForConversion+0x1e4>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fcb3 	bl	80016a4 <LL_ADC_GetMultimode>
 8001d3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d102      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	e037      	b.n	8001dbe <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d002      	beq.n	8001d60 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b09      	cmp	r3, #9
 8001d5e:	d111      	bne.n	8001d84 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d72:	f043 0220 	orr.w	r2, r3, #32
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0b1      	b.n	8001ee2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d7e:	2304      	movs	r3, #4
 8001d80:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001d82:	e01c      	b.n	8001dbe <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a58      	ldr	r2, [pc, #352]	@ (8001eec <HAL_ADC_PollForConversion+0x1d8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_ADC_PollForConversion+0x84>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a57      	ldr	r2, [pc, #348]	@ (8001ef0 <HAL_ADC_PollForConversion+0x1dc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_PollForConversion+0x88>
 8001d98:	4b56      	ldr	r3, [pc, #344]	@ (8001ef4 <HAL_ADC_PollForConversion+0x1e0>)
 8001d9a:	e000      	b.n	8001d9e <HAL_ADC_PollForConversion+0x8a>
 8001d9c:	4b56      	ldr	r3, [pc, #344]	@ (8001ef8 <HAL_ADC_PollForConversion+0x1e4>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fc8e 	bl	80016c0 <LL_ADC_GetMultiDMATransfer>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	f043 0220 	orr.w	r2, r3, #32
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e093      	b.n	8001ee2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001dba:	2304      	movs	r3, #4
 8001dbc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dbe:	f7ff fb1f 	bl	8001400 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dc4:	e021      	b.n	8001e0a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dcc:	d01d      	beq.n	8001e0a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001dce:	f7ff fb17 	bl	8001400 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d302      	bcc.n	8001de4 <HAL_ADC_PollForConversion+0xd0>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d112      	bne.n	8001e0a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10b      	bne.n	8001e0a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df6:	f043 0204 	orr.w	r2, r3, #4
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e06b      	b.n	8001ee2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0d6      	beq.n	8001dc6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fbad 	bl	8001588 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01c      	beq.n	8001e6e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7d5b      	ldrb	r3, [r3, #21]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d118      	bne.n	8001e6e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d111      	bne.n	8001e6e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d105      	bne.n	8001e6e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef0 <HAL_ADC_PollForConversion+0x1dc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d002      	beq.n	8001e7e <HAL_ADC_PollForConversion+0x16a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_PollForConversion+0x16c>
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <HAL_ADC_PollForConversion+0x1d8>)
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d008      	beq.n	8001e9a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d002      	beq.n	8001e9a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b09      	cmp	r3, #9
 8001e98:	d104      	bne.n	8001ea4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	e00c      	b.n	8001ebe <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a11      	ldr	r2, [pc, #68]	@ (8001ef0 <HAL_ADC_PollForConversion+0x1dc>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d002      	beq.n	8001eb4 <HAL_ADC_PollForConversion+0x1a0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_PollForConversion+0x1a2>
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <HAL_ADC_PollForConversion+0x1d8>)
 8001eb6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d104      	bne.n	8001ece <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e008      	b.n	8001ee0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d103      	bne.n	8001ee0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	220c      	movs	r2, #12
 8001ede:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	40022100 	.word	0x40022100
 8001ef4:	40022300 	.word	0x40022300
 8001ef8:	58026300 	.word	0x58026300

08001efc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b0a1      	sub	sp, #132	@ 0x84
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a65      	ldr	r2, [pc, #404]	@ (80020c8 <HAL_ADC_ConfigChannel+0x1b0>)
 8001f32:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x2a>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e32e      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x688>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fc4e 	bl	80017f0 <LL_ADC_REG_IsConversionOngoing>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 8313 	bne.w	8002582 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db2c      	blt.n	8001fbe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d108      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x6a>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	e016      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x98>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f92:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e003      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001f9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	2201      	movs	r2, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	69d1      	ldr	r1, [r2, #28]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6859      	ldr	r1, [r3, #4]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f7ff faef 	bl	80015ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fc0b 	bl	80017f0 <LL_ADC_REG_IsConversionOngoing>
 8001fda:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fc18 	bl	8001816 <LL_ADC_INJ_IsConversionOngoing>
 8001fe6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 80b8 	bne.w	8002160 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ff0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 80b4 	bne.w	8002160 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6819      	ldr	r1, [r3, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	461a      	mov	r2, r3
 8002006:	f7ff fafe 	bl	8001606 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800200a:	4b30      	ldr	r3, [pc, #192]	@ (80020cc <HAL_ADC_ConfigChannel+0x1b4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002016:	d10b      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x118>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	e01d      	b.n	800206c <HAL_ADC_ConfigChannel+0x154>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10b      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x13e>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	e00a      	b.n	800206c <HAL_ADC_ConfigChannel+0x154>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b04      	cmp	r3, #4
 8002074:	d02c      	beq.n	80020d0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6919      	ldr	r1, [r3, #16]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002084:	f7ff fa2c 	bl	80014e0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6919      	ldr	r1, [r3, #16]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	7e5b      	ldrb	r3, [r3, #25]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d102      	bne.n	800209e <HAL_ADC_ConfigChannel+0x186>
 8002098:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800209c:	e000      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x188>
 800209e:	2300      	movs	r3, #0
 80020a0:	461a      	mov	r2, r3
 80020a2:	f7ff fa56 	bl	8001552 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6919      	ldr	r1, [r3, #16]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	7e1b      	ldrb	r3, [r3, #24]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d102      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x1a4>
 80020b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020ba:	e000      	b.n	80020be <HAL_ADC_ConfigChannel+0x1a6>
 80020bc:	2300      	movs	r3, #0
 80020be:	461a      	mov	r2, r3
 80020c0:	f7ff fa2e 	bl	8001520 <LL_ADC_SetDataRightShift>
 80020c4:	e04c      	b.n	8002160 <HAL_ADC_ConfigChannel+0x248>
 80020c6:	bf00      	nop
 80020c8:	47ff0000 	.word	0x47ff0000
 80020cc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	069b      	lsls	r3, r3, #26
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d107      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020f2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	069b      	lsls	r3, r3, #26
 8002104:	429a      	cmp	r2, r3
 8002106:	d107      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002116:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800211e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	069b      	lsls	r3, r3, #26
 8002128:	429a      	cmp	r2, r3
 800212a:	d107      	bne.n	800213c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800213a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002142:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	069b      	lsls	r3, r3, #26
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800215e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fb1b 	bl	80017a0 <LL_ADC_IsEnabled>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 8211 	bne.w	8002594 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	461a      	mov	r2, r3
 8002180:	f7ff fa6c 	bl	800165c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4aa1      	ldr	r2, [pc, #644]	@ (8002410 <HAL_ADC_ConfigChannel+0x4f8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	f040 812e 	bne.w	80023ec <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x2a0>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	3301      	adds	r3, #1
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	bf94      	ite	ls
 80021b0:	2301      	movls	r3, #1
 80021b2:	2300      	movhi	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e019      	b.n	80021ec <HAL_ADC_ConfigChannel+0x2d4>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80021c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80021ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80021d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2b09      	cmp	r3, #9
 80021e4:	bf94      	ite	ls
 80021e6:	2301      	movls	r3, #1
 80021e8:	2300      	movhi	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d079      	beq.n	80022e4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_ADC_ConfigChannel+0x2f4>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0e9b      	lsrs	r3, r3, #26
 8002202:	3301      	adds	r3, #1
 8002204:	069b      	lsls	r3, r3, #26
 8002206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800220a:	e015      	b.n	8002238 <HAL_ADC_ConfigChannel+0x320>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800221a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800221c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800221e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	069b      	lsls	r3, r3, #26
 8002234:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x340>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	3301      	adds	r3, #1
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	e017      	b.n	8002288 <HAL_ADC_ConfigChannel+0x370>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002268:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800226a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	ea42 0103 	orr.w	r1, r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x396>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	051b      	lsls	r3, r3, #20
 80022ac:	e018      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x3c8>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80022bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80022c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e003      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80022ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e0:	430b      	orrs	r3, r1
 80022e2:	e07e      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x3e8>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	3301      	adds	r3, #1
 80022f8:	069b      	lsls	r3, r3, #26
 80022fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022fe:	e015      	b.n	800232c <HAL_ADC_ConfigChannel+0x414>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e003      	b.n	8002324 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800231c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3301      	adds	r3, #1
 8002326:	069b      	lsls	r3, r3, #26
 8002328:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_ADC_ConfigChannel+0x434>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	3301      	adds	r3, #1
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	e017      	b.n	800237c <HAL_ADC_ConfigChannel+0x464>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	61bb      	str	r3, [r7, #24]
  return result;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	ea42 0103 	orr.w	r1, r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x490>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	3301      	adds	r3, #1
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	3b1e      	subs	r3, #30
 80023a0:	051b      	lsls	r3, r3, #20
 80023a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	e01b      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x4c8>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	60fb      	str	r3, [r7, #12]
  return result;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e003      	b.n	80023cc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 021f 	and.w	r2, r3, #31
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	3b1e      	subs	r3, #30
 80023da:	051b      	lsls	r3, r3, #20
 80023dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e0:	430b      	orrs	r3, r1
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	6892      	ldr	r2, [r2, #8]
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7ff f90d 	bl	8001606 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f280 80cf 	bge.w	8002594 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a06      	ldr	r2, [pc, #24]	@ (8002414 <HAL_ADC_ConfigChannel+0x4fc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_ADC_ConfigChannel+0x4f2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <HAL_ADC_ConfigChannel+0x500>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10a      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x508>
 800240a:	4b04      	ldr	r3, [pc, #16]	@ (800241c <HAL_ADC_ConfigChannel+0x504>)
 800240c:	e009      	b.n	8002422 <HAL_ADC_ConfigChannel+0x50a>
 800240e:	bf00      	nop
 8002410:	47ff0000 	.word	0x47ff0000
 8002414:	40022000 	.word	0x40022000
 8002418:	40022100 	.word	0x40022100
 800241c:	40022300 	.word	0x40022300
 8002420:	4b61      	ldr	r3, [pc, #388]	@ (80025a8 <HAL_ADC_ConfigChannel+0x690>)
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f84e 	bl	80014c4 <LL_ADC_GetCommonPathInternalCh>
 8002428:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5f      	ldr	r2, [pc, #380]	@ (80025ac <HAL_ADC_ConfigChannel+0x694>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d004      	beq.n	800243e <HAL_ADC_ConfigChannel+0x526>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5d      	ldr	r2, [pc, #372]	@ (80025b0 <HAL_ADC_ConfigChannel+0x698>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d10e      	bne.n	800245c <HAL_ADC_ConfigChannel+0x544>
 800243e:	485b      	ldr	r0, [pc, #364]	@ (80025ac <HAL_ADC_ConfigChannel+0x694>)
 8002440:	f7ff f9ae 	bl	80017a0 <LL_ADC_IsEnabled>
 8002444:	4604      	mov	r4, r0
 8002446:	485a      	ldr	r0, [pc, #360]	@ (80025b0 <HAL_ADC_ConfigChannel+0x698>)
 8002448:	f7ff f9aa 	bl	80017a0 <LL_ADC_IsEnabled>
 800244c:	4603      	mov	r3, r0
 800244e:	4323      	orrs	r3, r4
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e008      	b.n	800246e <HAL_ADC_ConfigChannel+0x556>
 800245c:	4855      	ldr	r0, [pc, #340]	@ (80025b4 <HAL_ADC_ConfigChannel+0x69c>)
 800245e:	f7ff f99f 	bl	80017a0 <LL_ADC_IsEnabled>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d07d      	beq.n	800256e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a50      	ldr	r2, [pc, #320]	@ (80025b8 <HAL_ADC_ConfigChannel+0x6a0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d130      	bne.n	80024de <HAL_ADC_ConfigChannel+0x5c6>
 800247c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800247e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d12b      	bne.n	80024de <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a4a      	ldr	r2, [pc, #296]	@ (80025b4 <HAL_ADC_ConfigChannel+0x69c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	f040 8081 	bne.w	8002594 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a45      	ldr	r2, [pc, #276]	@ (80025ac <HAL_ADC_ConfigChannel+0x694>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x58e>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a43      	ldr	r2, [pc, #268]	@ (80025b0 <HAL_ADC_ConfigChannel+0x698>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x592>
 80024a6:	4a45      	ldr	r2, [pc, #276]	@ (80025bc <HAL_ADC_ConfigChannel+0x6a4>)
 80024a8:	e000      	b.n	80024ac <HAL_ADC_ConfigChannel+0x594>
 80024aa:	4a3f      	ldr	r2, [pc, #252]	@ (80025a8 <HAL_ADC_ConfigChannel+0x690>)
 80024ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f7fe fff2 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024ba:	4b41      	ldr	r3, [pc, #260]	@ (80025c0 <HAL_ADC_ConfigChannel+0x6a8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	099b      	lsrs	r3, r3, #6
 80024c0:	4a40      	ldr	r2, [pc, #256]	@ (80025c4 <HAL_ADC_ConfigChannel+0x6ac>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	3301      	adds	r3, #1
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024ce:	e002      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f9      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024dc:	e05a      	b.n	8002594 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a39      	ldr	r2, [pc, #228]	@ (80025c8 <HAL_ADC_ConfigChannel+0x6b0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d11e      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x60e>
 80024e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d119      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2f      	ldr	r2, [pc, #188]	@ (80025b4 <HAL_ADC_ConfigChannel+0x69c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d14b      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2a      	ldr	r2, [pc, #168]	@ (80025ac <HAL_ADC_ConfigChannel+0x694>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_ADC_ConfigChannel+0x5f8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a29      	ldr	r2, [pc, #164]	@ (80025b0 <HAL_ADC_ConfigChannel+0x698>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x5fc>
 8002510:	4a2a      	ldr	r2, [pc, #168]	@ (80025bc <HAL_ADC_ConfigChannel+0x6a4>)
 8002512:	e000      	b.n	8002516 <HAL_ADC_ConfigChannel+0x5fe>
 8002514:	4a24      	ldr	r2, [pc, #144]	@ (80025a8 <HAL_ADC_ConfigChannel+0x690>)
 8002516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002518:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f7fe ffbd 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002524:	e036      	b.n	8002594 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a28      	ldr	r2, [pc, #160]	@ (80025cc <HAL_ADC_ConfigChannel+0x6b4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d131      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x67c>
 8002530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d12c      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <HAL_ADC_ConfigChannel+0x69c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d127      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a18      	ldr	r2, [pc, #96]	@ (80025ac <HAL_ADC_ConfigChannel+0x694>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x640>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a17      	ldr	r2, [pc, #92]	@ (80025b0 <HAL_ADC_ConfigChannel+0x698>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x644>
 8002558:	4a18      	ldr	r2, [pc, #96]	@ (80025bc <HAL_ADC_ConfigChannel+0x6a4>)
 800255a:	e000      	b.n	800255e <HAL_ADC_ConfigChannel+0x646>
 800255c:	4a12      	ldr	r2, [pc, #72]	@ (80025a8 <HAL_ADC_ConfigChannel+0x690>)
 800255e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002560:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f7fe ff99 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
 800256c:	e012      	b.n	8002594 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002580:	e008      	b.n	8002594 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002586:	f043 0220 	orr.w	r2, r3, #32
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800259c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3784      	adds	r7, #132	@ 0x84
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd90      	pop	{r4, r7, pc}
 80025a8:	58026300 	.word	0x58026300
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40022100 	.word	0x40022100
 80025b4:	58026000 	.word	0x58026000
 80025b8:	cb840000 	.word	0xcb840000
 80025bc:	40022300 	.word	0x40022300
 80025c0:	24000000 	.word	0x24000000
 80025c4:	053e2d63 	.word	0x053e2d63
 80025c8:	c7520000 	.word	0xc7520000
 80025cc:	cfb80000 	.word	0xcfb80000

080025d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f8df 	bl	80017a0 <LL_ADC_IsEnabled>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d16e      	bne.n	80026c6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	4b38      	ldr	r3, [pc, #224]	@ (80026d0 <ADC_Enable+0x100>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00d      	beq.n	8002612 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fa:	f043 0210 	orr.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e05a      	b.n	80026c8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f8ae 	bl	8001778 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800261c:	f7fe fef0 	bl	8001400 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2b      	ldr	r2, [pc, #172]	@ (80026d4 <ADC_Enable+0x104>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <ADC_Enable+0x66>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a29      	ldr	r2, [pc, #164]	@ (80026d8 <ADC_Enable+0x108>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <ADC_Enable+0x6a>
 8002636:	4b29      	ldr	r3, [pc, #164]	@ (80026dc <ADC_Enable+0x10c>)
 8002638:	e000      	b.n	800263c <ADC_Enable+0x6c>
 800263a:	4b29      	ldr	r3, [pc, #164]	@ (80026e0 <ADC_Enable+0x110>)
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff f831 	bl	80016a4 <LL_ADC_GetMultimode>
 8002642:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a23      	ldr	r2, [pc, #140]	@ (80026d8 <ADC_Enable+0x108>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d002      	beq.n	8002654 <ADC_Enable+0x84>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e000      	b.n	8002656 <ADC_Enable+0x86>
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <ADC_Enable+0x104>)
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4293      	cmp	r3, r2
 800265c:	d02c      	beq.n	80026b8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d130      	bne.n	80026c6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002664:	e028      	b.n	80026b8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff f898 	bl	80017a0 <LL_ADC_IsEnabled>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f87c 	bl	8001778 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002680:	f7fe febe 	bl	8001400 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d914      	bls.n	80026b8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d00d      	beq.n	80026b8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a0:	f043 0210 	orr.w	r2, r3, #16
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e007      	b.n	80026c8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d1cf      	bne.n	8002666 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	8000003f 	.word	0x8000003f
 80026d4:	40022000 	.word	0x40022000
 80026d8:	40022100 	.word	0x40022100
 80026dc:	40022300 	.word	0x40022300
 80026e0:	58026300 	.word	0x58026300

080026e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a7a      	ldr	r2, [pc, #488]	@ (80028dc <ADC_ConfigureBoostMode+0x1f8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <ADC_ConfigureBoostMode+0x1c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a79      	ldr	r2, [pc, #484]	@ (80028e0 <ADC_ConfigureBoostMode+0x1fc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d109      	bne.n	8002714 <ADC_ConfigureBoostMode+0x30>
 8002700:	4b78      	ldr	r3, [pc, #480]	@ (80028e4 <ADC_ConfigureBoostMode+0x200>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e008      	b.n	8002726 <ADC_ConfigureBoostMode+0x42>
 8002714:	4b74      	ldr	r3, [pc, #464]	@ (80028e8 <ADC_ConfigureBoostMode+0x204>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01c      	beq.n	8002764 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800272a:	f001 fd5b 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 800272e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002738:	d010      	beq.n	800275c <ADC_ConfigureBoostMode+0x78>
 800273a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800273e:	d873      	bhi.n	8002828 <ADC_ConfigureBoostMode+0x144>
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002744:	d002      	beq.n	800274c <ADC_ConfigureBoostMode+0x68>
 8002746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800274a:	d16d      	bne.n	8002828 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	60fb      	str	r3, [r7, #12]
        break;
 800275a:	e068      	b.n	800282e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	60fb      	str	r3, [r7, #12]
        break;
 8002762:	e064      	b.n	800282e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002764:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	f002 ffa0 	bl	80056b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002770:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800277a:	d051      	beq.n	8002820 <ADC_ConfigureBoostMode+0x13c>
 800277c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002780:	d854      	bhi.n	800282c <ADC_ConfigureBoostMode+0x148>
 8002782:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002786:	d047      	beq.n	8002818 <ADC_ConfigureBoostMode+0x134>
 8002788:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800278c:	d84e      	bhi.n	800282c <ADC_ConfigureBoostMode+0x148>
 800278e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002792:	d03d      	beq.n	8002810 <ADC_ConfigureBoostMode+0x12c>
 8002794:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002798:	d848      	bhi.n	800282c <ADC_ConfigureBoostMode+0x148>
 800279a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800279e:	d033      	beq.n	8002808 <ADC_ConfigureBoostMode+0x124>
 80027a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027a4:	d842      	bhi.n	800282c <ADC_ConfigureBoostMode+0x148>
 80027a6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80027aa:	d029      	beq.n	8002800 <ADC_ConfigureBoostMode+0x11c>
 80027ac:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80027b0:	d83c      	bhi.n	800282c <ADC_ConfigureBoostMode+0x148>
 80027b2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80027b6:	d01a      	beq.n	80027ee <ADC_ConfigureBoostMode+0x10a>
 80027b8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80027bc:	d836      	bhi.n	800282c <ADC_ConfigureBoostMode+0x148>
 80027be:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80027c2:	d014      	beq.n	80027ee <ADC_ConfigureBoostMode+0x10a>
 80027c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80027c8:	d830      	bhi.n	800282c <ADC_ConfigureBoostMode+0x148>
 80027ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027ce:	d00e      	beq.n	80027ee <ADC_ConfigureBoostMode+0x10a>
 80027d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027d4:	d82a      	bhi.n	800282c <ADC_ConfigureBoostMode+0x148>
 80027d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027da:	d008      	beq.n	80027ee <ADC_ConfigureBoostMode+0x10a>
 80027dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027e0:	d824      	bhi.n	800282c <ADC_ConfigureBoostMode+0x148>
 80027e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027e6:	d002      	beq.n	80027ee <ADC_ConfigureBoostMode+0x10a>
 80027e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027ec:	d11e      	bne.n	800282c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0c9b      	lsrs	r3, r3, #18
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	60fb      	str	r3, [r7, #12]
        break;
 80027fe:	e016      	b.n	800282e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
        break;
 8002806:	e012      	b.n	800282e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	60fb      	str	r3, [r7, #12]
        break;
 800280e:	e00e      	b.n	800282e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	60fb      	str	r3, [r7, #12]
        break;
 8002816:	e00a      	b.n	800282e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	09db      	lsrs	r3, r3, #7
 800281c:	60fb      	str	r3, [r7, #12]
        break;
 800281e:	e006      	b.n	800282e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	60fb      	str	r3, [r7, #12]
        break;
 8002826:	e002      	b.n	800282e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800282c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800282e:	f7fe fe17 	bl	8001460 <HAL_GetREVID>
 8002832:	4603      	mov	r3, r0
 8002834:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002838:	4293      	cmp	r3, r2
 800283a:	d815      	bhi.n	8002868 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a2b      	ldr	r2, [pc, #172]	@ (80028ec <ADC_ConfigureBoostMode+0x208>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d908      	bls.n	8002856 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002852:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002854:	e03e      	b.n	80028d4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002864:	609a      	str	r2, [r3, #8]
}
 8002866:	e035      	b.n	80028d4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a1f      	ldr	r2, [pc, #124]	@ (80028f0 <ADC_ConfigureBoostMode+0x20c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d808      	bhi.n	8002888 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002884:	609a      	str	r2, [r3, #8]
}
 8002886:	e025      	b.n	80028d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a1a      	ldr	r2, [pc, #104]	@ (80028f4 <ADC_ConfigureBoostMode+0x210>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d80a      	bhi.n	80028a6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028a2:	609a      	str	r2, [r3, #8]
}
 80028a4:	e016      	b.n	80028d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a13      	ldr	r2, [pc, #76]	@ (80028f8 <ADC_ConfigureBoostMode+0x214>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d80a      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c0:	609a      	str	r2, [r3, #8]
}
 80028c2:	e007      	b.n	80028d4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40022000 	.word	0x40022000
 80028e0:	40022100 	.word	0x40022100
 80028e4:	40022300 	.word	0x40022300
 80028e8:	58026300 	.word	0x58026300
 80028ec:	01312d00 	.word	0x01312d00
 80028f0:	005f5e10 	.word	0x005f5e10
 80028f4:	00bebc20 	.word	0x00bebc20
 80028f8:	017d7840 	.word	0x017d7840

080028fc <LL_ADC_IsEnabled>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <LL_ADC_IsEnabled+0x18>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <LL_ADC_IsEnabled+0x1a>
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_ADC_REG_IsConversionOngoing>:
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d101      	bne.n	800293a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b09f      	sub	sp, #124	@ 0x7c
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002962:	2302      	movs	r3, #2
 8002964:	e0be      	b.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5c      	ldr	r2, [pc, #368]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d102      	bne.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002980:	4b5b      	ldr	r3, [pc, #364]	@ (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	e001      	b.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e09d      	b.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ffb9 	bl	8002922 <LL_ADC_REG_IsConversionOngoing>
 80029b0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ffb3 	bl	8002922 <LL_ADC_REG_IsConversionOngoing>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d17f      	bne.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d17c      	bne.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a47      	ldr	r2, [pc, #284]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a46      	ldr	r2, [pc, #280]	@ (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80029dc:	4b45      	ldr	r3, [pc, #276]	@ (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80029de:	e000      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80029e0:	4b45      	ldr	r3, [pc, #276]	@ (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80029e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d039      	beq.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80029ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029fc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3a      	ldr	r2, [pc, #232]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a38      	ldr	r2, [pc, #224]	@ (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10e      	bne.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a12:	4836      	ldr	r0, [pc, #216]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a14:	f7ff ff72 	bl	80028fc <LL_ADC_IsEnabled>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	4835      	ldr	r0, [pc, #212]	@ (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a1c:	f7ff ff6e 	bl	80028fc <LL_ADC_IsEnabled>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4323      	orrs	r3, r4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e008      	b.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002a30:	4832      	ldr	r0, [pc, #200]	@ (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002a32:	f7ff ff63 	bl	80028fc <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d047      	beq.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	6811      	ldr	r1, [r2, #0]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	6892      	ldr	r2, [r2, #8]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a5c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a5e:	e03a      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1e      	ldr	r2, [pc, #120]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d10e      	bne.n	8002a9e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002a80:	481a      	ldr	r0, [pc, #104]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a82:	f7ff ff3b 	bl	80028fc <LL_ADC_IsEnabled>
 8002a86:	4604      	mov	r4, r0
 8002a88:	4819      	ldr	r0, [pc, #100]	@ (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a8a:	f7ff ff37 	bl	80028fc <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4323      	orrs	r3, r4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e008      	b.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a9e:	4817      	ldr	r0, [pc, #92]	@ (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002aa0:	f7ff ff2c 	bl	80028fc <LL_ADC_IsEnabled>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d010      	beq.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002abe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac0:	e009      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002ad4:	e000      	b.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ae0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	377c      	adds	r7, #124	@ 0x7c
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40022100 	.word	0x40022100
 8002af4:	40022300 	.word	0x40022300
 8002af8:	58026300 	.word	0x58026300
 8002afc:	58026000 	.word	0x58026000
 8002b00:	fffff0e0 	.word	0xfffff0e0

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00
 8002b48:	05fa0000 	.word	0x05fa0000

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	@ (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	@ (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	@ (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	@ 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	@ 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff40 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff90 	bl	8002bf8 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5f 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff33 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffa4 	bl	8002c60 <SysTick_Config>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002d28:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <HAL_GetCurrentCPUID+0x24>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	2b07      	cmp	r3, #7
 8002d34:	d101      	bne.n	8002d3a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e000      	b.n	8002d3c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002d3a:	2301      	movs	r3, #1
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	460b      	mov	r3, r1
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e00a      	b.n	8002d7e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002d68:	7afb      	ldrb	r3, [r7, #11]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	605a      	str	r2, [r3, #4]
      break;
 8002d74:	e002      	b.n	8002d7c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
      break;
 8002d7a:	bf00      	nop
  }

  return status;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e003      	b.n	8002da6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002dd8:	f7ff ffa4 	bl	8002d24 <HAL_GetCurrentCPUID>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d105      	bne.n	8002dee <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	011a      	lsls	r2, r3, #4
 8002de6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e24 <HAL_EXTI_IRQHandler+0x70>)
 8002de8:	4413      	add	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e004      	b.n	8002df8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	011a      	lsls	r2, r3, #4
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <HAL_EXTI_IRQHandler+0x74>)
 8002df4:	4413      	add	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4798      	blx	r3
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	58000088 	.word	0x58000088
 8002e28:	580000c8 	.word	0x580000c8

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	@ 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e3a:	4b89      	ldr	r3, [pc, #548]	@ (8003060 <HAL_GPIO_Init+0x234>)
 8002e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e3e:	e194      	b.n	800316a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8186 	beq.w	8003164 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d005      	beq.n	8002e70 <HAL_GPIO_Init+0x44>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d130      	bne.n	8002ed2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0201 	and.w	r2, r3, #1
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d017      	beq.n	8002f0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2203      	movs	r2, #3
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d123      	bne.n	8002f62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	08da      	lsrs	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3208      	adds	r2, #8
 8002f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	220f      	movs	r2, #15
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	08da      	lsrs	r2, r3, #3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3208      	adds	r2, #8
 8002f5c:	69b9      	ldr	r1, [r7, #24]
 8002f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0203 	and.w	r2, r3, #3
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80e0 	beq.w	8003164 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8003064 <HAL_GPIO_Init+0x238>)
 8002fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002faa:	4a2e      	ldr	r2, [pc, #184]	@ (8003064 <HAL_GPIO_Init+0x238>)
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003064 <HAL_GPIO_Init+0x238>)
 8002fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc2:	4a29      	ldr	r2, [pc, #164]	@ (8003068 <HAL_GPIO_Init+0x23c>)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	220f      	movs	r2, #15
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a20      	ldr	r2, [pc, #128]	@ (800306c <HAL_GPIO_Init+0x240>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d052      	beq.n	8003094 <HAL_GPIO_Init+0x268>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8003070 <HAL_GPIO_Init+0x244>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d031      	beq.n	800305a <HAL_GPIO_Init+0x22e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8003074 <HAL_GPIO_Init+0x248>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02b      	beq.n	8003056 <HAL_GPIO_Init+0x22a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1d      	ldr	r2, [pc, #116]	@ (8003078 <HAL_GPIO_Init+0x24c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d025      	beq.n	8003052 <HAL_GPIO_Init+0x226>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1c      	ldr	r2, [pc, #112]	@ (800307c <HAL_GPIO_Init+0x250>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01f      	beq.n	800304e <HAL_GPIO_Init+0x222>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1b      	ldr	r2, [pc, #108]	@ (8003080 <HAL_GPIO_Init+0x254>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d019      	beq.n	800304a <HAL_GPIO_Init+0x21e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a1a      	ldr	r2, [pc, #104]	@ (8003084 <HAL_GPIO_Init+0x258>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_GPIO_Init+0x21a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a19      	ldr	r2, [pc, #100]	@ (8003088 <HAL_GPIO_Init+0x25c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00d      	beq.n	8003042 <HAL_GPIO_Init+0x216>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a18      	ldr	r2, [pc, #96]	@ (800308c <HAL_GPIO_Init+0x260>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <HAL_GPIO_Init+0x212>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a17      	ldr	r2, [pc, #92]	@ (8003090 <HAL_GPIO_Init+0x264>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_GPIO_Init+0x20e>
 8003036:	2309      	movs	r3, #9
 8003038:	e02d      	b.n	8003096 <HAL_GPIO_Init+0x26a>
 800303a:	230a      	movs	r3, #10
 800303c:	e02b      	b.n	8003096 <HAL_GPIO_Init+0x26a>
 800303e:	2308      	movs	r3, #8
 8003040:	e029      	b.n	8003096 <HAL_GPIO_Init+0x26a>
 8003042:	2307      	movs	r3, #7
 8003044:	e027      	b.n	8003096 <HAL_GPIO_Init+0x26a>
 8003046:	2306      	movs	r3, #6
 8003048:	e025      	b.n	8003096 <HAL_GPIO_Init+0x26a>
 800304a:	2305      	movs	r3, #5
 800304c:	e023      	b.n	8003096 <HAL_GPIO_Init+0x26a>
 800304e:	2304      	movs	r3, #4
 8003050:	e021      	b.n	8003096 <HAL_GPIO_Init+0x26a>
 8003052:	2303      	movs	r3, #3
 8003054:	e01f      	b.n	8003096 <HAL_GPIO_Init+0x26a>
 8003056:	2302      	movs	r3, #2
 8003058:	e01d      	b.n	8003096 <HAL_GPIO_Init+0x26a>
 800305a:	2301      	movs	r3, #1
 800305c:	e01b      	b.n	8003096 <HAL_GPIO_Init+0x26a>
 800305e:	bf00      	nop
 8003060:	58000080 	.word	0x58000080
 8003064:	58024400 	.word	0x58024400
 8003068:	58000400 	.word	0x58000400
 800306c:	58020000 	.word	0x58020000
 8003070:	58020400 	.word	0x58020400
 8003074:	58020800 	.word	0x58020800
 8003078:	58020c00 	.word	0x58020c00
 800307c:	58021000 	.word	0x58021000
 8003080:	58021400 	.word	0x58021400
 8003084:	58021800 	.word	0x58021800
 8003088:	58021c00 	.word	0x58021c00
 800308c:	58022000 	.word	0x58022000
 8003090:	58022400 	.word	0x58022400
 8003094:	2300      	movs	r3, #0
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	f002 0203 	and.w	r2, r2, #3
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	4093      	lsls	r3, r2
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a6:	4938      	ldr	r1, [pc, #224]	@ (8003188 <HAL_GPIO_Init+0x35c>)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3302      	adds	r3, #2
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80030da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003108:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3301      	adds	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	f47f ae63 	bne.w	8002e40 <HAL_GPIO_Init+0x14>
  }
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	3724      	adds	r7, #36	@ 0x24
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	58000400 	.word	0x58000400

0800318c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
 8003198:	4613      	mov	r3, r2
 800319a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800319c:	787b      	ldrb	r3, [r7, #1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80031a8:	e003      	b.n	80031b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	041a      	lsls	r2, r3, #16
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	619a      	str	r2, [r3, #24]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80031c8:	4a08      	ldr	r2, [pc, #32]	@ (80031ec <HAL_HSEM_FastTake+0x2c>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3320      	adds	r3, #32
 80031ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d2:	4a07      	ldr	r2, [pc, #28]	@ (80031f0 <HAL_HSEM_FastTake+0x30>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	e000      	b.n	80031de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	58026400 	.word	0x58026400
 80031f0:	80000300 	.word	0x80000300

080031f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80031fe:	4906      	ldr	r1, [pc, #24]	@ (8003218 <HAL_HSEM_Release+0x24>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	58026400 	.word	0x58026400

0800321c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003224:	4b29      	ldr	r3, [pc, #164]	@ (80032cc <HAL_PWREx_ConfigSupply+0xb0>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	2b06      	cmp	r3, #6
 800322e:	d00a      	beq.n	8003246 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003230:	4b26      	ldr	r3, [pc, #152]	@ (80032cc <HAL_PWREx_ConfigSupply+0xb0>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d001      	beq.n	8003242 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e040      	b.n	80032c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e03e      	b.n	80032c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003246:	4b21      	ldr	r3, [pc, #132]	@ (80032cc <HAL_PWREx_ConfigSupply+0xb0>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800324e:	491f      	ldr	r1, [pc, #124]	@ (80032cc <HAL_PWREx_ConfigSupply+0xb0>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4313      	orrs	r3, r2
 8003254:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003256:	f7fe f8d3 	bl	8001400 <HAL_GetTick>
 800325a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800325c:	e009      	b.n	8003272 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800325e:	f7fe f8cf 	bl	8001400 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800326c:	d901      	bls.n	8003272 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e028      	b.n	80032c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003272:	4b16      	ldr	r3, [pc, #88]	@ (80032cc <HAL_PWREx_ConfigSupply+0xb0>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800327e:	d1ee      	bne.n	800325e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b1e      	cmp	r3, #30
 8003284:	d008      	beq.n	8003298 <HAL_PWREx_ConfigSupply+0x7c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b2e      	cmp	r3, #46	@ 0x2e
 800328a:	d005      	beq.n	8003298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b1d      	cmp	r3, #29
 8003290:	d002      	beq.n	8003298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b2d      	cmp	r3, #45	@ 0x2d
 8003296:	d114      	bne.n	80032c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003298:	f7fe f8b2 	bl	8001400 <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800329e:	e009      	b.n	80032b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032a0:	f7fe f8ae 	bl	8001400 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032ae:	d901      	bls.n	80032b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e007      	b.n	80032c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_PWREx_ConfigSupply+0xb0>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c0:	d1ee      	bne.n	80032a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	58024800 	.word	0x58024800

080032d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08c      	sub	sp, #48	@ 0x30
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f000 bc48 	b.w	8003b74 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8088 	beq.w	8003402 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f2:	4b99      	ldr	r3, [pc, #612]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032fc:	4b96      	ldr	r3, [pc, #600]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003304:	2b10      	cmp	r3, #16
 8003306:	d007      	beq.n	8003318 <HAL_RCC_OscConfig+0x48>
 8003308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330a:	2b18      	cmp	r3, #24
 800330c:	d111      	bne.n	8003332 <HAL_RCC_OscConfig+0x62>
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d10c      	bne.n	8003332 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	4b8f      	ldr	r3, [pc, #572]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d06d      	beq.n	8003400 <HAL_RCC_OscConfig+0x130>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d169      	bne.n	8003400 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f000 bc21 	b.w	8003b74 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x7a>
 800333c:	4b86      	ldr	r3, [pc, #536]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a85      	ldr	r2, [pc, #532]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	e02e      	b.n	80033a8 <HAL_RCC_OscConfig+0xd8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x9c>
 8003352:	4b81      	ldr	r3, [pc, #516]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a80      	ldr	r2, [pc, #512]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b7e      	ldr	r3, [pc, #504]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7d      	ldr	r2, [pc, #500]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003364:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e01d      	b.n	80033a8 <HAL_RCC_OscConfig+0xd8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0xc0>
 8003376:	4b78      	ldr	r3, [pc, #480]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a77      	ldr	r2, [pc, #476]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 800337c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b75      	ldr	r3, [pc, #468]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a74      	ldr	r2, [pc, #464]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0xd8>
 8003390:	4b71      	ldr	r3, [pc, #452]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a70      	ldr	r2, [pc, #448]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b6e      	ldr	r3, [pc, #440]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a6d      	ldr	r2, [pc, #436]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe f826 	bl	8001400 <HAL_GetTick>
 80033b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe f822 	bl	8001400 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	@ 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e3d4      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ca:	4b63      	ldr	r3, [pc, #396]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0xe8>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe f812 	bl	8001400 <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe f80e 	bl	8001400 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	@ 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e3c0      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033f2:	4b59      	ldr	r3, [pc, #356]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x110>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80ca 	beq.w	80035a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003410:	4b51      	ldr	r3, [pc, #324]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003418:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800341a:	4b4f      	ldr	r3, [pc, #316]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <HAL_RCC_OscConfig+0x166>
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	2b18      	cmp	r3, #24
 800342a:	d156      	bne.n	80034da <HAL_RCC_OscConfig+0x20a>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d151      	bne.n	80034da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003436:	4b48      	ldr	r3, [pc, #288]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x17e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e392      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800344e:	4b42      	ldr	r3, [pc, #264]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 0219 	bic.w	r2, r3, #25
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	493f      	ldr	r1, [pc, #252]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 800345c:	4313      	orrs	r3, r2
 800345e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fd ffce 	bl	8001400 <HAL_GetTick>
 8003464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fd ffca 	bl	8001400 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e37c      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800347a:	4b37      	ldr	r3, [pc, #220]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	f7fd ffeb 	bl	8001460 <HAL_GetREVID>
 800348a:	4603      	mov	r3, r0
 800348c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003490:	4293      	cmp	r3, r2
 8003492:	d817      	bhi.n	80034c4 <HAL_RCC_OscConfig+0x1f4>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b40      	cmp	r3, #64	@ 0x40
 800349a:	d108      	bne.n	80034ae <HAL_RCC_OscConfig+0x1de>
 800349c:	4b2e      	ldr	r3, [pc, #184]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80034a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80034a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ac:	e07a      	b.n	80035a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	031b      	lsls	r3, r3, #12
 80034bc:	4926      	ldr	r1, [pc, #152]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034c2:	e06f      	b.n	80035a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b24      	ldr	r3, [pc, #144]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	4921      	ldr	r1, [pc, #132]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d8:	e064      	b.n	80035a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d047      	beq.n	8003572 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 0219 	bic.w	r2, r3, #25
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	491a      	ldr	r1, [pc, #104]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fd ff84 	bl	8001400 <HAL_GetTick>
 80034f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fc:	f7fd ff80 	bl	8001400 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e332      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800350e:	4b12      	ldr	r3, [pc, #72]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351a:	f7fd ffa1 	bl	8001460 <HAL_GetREVID>
 800351e:	4603      	mov	r3, r0
 8003520:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003524:	4293      	cmp	r3, r2
 8003526:	d819      	bhi.n	800355c <HAL_RCC_OscConfig+0x28c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b40      	cmp	r3, #64	@ 0x40
 800352e:	d108      	bne.n	8003542 <HAL_RCC_OscConfig+0x272>
 8003530:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003538:	4a07      	ldr	r2, [pc, #28]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 800353a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353e:	6053      	str	r3, [r2, #4]
 8003540:	e030      	b.n	80035a4 <HAL_RCC_OscConfig+0x2d4>
 8003542:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	031b      	lsls	r3, r3, #12
 8003550:	4901      	ldr	r1, [pc, #4]	@ (8003558 <HAL_RCC_OscConfig+0x288>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
 8003556:	e025      	b.n	80035a4 <HAL_RCC_OscConfig+0x2d4>
 8003558:	58024400 	.word	0x58024400
 800355c:	4b9a      	ldr	r3, [pc, #616]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	061b      	lsls	r3, r3, #24
 800356a:	4997      	ldr	r1, [pc, #604]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
 8003570:	e018      	b.n	80035a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003572:	4b95      	ldr	r3, [pc, #596]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a94      	ldr	r2, [pc, #592]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fd ff3f 	bl	8001400 <HAL_GetTick>
 8003582:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003586:	f7fd ff3b 	bl	8001400 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e2ed      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003598:	4b8b      	ldr	r3, [pc, #556]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f0      	bne.n	8003586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a9 	beq.w	8003704 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b2:	4b85      	ldr	r3, [pc, #532]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035bc:	4b82      	ldr	r3, [pc, #520]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80035be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d007      	beq.n	80035d8 <HAL_RCC_OscConfig+0x308>
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b18      	cmp	r3, #24
 80035cc:	d13a      	bne.n	8003644 <HAL_RCC_OscConfig+0x374>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d135      	bne.n	8003644 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035d8:	4b7b      	ldr	r3, [pc, #492]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_OscConfig+0x320>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	2b80      	cmp	r3, #128	@ 0x80
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e2c1      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035f0:	f7fd ff36 	bl	8001460 <HAL_GetREVID>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d817      	bhi.n	800362e <HAL_RCC_OscConfig+0x35e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	2b20      	cmp	r3, #32
 8003604:	d108      	bne.n	8003618 <HAL_RCC_OscConfig+0x348>
 8003606:	4b70      	ldr	r3, [pc, #448]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800360e:	4a6e      	ldr	r2, [pc, #440]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003610:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003614:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003616:	e075      	b.n	8003704 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003618:	4b6b      	ldr	r3, [pc, #428]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	069b      	lsls	r3, r3, #26
 8003626:	4968      	ldr	r1, [pc, #416]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800362c:	e06a      	b.n	8003704 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800362e:	4b66      	ldr	r3, [pc, #408]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	061b      	lsls	r3, r3, #24
 800363c:	4962      	ldr	r1, [pc, #392]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 800363e:	4313      	orrs	r3, r2
 8003640:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003642:	e05f      	b.n	8003704 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d042      	beq.n	80036d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800364c:	4b5e      	ldr	r3, [pc, #376]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a5d      	ldr	r2, [pc, #372]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd fed2 	bl	8001400 <HAL_GetTick>
 800365c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003660:	f7fd fece 	bl	8001400 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e280      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003672:	4b55      	ldr	r3, [pc, #340]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800367e:	f7fd feef 	bl	8001460 <HAL_GetREVID>
 8003682:	4603      	mov	r3, r0
 8003684:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003688:	4293      	cmp	r3, r2
 800368a:	d817      	bhi.n	80036bc <HAL_RCC_OscConfig+0x3ec>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	2b20      	cmp	r3, #32
 8003692:	d108      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3d6>
 8003694:	4b4c      	ldr	r3, [pc, #304]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800369c:	4a4a      	ldr	r2, [pc, #296]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 800369e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036a2:	6053      	str	r3, [r2, #4]
 80036a4:	e02e      	b.n	8003704 <HAL_RCC_OscConfig+0x434>
 80036a6:	4b48      	ldr	r3, [pc, #288]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	069b      	lsls	r3, r3, #26
 80036b4:	4944      	ldr	r1, [pc, #272]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
 80036ba:	e023      	b.n	8003704 <HAL_RCC_OscConfig+0x434>
 80036bc:	4b42      	ldr	r3, [pc, #264]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	061b      	lsls	r3, r3, #24
 80036ca:	493f      	ldr	r1, [pc, #252]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60cb      	str	r3, [r1, #12]
 80036d0:	e018      	b.n	8003704 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036d2:	4b3d      	ldr	r3, [pc, #244]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a3c      	ldr	r2, [pc, #240]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80036d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fd fe8f 	bl	8001400 <HAL_GetTick>
 80036e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036e6:	f7fd fe8b 	bl	8001400 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e23d      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036f8:	4b33      	ldr	r3, [pc, #204]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f0      	bne.n	80036e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d036      	beq.n	800377e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d019      	beq.n	800374c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003718:	4b2b      	ldr	r3, [pc, #172]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 800371a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371c:	4a2a      	ldr	r2, [pc, #168]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fd fe6c 	bl	8001400 <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7fd fe68 	bl	8001400 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e21a      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800373e:	4b22      	ldr	r3, [pc, #136]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x45c>
 800374a:	e018      	b.n	800377e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374c:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 800374e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003750:	4a1d      	ldr	r2, [pc, #116]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fd fe52 	bl	8001400 <HAL_GetTick>
 800375c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003760:	f7fd fe4e 	bl	8001400 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e200      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d039      	beq.n	80037fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01c      	beq.n	80037cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003792:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a0c      	ldr	r2, [pc, #48]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 8003798:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800379c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800379e:	f7fd fe2f 	bl	8001400 <HAL_GetTick>
 80037a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a6:	f7fd fe2b 	bl	8001400 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e1dd      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <HAL_RCC_OscConfig+0x4f8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4d6>
 80037c4:	e01b      	b.n	80037fe <HAL_RCC_OscConfig+0x52e>
 80037c6:	bf00      	nop
 80037c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037cc:	4b9b      	ldr	r3, [pc, #620]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a9a      	ldr	r2, [pc, #616]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80037d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037d8:	f7fd fe12 	bl	8001400 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037e0:	f7fd fe0e 	bl	8001400 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e1c0      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037f2:	4b92      	ldr	r3, [pc, #584]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8081 	beq.w	800390e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800380c:	4b8c      	ldr	r3, [pc, #560]	@ (8003a40 <HAL_RCC_OscConfig+0x770>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a8b      	ldr	r2, [pc, #556]	@ (8003a40 <HAL_RCC_OscConfig+0x770>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003816:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003818:	f7fd fdf2 	bl	8001400 <HAL_GetTick>
 800381c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fd fdee 	bl	8001400 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	@ 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e1a0      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003832:	4b83      	ldr	r3, [pc, #524]	@ (8003a40 <HAL_RCC_OscConfig+0x770>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d106      	bne.n	8003854 <HAL_RCC_OscConfig+0x584>
 8003846:	4b7d      	ldr	r3, [pc, #500]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6713      	str	r3, [r2, #112]	@ 0x70
 8003852:	e02d      	b.n	80038b0 <HAL_RCC_OscConfig+0x5e0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10c      	bne.n	8003876 <HAL_RCC_OscConfig+0x5a6>
 800385c:	4b77      	ldr	r3, [pc, #476]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	4a76      	ldr	r2, [pc, #472]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	@ 0x70
 8003868:	4b74      	ldr	r3, [pc, #464]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386c:	4a73      	ldr	r2, [pc, #460]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 800386e:	f023 0304 	bic.w	r3, r3, #4
 8003872:	6713      	str	r3, [r2, #112]	@ 0x70
 8003874:	e01c      	b.n	80038b0 <HAL_RCC_OscConfig+0x5e0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b05      	cmp	r3, #5
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x5c8>
 800387e:	4b6f      	ldr	r3, [pc, #444]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	4a6e      	ldr	r2, [pc, #440]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	6713      	str	r3, [r2, #112]	@ 0x70
 800388a:	4b6c      	ldr	r3, [pc, #432]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	4a6b      	ldr	r2, [pc, #428]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6713      	str	r3, [r2, #112]	@ 0x70
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0x5e0>
 8003898:	4b68      	ldr	r3, [pc, #416]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389c:	4a67      	ldr	r2, [pc, #412]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a4:	4b65      	ldr	r3, [pc, #404]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a8:	4a64      	ldr	r2, [pc, #400]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80038aa:	f023 0304 	bic.w	r3, r3, #4
 80038ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fd fda2 	bl	8001400 <HAL_GetTick>
 80038bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c0:	f7fd fd9e 	bl	8001400 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e14e      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038d6:	4b59      	ldr	r3, [pc, #356]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ee      	beq.n	80038c0 <HAL_RCC_OscConfig+0x5f0>
 80038e2:	e014      	b.n	800390e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fd fd8c 	bl	8001400 <HAL_GetTick>
 80038e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ec:	f7fd fd88 	bl	8001400 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e138      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003902:	4b4e      	ldr	r3, [pc, #312]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1ee      	bne.n	80038ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 812d 	beq.w	8003b72 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003918:	4b48      	ldr	r3, [pc, #288]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003920:	2b18      	cmp	r3, #24
 8003922:	f000 80bd 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	2b02      	cmp	r3, #2
 800392c:	f040 809e 	bne.w	8003a6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b42      	ldr	r3, [pc, #264]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a41      	ldr	r2, [pc, #260]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd fd60 	bl	8001400 <HAL_GetTick>
 8003940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fd fd5c 	bl	8001400 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e10e      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003956:	4b39      	ldr	r3, [pc, #228]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003962:	4b36      	ldr	r3, [pc, #216]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003964:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003966:	4b37      	ldr	r3, [pc, #220]	@ (8003a44 <HAL_RCC_OscConfig+0x774>)
 8003968:	4013      	ands	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003972:	0112      	lsls	r2, r2, #4
 8003974:	430a      	orrs	r2, r1
 8003976:	4931      	ldr	r1, [pc, #196]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003978:	4313      	orrs	r3, r2
 800397a:	628b      	str	r3, [r1, #40]	@ 0x28
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	3b01      	subs	r3, #1
 8003982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398a:	3b01      	subs	r3, #1
 800398c:	025b      	lsls	r3, r3, #9
 800398e:	b29b      	uxth	r3, r3
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	3b01      	subs	r3, #1
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	3b01      	subs	r3, #1
 80039a6:	061b      	lsls	r3, r3, #24
 80039a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80039ac:	4923      	ldr	r1, [pc, #140]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80039b2:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	4a21      	ldr	r2, [pc, #132]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039be:	4b1f      	ldr	r3, [pc, #124]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039c2:	4b21      	ldr	r3, [pc, #132]	@ (8003a48 <HAL_RCC_OscConfig+0x778>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80039ca:	00d2      	lsls	r2, r2, #3
 80039cc:	491b      	ldr	r1, [pc, #108]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039d2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d6:	f023 020c 	bic.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	4917      	ldr	r1, [pc, #92]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80039e4:	4b15      	ldr	r3, [pc, #84]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	f023 0202 	bic.w	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f0:	4912      	ldr	r1, [pc, #72]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039f6:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	4a10      	ldr	r2, [pc, #64]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a02:	4b0e      	ldr	r3, [pc, #56]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	4a0d      	ldr	r2, [pc, #52]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003a1a:	4b08      	ldr	r3, [pc, #32]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1e:	4a07      	ldr	r2, [pc, #28]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a26:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a04      	ldr	r2, [pc, #16]	@ (8003a3c <HAL_RCC_OscConfig+0x76c>)
 8003a2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fd fce5 	bl	8001400 <HAL_GetTick>
 8003a36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a38:	e011      	b.n	8003a5e <HAL_RCC_OscConfig+0x78e>
 8003a3a:	bf00      	nop
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	58024800 	.word	0x58024800
 8003a44:	fffffc0c 	.word	0xfffffc0c
 8003a48:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fd fcd8 	bl	8001400 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e08a      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a5e:	4b47      	ldr	r3, [pc, #284]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x77c>
 8003a6a:	e082      	b.n	8003b72 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6c:	4b43      	ldr	r3, [pc, #268]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a42      	ldr	r2, [pc, #264]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fd fcc2 	bl	8001400 <HAL_GetTick>
 8003a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fd fcbe 	bl	8001400 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e070      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a92:	4b3a      	ldr	r3, [pc, #232]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x7b0>
 8003a9e:	e068      	b.n	8003b72 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003aa0:	4b36      	ldr	r3, [pc, #216]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003aa6:	4b35      	ldr	r3, [pc, #212]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d031      	beq.n	8003b18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0203 	and.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d12a      	bne.n	8003b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d122      	bne.n	8003b18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003adc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d11a      	bne.n	8003b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	0a5b      	lsrs	r3, r3, #9
 8003ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d111      	bne.n	8003b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d108      	bne.n	8003b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	0e1b      	lsrs	r3, r3, #24
 8003b0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e02b      	b.n	8003b74 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003b1c:	4b17      	ldr	r3, [pc, #92]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b20:	08db      	lsrs	r3, r3, #3
 8003b22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b26:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d01f      	beq.n	8003b72 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003b32:	4b12      	ldr	r3, [pc, #72]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	4a11      	ldr	r2, [pc, #68]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b3e:	f7fd fc5f 	bl	8001400 <HAL_GetTick>
 8003b42:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003b44:	bf00      	nop
 8003b46:	f7fd fc5b 	bl	8001400 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d0f9      	beq.n	8003b46 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b52:	4b0a      	ldr	r3, [pc, #40]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b56:	4b0a      	ldr	r3, [pc, #40]	@ (8003b80 <HAL_RCC_OscConfig+0x8b0>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b5e:	00d2      	lsls	r2, r2, #3
 8003b60:	4906      	ldr	r1, [pc, #24]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003b66:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	4a04      	ldr	r2, [pc, #16]	@ (8003b7c <HAL_RCC_OscConfig+0x8ac>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3730      	adds	r7, #48	@ 0x30
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	58024400 	.word	0x58024400
 8003b80:	ffff0007 	.word	0xffff0007

08003b84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e19c      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b98:	4b8a      	ldr	r3, [pc, #552]	@ (8003dc4 <HAL_RCC_ClockConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d910      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b87      	ldr	r3, [pc, #540]	@ (8003dc4 <HAL_RCC_ClockConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 020f 	bic.w	r2, r3, #15
 8003bae:	4985      	ldr	r1, [pc, #532]	@ (8003dc4 <HAL_RCC_ClockConfig+0x240>)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b83      	ldr	r3, [pc, #524]	@ (8003dc4 <HAL_RCC_ClockConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e184      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d010      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d908      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003be4:	4b78      	ldr	r3, [pc, #480]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	4975      	ldr	r1, [pc, #468]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d010      	beq.n	8003c24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	4b70      	ldr	r3, [pc, #448]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d908      	bls.n	8003c24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c12:	4b6d      	ldr	r3, [pc, #436]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	496a      	ldr	r1, [pc, #424]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d010      	beq.n	8003c52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	4b64      	ldr	r3, [pc, #400]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d908      	bls.n	8003c52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c40:	4b61      	ldr	r3, [pc, #388]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	495e      	ldr	r1, [pc, #376]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d010      	beq.n	8003c80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	4b59      	ldr	r3, [pc, #356]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d908      	bls.n	8003c80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c6e:	4b56      	ldr	r3, [pc, #344]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	4953      	ldr	r1, [pc, #332]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d010      	beq.n	8003cae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	4b4d      	ldr	r3, [pc, #308]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d908      	bls.n	8003cae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f023 020f 	bic.w	r2, r3, #15
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4947      	ldr	r1, [pc, #284]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d055      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cba:	4b43      	ldr	r3, [pc, #268]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	4940      	ldr	r1, [pc, #256]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d121      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0f6      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d107      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cec:	4b36      	ldr	r3, [pc, #216]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d115      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0ea      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d04:	4b30      	ldr	r3, [pc, #192]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0de      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d14:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0d6      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d24:	4b28      	ldr	r3, [pc, #160]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f023 0207 	bic.w	r2, r3, #7
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4925      	ldr	r1, [pc, #148]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d36:	f7fd fb63 	bl	8001400 <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d3e:	f7fd fb5f 	bl	8001400 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0be      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d54:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d1eb      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d208      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d82:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f023 020f 	bic.w	r2, r3, #15
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	490e      	ldr	r1, [pc, #56]	@ (8003dc8 <HAL_RCC_ClockConfig+0x244>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d94:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc4 <HAL_RCC_ClockConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d214      	bcs.n	8003dcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b08      	ldr	r3, [pc, #32]	@ (8003dc4 <HAL_RCC_ClockConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 020f 	bic.w	r2, r3, #15
 8003daa:	4906      	ldr	r1, [pc, #24]	@ (8003dc4 <HAL_RCC_ClockConfig+0x240>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b04      	ldr	r3, [pc, #16]	@ (8003dc4 <HAL_RCC_ClockConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e086      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x34e>
 8003dc4:	52002000 	.word	0x52002000
 8003dc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d010      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d208      	bcs.n	8003dfa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003de8:	4b3c      	ldr	r3, [pc, #240]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	4939      	ldr	r1, [pc, #228]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d010      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	4b34      	ldr	r3, [pc, #208]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d208      	bcs.n	8003e28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e16:	4b31      	ldr	r3, [pc, #196]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	492e      	ldr	r1, [pc, #184]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	4b28      	ldr	r3, [pc, #160]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d208      	bcs.n	8003e56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e44:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	4922      	ldr	r1, [pc, #136]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d010      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	4b1d      	ldr	r3, [pc, #116]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d208      	bcs.n	8003e84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e72:	4b1a      	ldr	r3, [pc, #104]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	4917      	ldr	r1, [pc, #92]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e84:	f000 f834 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b14      	ldr	r3, [pc, #80]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	4912      	ldr	r1, [pc, #72]	@ (8003ee0 <HAL_RCC_ClockConfig+0x35c>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8003edc <HAL_RCC_ClockConfig+0x358>)
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee0 <HAL_RCC_ClockConfig+0x35c>)
 8003eac:	5cd3      	ldrb	r3, [r2, r3]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee4 <HAL_RCC_ClockConfig+0x360>)
 8003eba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <HAL_RCC_ClockConfig+0x364>)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <HAL_RCC_ClockConfig+0x368>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fa50 	bl	800136c <HAL_InitTick>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	58024400 	.word	0x58024400
 8003ee0:	08008bf8 	.word	0x08008bf8
 8003ee4:	24000004 	.word	0x24000004
 8003ee8:	24000000 	.word	0x24000000
 8003eec:	24000024 	.word	0x24000024

08003ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b089      	sub	sp, #36	@ 0x24
 8003ef4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef6:	4bb3      	ldr	r3, [pc, #716]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003efe:	2b18      	cmp	r3, #24
 8003f00:	f200 8155 	bhi.w	80041ae <HAL_RCC_GetSysClockFreq+0x2be>
 8003f04:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f71 	.word	0x08003f71
 8003f10:	080041af 	.word	0x080041af
 8003f14:	080041af 	.word	0x080041af
 8003f18:	080041af 	.word	0x080041af
 8003f1c:	080041af 	.word	0x080041af
 8003f20:	080041af 	.word	0x080041af
 8003f24:	080041af 	.word	0x080041af
 8003f28:	080041af 	.word	0x080041af
 8003f2c:	08003f97 	.word	0x08003f97
 8003f30:	080041af 	.word	0x080041af
 8003f34:	080041af 	.word	0x080041af
 8003f38:	080041af 	.word	0x080041af
 8003f3c:	080041af 	.word	0x080041af
 8003f40:	080041af 	.word	0x080041af
 8003f44:	080041af 	.word	0x080041af
 8003f48:	080041af 	.word	0x080041af
 8003f4c:	08003f9d 	.word	0x08003f9d
 8003f50:	080041af 	.word	0x080041af
 8003f54:	080041af 	.word	0x080041af
 8003f58:	080041af 	.word	0x080041af
 8003f5c:	080041af 	.word	0x080041af
 8003f60:	080041af 	.word	0x080041af
 8003f64:	080041af 	.word	0x080041af
 8003f68:	080041af 	.word	0x080041af
 8003f6c:	08003fa3 	.word	0x08003fa3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f70:	4b94      	ldr	r3, [pc, #592]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f7c:	4b91      	ldr	r3, [pc, #580]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	08db      	lsrs	r3, r3, #3
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	4a90      	ldr	r2, [pc, #576]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f88:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003f8e:	e111      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f90:	4b8d      	ldr	r3, [pc, #564]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f92:	61bb      	str	r3, [r7, #24]
      break;
 8003f94:	e10e      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003f96:	4b8d      	ldr	r3, [pc, #564]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f98:	61bb      	str	r3, [r7, #24]
      break;
 8003f9a:	e10b      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f9e:	61bb      	str	r3, [r7, #24]
      break;
 8003fa0:	e108      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fa2:	4b88      	ldr	r3, [pc, #544]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003fac:	4b85      	ldr	r3, [pc, #532]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fb6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fb8:	4b82      	ldr	r3, [pc, #520]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003fc2:	4b80      	ldr	r3, [pc, #512]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc6:	08db      	lsrs	r3, r3, #3
 8003fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80e1 	beq.w	80041a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	f000 8083 	beq.w	80040f4 <HAL_RCC_GetSysClockFreq+0x204>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	f200 80a1 	bhi.w	8004138 <HAL_RCC_GetSysClockFreq+0x248>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x114>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d056      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004002:	e099      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004004:	4b6f      	ldr	r3, [pc, #444]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02d      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004010:	4b6c      	ldr	r3, [pc, #432]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	08db      	lsrs	r3, r3, #3
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	4a6b      	ldr	r2, [pc, #428]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
 8004020:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	ee07 3a90 	vmov	s15, r3
 8004028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403a:	4b62      	ldr	r3, [pc, #392]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404a:	ed97 6a02 	vldr	s12, [r7, #8]
 800404e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80041d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800405e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004066:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800406a:	e087      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004076:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80041d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800407a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407e:	4b51      	ldr	r3, [pc, #324]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004092:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80041d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040ae:	e065      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80041dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80040be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c2:	4b40      	ldr	r3, [pc, #256]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80041d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040f2:	e043      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80041e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004106:	4b2f      	ldr	r3, [pc, #188]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004116:	ed97 6a02 	vldr	s12, [r7, #8]
 800411a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80041d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800411e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800412a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004132:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004136:	e021      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80041dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800414a:	4b1e      	ldr	r3, [pc, #120]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415a:	ed97 6a02 	vldr	s12, [r7, #8]
 800415e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80041d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800416a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800416e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800417a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800417c:	4b11      	ldr	r3, [pc, #68]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	0a5b      	lsrs	r3, r3, #9
 8004182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004186:	3301      	adds	r3, #1
 8004188:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	ee07 3a90 	vmov	s15, r3
 8004190:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004194:	edd7 6a07 	vldr	s13, [r7, #28]
 8004198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800419c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a0:	ee17 3a90 	vmov	r3, s15
 80041a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80041a6:	e005      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61bb      	str	r3, [r7, #24]
      break;
 80041ac:	e002      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80041ae:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041b0:	61bb      	str	r3, [r7, #24]
      break;
 80041b2:	bf00      	nop
  }

  return sysclockfreq;
 80041b4:	69bb      	ldr	r3, [r7, #24]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3724      	adds	r7, #36	@ 0x24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	58024400 	.word	0x58024400
 80041c8:	03d09000 	.word	0x03d09000
 80041cc:	003d0900 	.word	0x003d0900
 80041d0:	017d7840 	.word	0x017d7840
 80041d4:	46000000 	.word	0x46000000
 80041d8:	4c742400 	.word	0x4c742400
 80041dc:	4a742400 	.word	0x4a742400
 80041e0:	4bbebc20 	.word	0x4bbebc20

080041e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041ea:	f7ff fe81 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <HAL_RCC_GetHCLKFreq+0x50>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	490f      	ldr	r1, [pc, #60]	@ (8004238 <HAL_RCC_GetHCLKFreq+0x54>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	fa22 f303 	lsr.w	r3, r2, r3
 8004206:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004208:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <HAL_RCC_GetHCLKFreq+0x50>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	4a09      	ldr	r2, [pc, #36]	@ (8004238 <HAL_RCC_GetHCLKFreq+0x54>)
 8004212:	5cd3      	ldrb	r3, [r2, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	4a07      	ldr	r2, [pc, #28]	@ (800423c <HAL_RCC_GetHCLKFreq+0x58>)
 8004220:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004222:	4a07      	ldr	r2, [pc, #28]	@ (8004240 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004228:	4b04      	ldr	r3, [pc, #16]	@ (800423c <HAL_RCC_GetHCLKFreq+0x58>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	58024400 	.word	0x58024400
 8004238:	08008bf8 	.word	0x08008bf8
 800423c:	24000004 	.word	0x24000004
 8004240:	24000000 	.word	0x24000000

08004244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004248:	f7ff ffcc 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 800424c:	4602      	mov	r2, r0
 800424e:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	4904      	ldr	r1, [pc, #16]	@ (800426c <HAL_RCC_GetPCLK1Freq+0x28>)
 800425a:	5ccb      	ldrb	r3, [r1, r3]
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004264:	4618      	mov	r0, r3
 8004266:	bd80      	pop	{r7, pc}
 8004268:	58024400 	.word	0x58024400
 800426c:	08008bf8 	.word	0x08008bf8

08004270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004274:	f7ff ffb6 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	0a1b      	lsrs	r3, r3, #8
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	4904      	ldr	r1, [pc, #16]	@ (8004298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	58024400 	.word	0x58024400
 8004298:	08008bf8 	.word	0x08008bf8

0800429c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800429c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a0:	b0ca      	sub	sp, #296	@ 0x128
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042a8:	2300      	movs	r3, #0
 80042aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80042c0:	2500      	movs	r5, #0
 80042c2:	ea54 0305 	orrs.w	r3, r4, r5
 80042c6:	d049      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042d2:	d02f      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80042d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042d8:	d828      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80042da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042de:	d01a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042e4:	d822      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80042ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ee:	d007      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042f0:	e01c      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f2:	4bb8      	ldr	r3, [pc, #736]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	4ab7      	ldr	r2, [pc, #732]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80042fe:	e01a      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	3308      	adds	r3, #8
 8004306:	2102      	movs	r1, #2
 8004308:	4618      	mov	r0, r3
 800430a:	f002 fb61 	bl	80069d0 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004314:	e00f      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	3328      	adds	r3, #40	@ 0x28
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f002 fc08 	bl	8006b34 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800432a:	e004      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800433e:	4ba5      	ldr	r3, [pc, #660]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004342:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800434c:	4aa1      	ldr	r2, [pc, #644]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800434e:	430b      	orrs	r3, r1
 8004350:	6513      	str	r3, [r2, #80]	@ 0x50
 8004352:	e003      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004368:	f04f 0900 	mov.w	r9, #0
 800436c:	ea58 0309 	orrs.w	r3, r8, r9
 8004370:	d047      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004378:	2b04      	cmp	r3, #4
 800437a:	d82a      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800437c:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	08004399 	.word	0x08004399
 8004388:	080043a7 	.word	0x080043a7
 800438c:	080043bd 	.word	0x080043bd
 8004390:	080043db 	.word	0x080043db
 8004394:	080043db 	.word	0x080043db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004398:	4b8e      	ldr	r3, [pc, #568]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800439a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439c:	4a8d      	ldr	r2, [pc, #564]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800439e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043a4:	e01a      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	3308      	adds	r3, #8
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f002 fb0e 	bl	80069d0 <RCCEx_PLL2_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043ba:	e00f      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c0:	3328      	adds	r3, #40	@ 0x28
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f002 fbb5 	bl	8006b34 <RCCEx_PLL3_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043d0:	e004      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80043da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e4:	4b7b      	ldr	r3, [pc, #492]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e8:	f023 0107 	bic.w	r1, r3, #7
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f2:	4a78      	ldr	r2, [pc, #480]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043f4:	430b      	orrs	r3, r1
 80043f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80043f8:	e003      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800440e:	f04f 0b00 	mov.w	fp, #0
 8004412:	ea5a 030b 	orrs.w	r3, sl, fp
 8004416:	d04c      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004422:	d030      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004428:	d829      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800442a:	2bc0      	cmp	r3, #192	@ 0xc0
 800442c:	d02d      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800442e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004430:	d825      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004432:	2b80      	cmp	r3, #128	@ 0x80
 8004434:	d018      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004436:	2b80      	cmp	r3, #128	@ 0x80
 8004438:	d821      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800443e:	2b40      	cmp	r3, #64	@ 0x40
 8004440:	d007      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004442:	e01c      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004444:	4b63      	ldr	r3, [pc, #396]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	4a62      	ldr	r2, [pc, #392]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800444a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800444e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004450:	e01c      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	3308      	adds	r3, #8
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f002 fab8 	bl	80069d0 <RCCEx_PLL2_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004466:	e011      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446c:	3328      	adds	r3, #40	@ 0x28
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f002 fb5f 	bl	8006b34 <RCCEx_PLL3_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800447c:	e006      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004484:	e002      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004486:	bf00      	nop
 8004488:	e000      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800448a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004494:	4b4f      	ldr	r3, [pc, #316]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004498:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a2:	4a4c      	ldr	r2, [pc, #304]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80044a8:	e003      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80044be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80044c8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80044cc:	460b      	mov	r3, r1
 80044ce:	4313      	orrs	r3, r2
 80044d0:	d053      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044de:	d035      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80044e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044e4:	d82e      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80044e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80044ea:	d031      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80044ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80044f0:	d828      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f6:	d01a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80044f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044fc:	d822      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004506:	d007      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004508:	e01c      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450a:	4b32      	ldr	r3, [pc, #200]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	4a31      	ldr	r2, [pc, #196]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004514:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004516:	e01c      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	3308      	adds	r3, #8
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f002 fa55 	bl	80069d0 <RCCEx_PLL2_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800452c:	e011      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	3328      	adds	r3, #40	@ 0x28
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f002 fafc 	bl	8006b34 <RCCEx_PLL3_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004542:	e006      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800454a:	e002      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800454c:	bf00      	nop
 800454e:	e000      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10b      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800455a:	4b1e      	ldr	r3, [pc, #120]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800456a:	4a1a      	ldr	r2, [pc, #104]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800456c:	430b      	orrs	r3, r1
 800456e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004586:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004590:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d056      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80045a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045a6:	d038      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80045a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045ac:	d831      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045b2:	d034      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80045b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045b8:	d82b      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045be:	d01d      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80045c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045c4:	d825      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d006      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80045ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045d0:	e01f      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045d2:	bf00      	nop
 80045d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4ba2      	ldr	r3, [pc, #648]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	4aa1      	ldr	r2, [pc, #644]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045e4:	e01c      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ea:	3308      	adds	r3, #8
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f002 f9ee 	bl	80069d0 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80045fa:	e011      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004600:	3328      	adds	r3, #40	@ 0x28
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f002 fa95 	bl	8006b34 <RCCEx_PLL3_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004610:	e006      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004618:	e002      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800461e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004628:	4b8e      	ldr	r3, [pc, #568]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004638:	4a8a      	ldr	r2, [pc, #552]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800463a:	430b      	orrs	r3, r1
 800463c:	6593      	str	r3, [r2, #88]	@ 0x58
 800463e:	e003      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004654:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004658:	2300      	movs	r3, #0
 800465a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800465e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004662:	460b      	mov	r3, r1
 8004664:	4313      	orrs	r3, r2
 8004666:	d03a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466e:	2b30      	cmp	r3, #48	@ 0x30
 8004670:	d01f      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004672:	2b30      	cmp	r3, #48	@ 0x30
 8004674:	d819      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004676:	2b20      	cmp	r3, #32
 8004678:	d00c      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800467a:	2b20      	cmp	r3, #32
 800467c:	d815      	bhi.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d019      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004682:	2b10      	cmp	r3, #16
 8004684:	d111      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004686:	4b77      	ldr	r3, [pc, #476]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	4a76      	ldr	r2, [pc, #472]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800468c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004690:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004692:	e011      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004698:	3308      	adds	r3, #8
 800469a:	2102      	movs	r1, #2
 800469c:	4618      	mov	r0, r3
 800469e:	f002 f997 	bl	80069d0 <RCCEx_PLL2_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80046a8:	e006      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046b0:	e002      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80046b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046c0:	4b68      	ldr	r3, [pc, #416]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ce:	4a65      	ldr	r2, [pc, #404]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046d4:	e003      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80046ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80046f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d051      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004708:	d035      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800470a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800470e:	d82e      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004710:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004714:	d031      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004716:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800471a:	d828      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800471c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004720:	d01a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004726:	d822      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004730:	d007      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004732:	e01c      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004734:	4b4b      	ldr	r3, [pc, #300]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	4a4a      	ldr	r2, [pc, #296]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800473a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800473e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004740:	e01c      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004746:	3308      	adds	r3, #8
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f002 f940 	bl	80069d0 <RCCEx_PLL2_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004756:	e011      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475c:	3328      	adds	r3, #40	@ 0x28
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f002 f9e7 	bl	8006b34 <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800476c:	e006      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004774:	e002      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800477a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004784:	4b37      	ldr	r3, [pc, #220]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004788:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004792:	4a34      	ldr	r2, [pc, #208]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004794:	430b      	orrs	r3, r1
 8004796:	6513      	str	r3, [r2, #80]	@ 0x50
 8004798:	e003      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80047ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80047b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80047bc:	460b      	mov	r3, r1
 80047be:	4313      	orrs	r3, r2
 80047c0:	d056      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047cc:	d033      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80047ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047d2:	d82c      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047d8:	d02f      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80047da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047de:	d826      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047e4:	d02b      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80047e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047ea:	d820      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047f0:	d012      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80047f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047f6:	d81a      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d022      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004800:	d115      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	3308      	adds	r3, #8
 8004808:	2101      	movs	r1, #1
 800480a:	4618      	mov	r0, r3
 800480c:	f002 f8e0 	bl	80069d0 <RCCEx_PLL2_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004816:	e015      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481c:	3328      	adds	r3, #40	@ 0x28
 800481e:	2101      	movs	r1, #1
 8004820:	4618      	mov	r0, r3
 8004822:	f002 f987 	bl	8006b34 <RCCEx_PLL3_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800482c:	e00a      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004834:	e006      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004836:	bf00      	nop
 8004838:	e004      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800483a:	bf00      	nop
 800483c:	e002      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800483e:	bf00      	nop
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10d      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800484c:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800484e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004850:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800485a:	4a02      	ldr	r2, [pc, #8]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800485c:	430b      	orrs	r3, r1
 800485e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004860:	e006      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004862:	bf00      	nop
 8004864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800487c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004886:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d055      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004894:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800489c:	d033      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800489e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048a2:	d82c      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a8:	d02f      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ae:	d826      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048b4:	d02b      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80048b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048ba:	d820      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048c0:	d012      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80048c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048c6:	d81a      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d022      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80048cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048d0:	d115      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d6:	3308      	adds	r3, #8
 80048d8:	2101      	movs	r1, #1
 80048da:	4618      	mov	r0, r3
 80048dc:	f002 f878 	bl	80069d0 <RCCEx_PLL2_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80048e6:	e015      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ec:	3328      	adds	r3, #40	@ 0x28
 80048ee:	2101      	movs	r1, #1
 80048f0:	4618      	mov	r0, r3
 80048f2:	f002 f91f 	bl	8006b34 <RCCEx_PLL3_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80048fc:	e00a      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004904:	e006      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004906:	bf00      	nop
 8004908:	e004      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800490a:	bf00      	nop
 800490c:	e002      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800490e:	bf00      	nop
 8004910:	e000      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800491c:	4ba3      	ldr	r3, [pc, #652]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004920:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004928:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800492c:	4a9f      	ldr	r2, [pc, #636]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800492e:	430b      	orrs	r3, r1
 8004930:	6593      	str	r3, [r2, #88]	@ 0x58
 8004932:	e003      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004948:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004956:	460b      	mov	r3, r1
 8004958:	4313      	orrs	r3, r2
 800495a:	d037      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800495c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004966:	d00e      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800496c:	d816      	bhi.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004976:	d111      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004978:	4b8c      	ldr	r3, [pc, #560]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	4a8b      	ldr	r2, [pc, #556]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800497e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004984:	e00f      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498a:	3308      	adds	r3, #8
 800498c:	2101      	movs	r1, #1
 800498e:	4618      	mov	r0, r3
 8004990:	f002 f81e 	bl	80069d0 <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800499a:	e004      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049a2:	e000      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80049a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049ae:	4b7f      	ldr	r3, [pc, #508]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049bc:	4a7b      	ldr	r2, [pc, #492]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049be:	430b      	orrs	r3, r1
 80049c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80049c2:	e003      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80049d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80049e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4313      	orrs	r3, r2
 80049ea:	d039      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80049ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d81c      	bhi.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80049f6:	a201      	add	r2, pc, #4	@ (adr r2, 80049fc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a39 	.word	0x08004a39
 8004a00:	08004a0d 	.word	0x08004a0d
 8004a04:	08004a1b 	.word	0x08004a1b
 8004a08:	08004a39 	.word	0x08004a39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0c:	4b67      	ldr	r3, [pc, #412]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	4a66      	ldr	r2, [pc, #408]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a18:	e00f      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1e:	3308      	adds	r3, #8
 8004a20:	2102      	movs	r1, #2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 ffd4 	bl	80069d0 <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a2e:	e004      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a36:	e000      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a42:	4b5a      	ldr	r3, [pc, #360]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a46:	f023 0103 	bic.w	r1, r3, #3
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a50:	4a56      	ldr	r2, [pc, #344]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a52:	430b      	orrs	r3, r1
 8004a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a56:	e003      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f000 809f 	beq.w	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a82:	4b4b      	ldr	r3, [pc, #300]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a4a      	ldr	r2, [pc, #296]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a8e:	f7fc fcb7 	bl	8001400 <HAL_GetTick>
 8004a92:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a96:	e00b      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a98:	f7fc fcb2 	bl	8001400 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b64      	cmp	r3, #100	@ 0x64
 8004aa6:	d903      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aae:	e005      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0ed      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d179      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ac4:	4b39      	ldr	r3, [pc, #228]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ac6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004acc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ad0:	4053      	eors	r3, r2
 8004ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d015      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ada:	4b34      	ldr	r3, [pc, #208]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ae6:	4b31      	ldr	r3, [pc, #196]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aea:	4a30      	ldr	r2, [pc, #192]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004af2:	4b2e      	ldr	r3, [pc, #184]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af6:	4a2d      	ldr	r2, [pc, #180]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004afc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004afe:	4a2b      	ldr	r2, [pc, #172]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b04:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b12:	d118      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fc fc74 	bl	8001400 <HAL_GetTick>
 8004b18:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b1c:	e00d      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1e:	f7fc fc6f 	bl	8001400 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004b28:	1ad2      	subs	r2, r2, r3
 8004b2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d903      	bls.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004b38:	e005      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0eb      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d129      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b5e:	d10e      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004b60:	4b12      	ldr	r3, [pc, #72]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b70:	091a      	lsrs	r2, r3, #4
 8004b72:	4b10      	ldr	r3, [pc, #64]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	4a0d      	ldr	r2, [pc, #52]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6113      	str	r3, [r2, #16]
 8004b7c:	e005      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b88:	6113      	str	r3, [r2, #16]
 8004b8a:	4b08      	ldr	r3, [pc, #32]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b8c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9a:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba0:	e00e      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004baa:	e009      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004bac:	58024400 	.word	0x58024400
 8004bb0:	58024800 	.word	0x58024800
 8004bb4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f002 0301 	and.w	r3, r2, #1
 8004bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f000 8089 	beq.w	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004be8:	2b28      	cmp	r3, #40	@ 0x28
 8004bea:	d86b      	bhi.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004bec:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004ccd 	.word	0x08004ccd
 8004bf8:	08004cc5 	.word	0x08004cc5
 8004bfc:	08004cc5 	.word	0x08004cc5
 8004c00:	08004cc5 	.word	0x08004cc5
 8004c04:	08004cc5 	.word	0x08004cc5
 8004c08:	08004cc5 	.word	0x08004cc5
 8004c0c:	08004cc5 	.word	0x08004cc5
 8004c10:	08004cc5 	.word	0x08004cc5
 8004c14:	08004c99 	.word	0x08004c99
 8004c18:	08004cc5 	.word	0x08004cc5
 8004c1c:	08004cc5 	.word	0x08004cc5
 8004c20:	08004cc5 	.word	0x08004cc5
 8004c24:	08004cc5 	.word	0x08004cc5
 8004c28:	08004cc5 	.word	0x08004cc5
 8004c2c:	08004cc5 	.word	0x08004cc5
 8004c30:	08004cc5 	.word	0x08004cc5
 8004c34:	08004caf 	.word	0x08004caf
 8004c38:	08004cc5 	.word	0x08004cc5
 8004c3c:	08004cc5 	.word	0x08004cc5
 8004c40:	08004cc5 	.word	0x08004cc5
 8004c44:	08004cc5 	.word	0x08004cc5
 8004c48:	08004cc5 	.word	0x08004cc5
 8004c4c:	08004cc5 	.word	0x08004cc5
 8004c50:	08004cc5 	.word	0x08004cc5
 8004c54:	08004ccd 	.word	0x08004ccd
 8004c58:	08004cc5 	.word	0x08004cc5
 8004c5c:	08004cc5 	.word	0x08004cc5
 8004c60:	08004cc5 	.word	0x08004cc5
 8004c64:	08004cc5 	.word	0x08004cc5
 8004c68:	08004cc5 	.word	0x08004cc5
 8004c6c:	08004cc5 	.word	0x08004cc5
 8004c70:	08004cc5 	.word	0x08004cc5
 8004c74:	08004ccd 	.word	0x08004ccd
 8004c78:	08004cc5 	.word	0x08004cc5
 8004c7c:	08004cc5 	.word	0x08004cc5
 8004c80:	08004cc5 	.word	0x08004cc5
 8004c84:	08004cc5 	.word	0x08004cc5
 8004c88:	08004cc5 	.word	0x08004cc5
 8004c8c:	08004cc5 	.word	0x08004cc5
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004ccd 	.word	0x08004ccd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f001 fe95 	bl	80069d0 <RCCEx_PLL2_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cac:	e00f      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	3328      	adds	r3, #40	@ 0x28
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 ff3c 	bl	8006b34 <RCCEx_PLL3_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004cc2:	e004      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cca:	e000      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004cd6:	4bbf      	ldr	r3, [pc, #764]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cda:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ce4:	4abb      	ldr	r2, [pc, #748]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cea:	e003      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f002 0302 	and.w	r3, r2, #2
 8004d00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d04:	2300      	movs	r3, #0
 8004d06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d041      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d824      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d24 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d71 	.word	0x08004d71
 8004d28:	08004d3d 	.word	0x08004d3d
 8004d2c:	08004d53 	.word	0x08004d53
 8004d30:	08004d71 	.word	0x08004d71
 8004d34:	08004d71 	.word	0x08004d71
 8004d38:	08004d71 	.word	0x08004d71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d40:	3308      	adds	r3, #8
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 fe43 	bl	80069d0 <RCCEx_PLL2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d50:	e00f      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d56:	3328      	adds	r3, #40	@ 0x28
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 feea 	bl	8006b34 <RCCEx_PLL3_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d66:	e004      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d6e:	e000      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d7a:	4b96      	ldr	r3, [pc, #600]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7e:	f023 0107 	bic.w	r1, r3, #7
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d88:	4a92      	ldr	r2, [pc, #584]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d8e:	e003      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f002 0304 	and.w	r3, r2, #4
 8004da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4313      	orrs	r3, r2
 8004db6:	d044      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dc0:	2b05      	cmp	r3, #5
 8004dc2:	d825      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004de5 	.word	0x08004de5
 8004dd4:	08004dfb 	.word	0x08004dfb
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e19 	.word	0x08004e19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de8:	3308      	adds	r3, #8
 8004dea:	2101      	movs	r1, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fdef 	bl	80069d0 <RCCEx_PLL2_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004df8:	e00f      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	3328      	adds	r3, #40	@ 0x28
 8004e00:	2101      	movs	r1, #1
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 fe96 	bl	8006b34 <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e0e:	e004      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e16:	e000      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e22:	4b6c      	ldr	r3, [pc, #432]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e26:	f023 0107 	bic.w	r1, r3, #7
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e32:	4a68      	ldr	r2, [pc, #416]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e38:	e003      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	f002 0320 	and.w	r3, r2, #32
 8004e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e52:	2300      	movs	r3, #0
 8004e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	d055      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e6e:	d033      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e74:	d82c      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7a:	d02f      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e80:	d826      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e86:	d02b      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004e88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e8c:	d820      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e92:	d012      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e98:	d81a      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d022      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ea2:	d115      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 fd8f 	bl	80069d0 <RCCEx_PLL2_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004eb8:	e015      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebe:	3328      	adds	r3, #40	@ 0x28
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fe36 	bl	8006b34 <RCCEx_PLL3_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ed6:	e006      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ed8:	bf00      	nop
 8004eda:	e004      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004edc:	bf00      	nop
 8004ede:	e002      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ee0:	bf00      	nop
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eee:	4b39      	ldr	r3, [pc, #228]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efe:	4a35      	ldr	r2, [pc, #212]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f04:	e003      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	d058      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f3a:	d033      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004f3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004f40:	d82c      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f46:	d02f      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4c:	d826      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f52:	d02b      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004f54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f58:	d820      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f5e:	d012      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f64:	d81a      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d022      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d115      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f74:	3308      	adds	r3, #8
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 fd29 	bl	80069d0 <RCCEx_PLL2_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f84:	e015      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8a:	3328      	adds	r3, #40	@ 0x28
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f001 fdd0 	bl	8006b34 <RCCEx_PLL3_Config>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fa2:	e006      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004fa4:	bf00      	nop
 8004fa6:	e004      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004fa8:	bf00      	nop
 8004faa:	e002      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004fac:	bf00      	nop
 8004fae:	e000      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10e      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fba:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fca:	4a02      	ldr	r2, [pc, #8]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fd0:	e006      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004fd2:	bf00      	nop
 8004fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ff6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	d055      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005004:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005008:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800500c:	d033      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800500e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005012:	d82c      	bhi.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005018:	d02f      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800501a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800501e:	d826      	bhi.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005020:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005024:	d02b      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005026:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800502a:	d820      	bhi.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800502c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005030:	d012      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005036:	d81a      	bhi.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d022      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800503c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005040:	d115      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005046:	3308      	adds	r3, #8
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f001 fcc0 	bl	80069d0 <RCCEx_PLL2_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005056:	e015      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505c:	3328      	adds	r3, #40	@ 0x28
 800505e:	2102      	movs	r1, #2
 8005060:	4618      	mov	r0, r3
 8005062:	f001 fd67 	bl	8006b34 <RCCEx_PLL3_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800506c:	e00a      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005074:	e006      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005076:	bf00      	nop
 8005078:	e004      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800508c:	4ba1      	ldr	r3, [pc, #644]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800508e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005090:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800509c:	4a9d      	ldr	r2, [pc, #628]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800509e:	430b      	orrs	r3, r1
 80050a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80050a2:	e003      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	f002 0308 	and.w	r3, r2, #8
 80050b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050bc:	2300      	movs	r3, #0
 80050be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80050c6:	460b      	mov	r3, r1
 80050c8:	4313      	orrs	r3, r2
 80050ca:	d01e      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80050cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050de:	3328      	adds	r3, #40	@ 0x28
 80050e0:	2102      	movs	r1, #2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 fd26 	bl	8006b34 <RCCEx_PLL3_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80050f4:	4b87      	ldr	r3, [pc, #540]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005104:	4a83      	ldr	r2, [pc, #524]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005106:	430b      	orrs	r3, r1
 8005108:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800510a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f002 0310 	and.w	r3, r2, #16
 8005116:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800511a:	2300      	movs	r3, #0
 800511c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005120:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005124:	460b      	mov	r3, r1
 8005126:	4313      	orrs	r3, r2
 8005128:	d01e      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800512a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005136:	d10c      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513c:	3328      	adds	r3, #40	@ 0x28
 800513e:	2102      	movs	r1, #2
 8005140:	4618      	mov	r0, r3
 8005142:	f001 fcf7 	bl	8006b34 <RCCEx_PLL3_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005152:	4b70      	ldr	r3, [pc, #448]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005156:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005162:	4a6c      	ldr	r2, [pc, #432]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005164:	430b      	orrs	r3, r1
 8005166:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005178:	2300      	movs	r3, #0
 800517a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800517e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005182:	460b      	mov	r3, r1
 8005184:	4313      	orrs	r3, r2
 8005186:	d03e      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005190:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005194:	d022      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800519a:	d81b      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a4:	d00b      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80051a6:	e015      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ac:	3308      	adds	r3, #8
 80051ae:	2100      	movs	r1, #0
 80051b0:	4618      	mov	r0, r3
 80051b2:	f001 fc0d 	bl	80069d0 <RCCEx_PLL2_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051bc:	e00f      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c2:	3328      	adds	r3, #40	@ 0x28
 80051c4:	2102      	movs	r1, #2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fcb4 	bl	8006b34 <RCCEx_PLL3_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80051d2:	e004      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051da:	e000      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80051dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051f6:	4a47      	ldr	r2, [pc, #284]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80051fc:	e003      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005212:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005214:	2300      	movs	r3, #0
 8005216:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005218:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800521c:	460b      	mov	r3, r1
 800521e:	4313      	orrs	r3, r2
 8005220:	d03b      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800522e:	d01f      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005230:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005234:	d818      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800523a:	d003      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800523c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005240:	d007      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005242:	e011      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005244:	4b33      	ldr	r3, [pc, #204]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	4a32      	ldr	r2, [pc, #200]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800524a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800524e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005250:	e00f      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005256:	3328      	adds	r3, #40	@ 0x28
 8005258:	2101      	movs	r1, #1
 800525a:	4618      	mov	r0, r3
 800525c:	f001 fc6a 	bl	8006b34 <RCCEx_PLL3_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005266:	e004      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800526e:	e000      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800527a:	4b26      	ldr	r3, [pc, #152]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	4a22      	ldr	r2, [pc, #136]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800528c:	430b      	orrs	r3, r1
 800528e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005290:	e003      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80052a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80052a8:	2300      	movs	r3, #0
 80052aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80052ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80052b0:	460b      	mov	r3, r1
 80052b2:	4313      	orrs	r3, r2
 80052b4:	d034      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c4:	d007      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80052c6:	e011      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c8:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052cc:	4a11      	ldr	r2, [pc, #68]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80052d4:	e00e      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052da:	3308      	adds	r3, #8
 80052dc:	2102      	movs	r1, #2
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 fb76 	bl	80069d0 <RCCEx_PLL2_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80052ea:	e003      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80052fc:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005300:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530a:	4a02      	ldr	r2, [pc, #8]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800530c:	430b      	orrs	r3, r1
 800530e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005310:	e006      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005312:	bf00      	nop
 8005314:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800531c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800532c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800532e:	2300      	movs	r3, #0
 8005330:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005332:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005336:	460b      	mov	r3, r1
 8005338:	4313      	orrs	r3, r2
 800533a:	d00c      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800533c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005340:	3328      	adds	r3, #40	@ 0x28
 8005342:	2102      	movs	r1, #2
 8005344:	4618      	mov	r0, r3
 8005346:	f001 fbf5 	bl	8006b34 <RCCEx_PLL3_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005362:	663b      	str	r3, [r7, #96]	@ 0x60
 8005364:	2300      	movs	r3, #0
 8005366:	667b      	str	r3, [r7, #100]	@ 0x64
 8005368:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800536c:	460b      	mov	r3, r1
 800536e:	4313      	orrs	r3, r2
 8005370:	d038      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800537a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800537e:	d018      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005380:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005384:	d811      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538a:	d014      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800538c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005390:	d80b      	bhi.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d011      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800539a:	d106      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539c:	4bc3      	ldr	r3, [pc, #780]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	4ac2      	ldr	r2, [pc, #776]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80053a8:	e008      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053b0:	e004      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80053b2:	bf00      	nop
 80053b4:	e002      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80053b6:	bf00      	nop
 80053b8:	e000      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80053ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053c4:	4bb9      	ldr	r3, [pc, #740]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053d4:	4ab5      	ldr	r2, [pc, #724]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80053d6:	430b      	orrs	r3, r1
 80053d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80053da:	e003      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80053f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053f2:	2300      	movs	r3, #0
 80053f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80053fa:	460b      	mov	r3, r1
 80053fc:	4313      	orrs	r3, r2
 80053fe:	d009      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005400:	4baa      	ldr	r3, [pc, #680]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005404:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800540e:	4aa7      	ldr	r2, [pc, #668]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005410:	430b      	orrs	r3, r1
 8005412:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005420:	653b      	str	r3, [r7, #80]	@ 0x50
 8005422:	2300      	movs	r3, #0
 8005424:	657b      	str	r3, [r7, #84]	@ 0x54
 8005426:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800542a:	460b      	mov	r3, r1
 800542c:	4313      	orrs	r3, r2
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005430:	4b9e      	ldr	r3, [pc, #632]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005440:	4a9a      	ldr	r2, [pc, #616]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005442:	430b      	orrs	r3, r1
 8005444:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005452:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005454:	2300      	movs	r3, #0
 8005456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005458:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800545c:	460b      	mov	r3, r1
 800545e:	4313      	orrs	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005462:	4b92      	ldr	r3, [pc, #584]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005466:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005470:	4a8e      	ldr	r2, [pc, #568]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005472:	430b      	orrs	r3, r1
 8005474:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005482:	643b      	str	r3, [r7, #64]	@ 0x40
 8005484:	2300      	movs	r3, #0
 8005486:	647b      	str	r3, [r7, #68]	@ 0x44
 8005488:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800548c:	460b      	mov	r3, r1
 800548e:	4313      	orrs	r3, r2
 8005490:	d00e      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005492:	4b86      	ldr	r3, [pc, #536]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	4a85      	ldr	r2, [pc, #532]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005498:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800549c:	6113      	str	r3, [r2, #16]
 800549e:	4b83      	ldr	r3, [pc, #524]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054a0:	6919      	ldr	r1, [r3, #16]
 80054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054aa:	4a80      	ldr	r2, [pc, #512]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80054bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054be:	2300      	movs	r3, #0
 80054c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80054c6:	460b      	mov	r3, r1
 80054c8:	4313      	orrs	r3, r2
 80054ca:	d009      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80054cc:	4b77      	ldr	r3, [pc, #476]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054da:	4a74      	ldr	r2, [pc, #464]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80054ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ee:	2300      	movs	r3, #0
 80054f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80054f6:	460b      	mov	r3, r1
 80054f8:	4313      	orrs	r3, r2
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054fc:	4b6b      	ldr	r3, [pc, #428]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005500:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800550c:	4a67      	ldr	r2, [pc, #412]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800550e:	430b      	orrs	r3, r1
 8005510:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	2100      	movs	r1, #0
 800551c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005524:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005528:	460b      	mov	r3, r1
 800552a:	4313      	orrs	r3, r2
 800552c:	d011      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005532:	3308      	adds	r3, #8
 8005534:	2100      	movs	r1, #0
 8005536:	4618      	mov	r0, r3
 8005538:	f001 fa4a 	bl	80069d0 <RCCEx_PLL2_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800554e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	2100      	movs	r1, #0
 800555c:	6239      	str	r1, [r7, #32]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
 8005564:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005568:	460b      	mov	r3, r1
 800556a:	4313      	orrs	r3, r2
 800556c:	d011      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005572:	3308      	adds	r3, #8
 8005574:	2101      	movs	r1, #1
 8005576:	4618      	mov	r0, r3
 8005578:	f001 fa2a 	bl	80069d0 <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800558e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	2100      	movs	r1, #0
 800559c:	61b9      	str	r1, [r7, #24]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80055a8:	460b      	mov	r3, r1
 80055aa:	4313      	orrs	r3, r2
 80055ac:	d011      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b2:	3308      	adds	r3, #8
 80055b4:	2102      	movs	r1, #2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 fa0a 	bl	80069d0 <RCCEx_PLL2_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80055c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	2100      	movs	r1, #0
 80055dc:	6139      	str	r1, [r7, #16]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80055e8:	460b      	mov	r3, r1
 80055ea:	4313      	orrs	r3, r2
 80055ec:	d011      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	3328      	adds	r3, #40	@ 0x28
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 fa9c 	bl	8006b34 <RCCEx_PLL3_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800560e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	2100      	movs	r1, #0
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005628:	460b      	mov	r3, r1
 800562a:	4313      	orrs	r3, r2
 800562c:	d011      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005632:	3328      	adds	r3, #40	@ 0x28
 8005634:	2101      	movs	r1, #1
 8005636:	4618      	mov	r0, r3
 8005638:	f001 fa7c 	bl	8006b34 <RCCEx_PLL3_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800564e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	2100      	movs	r1, #0
 800565c:	6039      	str	r1, [r7, #0]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	607b      	str	r3, [r7, #4]
 8005664:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005668:	460b      	mov	r3, r1
 800566a:	4313      	orrs	r3, r2
 800566c:	d011      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800566e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005672:	3328      	adds	r3, #40	@ 0x28
 8005674:	2102      	movs	r1, #2
 8005676:	4618      	mov	r0, r3
 8005678:	f001 fa5c 	bl	8006b34 <RCCEx_PLL3_Config>
 800567c:	4603      	mov	r3, r0
 800567e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800568e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005692:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80056a6:	46bd      	mov	sp, r7
 80056a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ac:	58024400 	.word	0x58024400

080056b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b090      	sub	sp, #64	@ 0x40
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80056ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056be:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80056c2:	430b      	orrs	r3, r1
 80056c4:	f040 8094 	bne.w	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80056c8:	4b9e      	ldr	r3, [pc, #632]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	f200 8087 	bhi.w	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80056da:	a201      	add	r2, pc, #4	@ (adr r2, 80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	080056f5 	.word	0x080056f5
 80056e4:	0800571d 	.word	0x0800571d
 80056e8:	08005745 	.word	0x08005745
 80056ec:	080057e1 	.word	0x080057e1
 80056f0:	0800576d 	.word	0x0800576d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056f4:	4b93      	ldr	r3, [pc, #588]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005700:	d108      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005706:	4618      	mov	r0, r3
 8005708:	f001 f810 	bl	800672c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005710:	f000 bd45 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005718:	f000 bd41 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800571c:	4b89      	ldr	r3, [pc, #548]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005728:	d108      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800572a:	f107 0318 	add.w	r3, r7, #24
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fd54 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005738:	f000 bd31 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005740:	f000 bd2d 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005744:	4b7f      	ldr	r3, [pc, #508]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800574c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005750:	d108      	bne.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005752:	f107 030c 	add.w	r3, r7, #12
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fe94 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005760:	f000 bd1d 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005768:	f000 bd19 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800576c:	4b75      	ldr	r3, [pc, #468]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800576e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005770:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005774:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005776:	4b73      	ldr	r3, [pc, #460]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b04      	cmp	r3, #4
 8005780:	d10c      	bne.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005788:	4b6e      	ldr	r3, [pc, #440]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	08db      	lsrs	r3, r3, #3
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	4a6d      	ldr	r2, [pc, #436]	@ (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800579a:	e01f      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800579c:	4b69      	ldr	r3, [pc, #420]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a8:	d106      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80057aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057b0:	d102      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057b2:	4b66      	ldr	r3, [pc, #408]	@ (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b6:	e011      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057b8:	4b62      	ldr	r3, [pc, #392]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057c4:	d106      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80057c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057cc:	d102      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80057ce:	4b60      	ldr	r3, [pc, #384]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80057d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057d2:	e003      	b.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80057d8:	f000 bce1 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80057dc:	f000 bcdf 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80057e0:	4b5c      	ldr	r3, [pc, #368]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80057e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e4:	f000 bcdb 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ec:	f000 bcd7 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80057f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80057f8:	430b      	orrs	r3, r1
 80057fa:	f040 80ad 	bne.w	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80057fe:	4b51      	ldr	r3, [pc, #324]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005802:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005806:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800580e:	d056      	beq.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005816:	f200 8090 	bhi.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581c:	2bc0      	cmp	r3, #192	@ 0xc0
 800581e:	f000 8088 	beq.w	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	2bc0      	cmp	r3, #192	@ 0xc0
 8005826:	f200 8088 	bhi.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	2b80      	cmp	r3, #128	@ 0x80
 800582e:	d032      	beq.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	2b80      	cmp	r3, #128	@ 0x80
 8005834:	f200 8081 	bhi.w	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	2b40      	cmp	r3, #64	@ 0x40
 8005842:	d014      	beq.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005844:	e079      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005846:	4b3f      	ldr	r3, [pc, #252]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005852:	d108      	bne.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005858:	4618      	mov	r0, r3
 800585a:	f000 ff67 	bl	800672c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005862:	f000 bc9c 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800586a:	f000 bc98 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800586e:	4b35      	ldr	r3, [pc, #212]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800587a:	d108      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800587c:	f107 0318 	add.w	r3, r7, #24
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fcab 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800588a:	f000 bc88 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005892:	f000 bc84 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005896:	4b2b      	ldr	r3, [pc, #172]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800589e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058a2:	d108      	bne.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fdeb 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058b2:	f000 bc74 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058ba:	f000 bc70 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058be:	4b21      	ldr	r3, [pc, #132]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d10c      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80058d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058da:	4b1a      	ldr	r3, [pc, #104]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	08db      	lsrs	r3, r3, #3
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	4a18      	ldr	r2, [pc, #96]	@ (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80058e6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058ec:	e01f      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058ee:	4b15      	ldr	r3, [pc, #84]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058fa:	d106      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80058fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005902:	d102      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005904:	4b11      	ldr	r3, [pc, #68]	@ (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005908:	e011      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800590a:	4b0e      	ldr	r3, [pc, #56]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005912:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005916:	d106      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800591e:	d102      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005924:	e003      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800592a:	f000 bc38 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800592e:	f000 bc36 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005932:	4b08      	ldr	r3, [pc, #32]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005936:	f000 bc32 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800593e:	f000 bc2e 	b.w	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005942:	bf00      	nop
 8005944:	58024400 	.word	0x58024400
 8005948:	03d09000 	.word	0x03d09000
 800594c:	003d0900 	.word	0x003d0900
 8005950:	017d7840 	.word	0x017d7840
 8005954:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800595c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005960:	430b      	orrs	r3, r1
 8005962:	f040 809c 	bne.w	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005966:	4b9e      	ldr	r3, [pc, #632]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800596e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005972:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005976:	d054      	beq.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800597e:	f200 808b 	bhi.w	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005988:	f000 8083 	beq.w	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005992:	f200 8081 	bhi.w	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800599c:	d02f      	beq.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800599e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059a4:	d878      	bhi.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059b2:	d012      	beq.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80059b4:	e070      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059b6:	4b8a      	ldr	r3, [pc, #552]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059c2:	d107      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 feaf 	bl	800672c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059d2:	e3e4      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059d8:	e3e1      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059da:	4b81      	ldr	r3, [pc, #516]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059e6:	d107      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059e8:	f107 0318 	add.w	r3, r7, #24
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fbf5 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059f6:	e3d2      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059fc:	e3cf      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059fe:	4b78      	ldr	r3, [pc, #480]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a0a:	d107      	bne.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a0c:	f107 030c 	add.w	r3, r7, #12
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fd37 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a1a:	e3c0      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a20:	e3bd      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a22:	4b6f      	ldr	r3, [pc, #444]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a2c:	4b6c      	ldr	r3, [pc, #432]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d10c      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d109      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a3e:	4b68      	ldr	r3, [pc, #416]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	08db      	lsrs	r3, r3, #3
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	4a66      	ldr	r2, [pc, #408]	@ (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a50:	e01e      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a52:	4b63      	ldr	r3, [pc, #396]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5e:	d106      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a66:	d102      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a68:	4b5f      	ldr	r3, [pc, #380]	@ (8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a6c:	e010      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a7a:	d106      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a82:	d102      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a84:	4b59      	ldr	r3, [pc, #356]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a88:	e002      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005a8e:	e386      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a90:	e385      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a92:	4b57      	ldr	r3, [pc, #348]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a96:	e382      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a9c:	e37f      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aa2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	f040 80a7 	bne.w	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005aac:	4b4c      	ldr	r3, [pc, #304]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005ab4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005abc:	d055      	beq.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ac4:	f200 8096 	bhi.w	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ace:	f000 8084 	beq.w	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ad8:	f200 808c 	bhi.w	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ae2:	d030      	beq.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005aea:	f200 8083 	bhi.w	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005afa:	d012      	beq.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005afc:	e07a      	b.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005afe:	4b38      	ldr	r3, [pc, #224]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b0a:	d107      	bne.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fe0b 	bl	800672c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b1a:	e340      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b20:	e33d      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b22:	4b2f      	ldr	r3, [pc, #188]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b30:	f107 0318 	add.w	r3, r7, #24
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fb51 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b3e:	e32e      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b44:	e32b      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b46:	4b26      	ldr	r3, [pc, #152]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b52:	d107      	bne.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b54:	f107 030c 	add.w	r3, r7, #12
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fc93 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b62:	e31c      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b68:	e319      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b74:	4b1a      	ldr	r3, [pc, #104]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d10c      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b86:	4b16      	ldr	r3, [pc, #88]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	08db      	lsrs	r3, r3, #3
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	4a14      	ldr	r2, [pc, #80]	@ (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005b92:	fa22 f303 	lsr.w	r3, r2, r3
 8005b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b98:	e01e      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b9a:	4b11      	ldr	r3, [pc, #68]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba6:	d106      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005baa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bae:	d102      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bb4:	e010      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bc2:	d106      	bne.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bca:	d102      	bne.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005bcc:	4b07      	ldr	r3, [pc, #28]	@ (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bd0:	e002      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005bd6:	e2e2      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005bd8:	e2e1      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005bda:	4b05      	ldr	r3, [pc, #20]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bde:	e2de      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005be0:	58024400 	.word	0x58024400
 8005be4:	03d09000 	.word	0x03d09000
 8005be8:	003d0900 	.word	0x003d0900
 8005bec:	017d7840 	.word	0x017d7840
 8005bf0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf8:	e2d1      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bfe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005c02:	430b      	orrs	r3, r1
 8005c04:	f040 809c 	bne.w	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005c08:	4b93      	ldr	r3, [pc, #588]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005c10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c18:	d054      	beq.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c20:	f200 808b 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c2a:	f000 8083 	beq.w	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c34:	f200 8081 	bhi.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c3e:	d02f      	beq.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c46:	d878      	bhi.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d004      	beq.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c54:	d012      	beq.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005c56:	e070      	b.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c58:	4b7f      	ldr	r3, [pc, #508]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c64:	d107      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fd5e 	bl	800672c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c74:	e293      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c7a:	e290      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c7c:	4b76      	ldr	r3, [pc, #472]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c88:	d107      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c8a:	f107 0318 	add.w	r3, r7, #24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 faa4 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c98:	e281      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c9e:	e27e      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ca0:	4b6d      	ldr	r3, [pc, #436]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cac:	d107      	bne.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cae:	f107 030c 	add.w	r3, r7, #12
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fbe6 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cbc:	e26f      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cc2:	e26c      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cc4:	4b64      	ldr	r3, [pc, #400]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ccc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cce:	4b62      	ldr	r3, [pc, #392]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d109      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	08db      	lsrs	r3, r3, #3
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	4a5c      	ldr	r2, [pc, #368]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cf2:	e01e      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cf4:	4b58      	ldr	r3, [pc, #352]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d00:	d106      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d08:	d102      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d0a:	4b55      	ldr	r3, [pc, #340]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d0e:	e010      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d10:	4b51      	ldr	r3, [pc, #324]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d1c:	d106      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d24:	d102      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d26:	4b4f      	ldr	r3, [pc, #316]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d2a:	e002      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005d30:	e235      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d32:	e234      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d34:	4b4c      	ldr	r3, [pc, #304]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d38:	e231      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d3e:	e22e      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d44:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	f040 808f 	bne.w	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005d4e:	4b42      	ldr	r3, [pc, #264]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d52:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005d56:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d5e:	d06b      	beq.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d66:	d874      	bhi.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d6e:	d056      	beq.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d76:	d86c      	bhi.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d7e:	d03b      	beq.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d86:	d864      	bhi.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d8e:	d021      	beq.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d96:	d85c      	bhi.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d004      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da4:	d004      	beq.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005da6:	e054      	b.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005da8:	f7fe fa4c 	bl	8004244 <HAL_RCC_GetPCLK1Freq>
 8005dac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005dae:	e1f6      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005db0:	4b29      	ldr	r3, [pc, #164]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005db8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dbc:	d107      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dbe:	f107 0318 	add.w	r3, r7, #24
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fa0a 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dcc:	e1e7      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dd2:	e1e4      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dd4:	4b20      	ldr	r3, [pc, #128]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005de0:	d107      	bne.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005de2:	f107 030c 	add.w	r3, r7, #12
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fb4c 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005df0:	e1d5      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df6:	e1d2      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005df8:	4b17      	ldr	r3, [pc, #92]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d109      	bne.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e04:	4b14      	ldr	r3, [pc, #80]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	08db      	lsrs	r3, r3, #3
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	4a13      	ldr	r2, [pc, #76]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
 8005e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e16:	e1c2      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e1c:	e1bf      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e2a:	d102      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e30:	e1b5      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e36:	e1b2      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e38:	4b07      	ldr	r3, [pc, #28]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e44:	d102      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005e46:	4b07      	ldr	r3, [pc, #28]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e4a:	e1a8      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e50:	e1a5      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e56:	e1a2      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e58:	58024400 	.word	0x58024400
 8005e5c:	03d09000 	.word	0x03d09000
 8005e60:	003d0900 	.word	0x003d0900
 8005e64:	017d7840 	.word	0x017d7840
 8005e68:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e70:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005e74:	430b      	orrs	r3, r1
 8005e76:	d173      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e78:	4b9c      	ldr	r3, [pc, #624]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e88:	d02f      	beq.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e90:	d863      	bhi.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e9e:	d012      	beq.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005ea0:	e05b      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ea2:	4b92      	ldr	r3, [pc, #584]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eb0:	f107 0318 	add.w	r3, r7, #24
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 f991 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ebe:	e16e      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec4:	e16b      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ec6:	4b89      	ldr	r3, [pc, #548]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ed2:	d107      	bne.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ed4:	f107 030c 	add.w	r3, r7, #12
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fad3 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ee2:	e15c      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee8:	e159      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005eea:	4b80      	ldr	r3, [pc, #512]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ef2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d10c      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f06:	4b79      	ldr	r3, [pc, #484]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	08db      	lsrs	r3, r3, #3
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	4a77      	ldr	r2, [pc, #476]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005f12:	fa22 f303 	lsr.w	r3, r2, r3
 8005f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f18:	e01e      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f1a:	4b74      	ldr	r3, [pc, #464]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f26:	d106      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f2e:	d102      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f30:	4b70      	ldr	r3, [pc, #448]	@ (80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f34:	e010      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f36:	4b6d      	ldr	r3, [pc, #436]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f42:	d106      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f4a:	d102      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f50:	e002      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005f56:	e122      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f58:	e121      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f5e:	e11e      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f64:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	d133      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005f6c:	4b5f      	ldr	r3, [pc, #380]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f74:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d004      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f82:	d012      	beq.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005f84:	e023      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f86:	4b59      	ldr	r3, [pc, #356]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f92:	d107      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fbc7 	bl	800672c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fa2:	e0fc      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa8:	e0f9      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005faa:	4b50      	ldr	r3, [pc, #320]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fb6:	d107      	bne.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fb8:	f107 0318 	add.w	r3, r7, #24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 f90d 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fc6:	e0ea      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fcc:	e0e7      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fd2:	e0e4      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fd8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	f040 808d 	bne.w	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005fe2:	4b42      	ldr	r3, [pc, #264]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005fea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ff2:	d06b      	beq.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ffa:	d874      	bhi.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006002:	d056      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800600a:	d86c      	bhi.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006012:	d03b      	beq.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006016:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800601a:	d864      	bhi.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800601c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006022:	d021      	beq.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800602a:	d85c      	bhi.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800602c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602e:	2b00      	cmp	r3, #0
 8006030:	d004      	beq.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006038:	d004      	beq.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800603a:	e054      	b.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800603c:	f000 f8b8 	bl	80061b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006040:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006042:	e0ac      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006044:	4b29      	ldr	r3, [pc, #164]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800604c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006050:	d107      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006052:	f107 0318 	add.w	r3, r7, #24
 8006056:	4618      	mov	r0, r3
 8006058:	f000 f8c0 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006060:	e09d      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006066:	e09a      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006068:	4b20      	ldr	r3, [pc, #128]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006074:	d107      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006076:	f107 030c 	add.w	r3, r7, #12
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fa02 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006084:	e08b      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800608a:	e088      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800608c:	4b17      	ldr	r3, [pc, #92]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b04      	cmp	r3, #4
 8006096:	d109      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006098:	4b14      	ldr	r3, [pc, #80]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	08db      	lsrs	r3, r3, #3
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	4a13      	ldr	r2, [pc, #76]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
 80060a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060aa:	e078      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060b0:	e075      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80060b2:	4b0e      	ldr	r3, [pc, #56]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060be:	d102      	bne.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80060c0:	4b0c      	ldr	r3, [pc, #48]	@ (80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80060c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060c4:	e06b      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ca:	e068      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060cc:	4b07      	ldr	r3, [pc, #28]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060d8:	d102      	bne.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80060da:	4b07      	ldr	r3, [pc, #28]	@ (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80060dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060de:	e05e      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e4:	e05b      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ea:	e058      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80060ec:	58024400 	.word	0x58024400
 80060f0:	03d09000 	.word	0x03d09000
 80060f4:	003d0900 	.word	0x003d0900
 80060f8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80060fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006100:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006104:	430b      	orrs	r3, r1
 8006106:	d148      	bne.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006108:	4b27      	ldr	r3, [pc, #156]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800610a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006110:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006118:	d02a      	beq.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800611a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006120:	d838      	bhi.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800612e:	d00d      	beq.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006130:	e030      	b.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006132:	4b1d      	ldr	r3, [pc, #116]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800613a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800613e:	d102      	bne.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006140:	4b1a      	ldr	r3, [pc, #104]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006144:	e02b      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800614a:	e028      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800614c:	4b16      	ldr	r3, [pc, #88]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006154:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006158:	d107      	bne.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800615a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fae4 	bl	800672c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006168:	e019      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800616e:	e016      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006170:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006178:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800617c:	d107      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800617e:	f107 0318 	add.w	r3, r7, #24
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f82a 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800618c:	e007      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006192:	e004      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006198:	e001      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800619e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3740      	adds	r7, #64	@ 0x40
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	58024400 	.word	0x58024400
 80061ac:	017d7840 	.word	0x017d7840

080061b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80061b4:	f7fe f816 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b06      	ldr	r3, [pc, #24]	@ (80061d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	4904      	ldr	r1, [pc, #16]	@ (80061d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80061c6:	5ccb      	ldrb	r3, [r1, r3]
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	58024400 	.word	0x58024400
 80061d8:	08008bf8 	.word	0x08008bf8

080061dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80061dc:	b480      	push	{r7}
 80061de:	b089      	sub	sp, #36	@ 0x24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061e4:	4ba1      	ldr	r3, [pc, #644]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80061ee:	4b9f      	ldr	r3, [pc, #636]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f2:	0b1b      	lsrs	r3, r3, #12
 80061f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80061fa:	4b9c      	ldr	r3, [pc, #624]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	091b      	lsrs	r3, r3, #4
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006206:	4b99      	ldr	r3, [pc, #612]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620a:	08db      	lsrs	r3, r3, #3
 800620c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	fb02 f303 	mul.w	r3, r2, r3
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8111 	beq.w	800644c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b02      	cmp	r3, #2
 800622e:	f000 8083 	beq.w	8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b02      	cmp	r3, #2
 8006236:	f200 80a1 	bhi.w	800637c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d056      	beq.n	80062f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006246:	e099      	b.n	800637c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006248:	4b88      	ldr	r3, [pc, #544]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02d      	beq.n	80062b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006254:	4b85      	ldr	r3, [pc, #532]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	08db      	lsrs	r3, r3, #3
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	4a84      	ldr	r2, [pc, #528]	@ (8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006260:	fa22 f303 	lsr.w	r3, r2, r3
 8006264:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	ee07 3a90 	vmov	s15, r3
 800626c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627e:	4b7b      	ldr	r3, [pc, #492]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006292:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80062ae:	e087      	b.n	80063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006478 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80062be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c2:	4b6a      	ldr	r3, [pc, #424]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062f2:	e065      	b.n	80063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800647c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006306:	4b59      	ldr	r3, [pc, #356]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006316:	ed97 6a03 	vldr	s12, [r7, #12]
 800631a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800631e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800632a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006336:	e043      	b.n	80063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634a:	4b48      	ldr	r3, [pc, #288]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800634c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635a:	ed97 6a03 	vldr	s12, [r7, #12]
 800635e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800637a:	e021      	b.n	80063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006386:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800647c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800638a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638e:	4b37      	ldr	r3, [pc, #220]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639e:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80063c0:	4b2a      	ldr	r3, [pc, #168]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c4:	0a5b      	lsrs	r3, r3, #9
 80063c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063da:	edd7 6a07 	vldr	s13, [r7, #28]
 80063de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e6:	ee17 2a90 	vmov	r2, s15
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80063ee:	4b1f      	ldr	r3, [pc, #124]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f2:	0c1b      	lsrs	r3, r3, #16
 80063f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063f8:	ee07 3a90 	vmov	s15, r3
 80063fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006400:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006408:	edd7 6a07 	vldr	s13, [r7, #28]
 800640c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006414:	ee17 2a90 	vmov	r2, s15
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800641c:	4b13      	ldr	r3, [pc, #76]	@ (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800641e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006420:	0e1b      	lsrs	r3, r3, #24
 8006422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006436:	edd7 6a07 	vldr	s13, [r7, #28]
 800643a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800643e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006442:	ee17 2a90 	vmov	r2, s15
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800644a:	e008      	b.n	800645e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	609a      	str	r2, [r3, #8]
}
 800645e:	bf00      	nop
 8006460:	3724      	adds	r7, #36	@ 0x24
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	58024400 	.word	0x58024400
 8006470:	03d09000 	.word	0x03d09000
 8006474:	46000000 	.word	0x46000000
 8006478:	4c742400 	.word	0x4c742400
 800647c:	4a742400 	.word	0x4a742400
 8006480:	4bbebc20 	.word	0x4bbebc20

08006484 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006484:	b480      	push	{r7}
 8006486:	b089      	sub	sp, #36	@ 0x24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800648c:	4ba1      	ldr	r3, [pc, #644]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800648e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006490:	f003 0303 	and.w	r3, r3, #3
 8006494:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006496:	4b9f      	ldr	r3, [pc, #636]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649a:	0d1b      	lsrs	r3, r3, #20
 800649c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80064a2:	4b9c      	ldr	r3, [pc, #624]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80064ae:	4b99      	ldr	r3, [pc, #612]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8111 	beq.w	80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	f000 8083 	beq.w	80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	f200 80a1 	bhi.w	8006624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d056      	beq.n	800659c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80064ee:	e099      	b.n	8006624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064f0:	4b88      	ldr	r3, [pc, #544]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d02d      	beq.n	8006558 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064fc:	4b85      	ldr	r3, [pc, #532]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	08db      	lsrs	r3, r3, #3
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	4a84      	ldr	r2, [pc, #528]	@ (8006718 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006508:	fa22 f303 	lsr.w	r3, r2, r3
 800650c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	ee07 3a90 	vmov	s15, r3
 8006514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006526:	4b7b      	ldr	r3, [pc, #492]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006536:	ed97 6a03 	vldr	s12, [r7, #12]
 800653a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800671c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800653e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800654a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006552:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006556:	e087      	b.n	8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006720 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656a:	4b6a      	ldr	r3, [pc, #424]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657a:	ed97 6a03 	vldr	s12, [r7, #12]
 800657e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800671c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800658e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800659a:	e065      	b.n	8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ae:	4b59      	ldr	r3, [pc, #356]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065be:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800671c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065de:	e043      	b.n	8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80065ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f2:	4b48      	ldr	r3, [pc, #288]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006602:	ed97 6a03 	vldr	s12, [r7, #12]
 8006606:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800671c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800660a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006622:	e021      	b.n	8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006636:	4b37      	ldr	r3, [pc, #220]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006646:	ed97 6a03 	vldr	s12, [r7, #12]
 800664a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800671c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800664e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800665a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006666:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006668:	4b2a      	ldr	r3, [pc, #168]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800666a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666c:	0a5b      	lsrs	r3, r3, #9
 800666e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800667e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006682:	edd7 6a07 	vldr	s13, [r7, #28]
 8006686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800668a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800668e:	ee17 2a90 	vmov	r2, s15
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006696:	4b1f      	ldr	r3, [pc, #124]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669a:	0c1b      	lsrs	r3, r3, #16
 800669c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80066b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066bc:	ee17 2a90 	vmov	r2, s15
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80066c4:	4b13      	ldr	r3, [pc, #76]	@ (8006714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c8:	0e1b      	lsrs	r3, r3, #24
 80066ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066de:	edd7 6a07 	vldr	s13, [r7, #28]
 80066e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ea:	ee17 2a90 	vmov	r2, s15
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80066f2:	e008      	b.n	8006706 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	609a      	str	r2, [r3, #8]
}
 8006706:	bf00      	nop
 8006708:	3724      	adds	r7, #36	@ 0x24
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	58024400 	.word	0x58024400
 8006718:	03d09000 	.word	0x03d09000
 800671c:	46000000 	.word	0x46000000
 8006720:	4c742400 	.word	0x4c742400
 8006724:	4a742400 	.word	0x4a742400
 8006728:	4bbebc20 	.word	0x4bbebc20

0800672c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800672c:	b480      	push	{r7}
 800672e:	b089      	sub	sp, #36	@ 0x24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006734:	4ba0      	ldr	r3, [pc, #640]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800673e:	4b9e      	ldr	r3, [pc, #632]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006742:	091b      	lsrs	r3, r3, #4
 8006744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006748:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800674a:	4b9b      	ldr	r3, [pc, #620]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006754:	4b98      	ldr	r3, [pc, #608]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006758:	08db      	lsrs	r3, r3, #3
 800675a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	fb02 f303 	mul.w	r3, r2, r3
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8111 	beq.w	800699a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	2b02      	cmp	r3, #2
 800677c:	f000 8083 	beq.w	8006886 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2b02      	cmp	r3, #2
 8006784:	f200 80a1 	bhi.w	80068ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d056      	beq.n	8006842 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006794:	e099      	b.n	80068ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006796:	4b88      	ldr	r3, [pc, #544]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d02d      	beq.n	80067fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067a2:	4b85      	ldr	r3, [pc, #532]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	08db      	lsrs	r3, r3, #3
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	4a83      	ldr	r2, [pc, #524]	@ (80069bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80067ae:	fa22 f303 	lsr.w	r3, r2, r3
 80067b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	ee07 3a90 	vmov	s15, r3
 80067c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067cc:	4b7a      	ldr	r3, [pc, #488]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d4:	ee07 3a90 	vmov	s15, r3
 80067d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80069c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80067fc:	e087      	b.n	800690e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	ee07 3a90 	vmov	s15, r3
 8006804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006808:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80069c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800680c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006810:	4b69      	ldr	r3, [pc, #420]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006818:	ee07 3a90 	vmov	s15, r3
 800681c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006820:	ed97 6a03 	vldr	s12, [r7, #12]
 8006824:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80069c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006830:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006840:	e065      	b.n	800690e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	ee07 3a90 	vmov	s15, r3
 8006848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80069c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006854:	4b58      	ldr	r3, [pc, #352]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006864:	ed97 6a03 	vldr	s12, [r7, #12]
 8006868:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80069c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800686c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006874:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800687c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006880:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006884:	e043      	b.n	800690e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006890:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006898:	4b47      	ldr	r3, [pc, #284]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800689a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a0:	ee07 3a90 	vmov	s15, r3
 80068a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80069c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80068b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068c8:	e021      	b.n	800690e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	ee07 3a90 	vmov	s15, r3
 80068d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80069c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80068d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068dc:	4b36      	ldr	r3, [pc, #216]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80068f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80069c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80068f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006908:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800690c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800690e:	4b2a      	ldr	r3, [pc, #168]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006912:	0a5b      	lsrs	r3, r3, #9
 8006914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006918:	ee07 3a90 	vmov	s15, r3
 800691c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006920:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006928:	edd7 6a07 	vldr	s13, [r7, #28]
 800692c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006934:	ee17 2a90 	vmov	r2, s15
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800693c:	4b1e      	ldr	r3, [pc, #120]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800693e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006940:	0c1b      	lsrs	r3, r3, #16
 8006942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006956:	edd7 6a07 	vldr	s13, [r7, #28]
 800695a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800695e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006962:	ee17 2a90 	vmov	r2, s15
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800696a:	4b13      	ldr	r3, [pc, #76]	@ (80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696e:	0e1b      	lsrs	r3, r3, #24
 8006970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006980:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006984:	edd7 6a07 	vldr	s13, [r7, #28]
 8006988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800698c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006990:	ee17 2a90 	vmov	r2, s15
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006998:	e008      	b.n	80069ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	609a      	str	r2, [r3, #8]
}
 80069ac:	bf00      	nop
 80069ae:	3724      	adds	r7, #36	@ 0x24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	58024400 	.word	0x58024400
 80069bc:	03d09000 	.word	0x03d09000
 80069c0:	46000000 	.word	0x46000000
 80069c4:	4c742400 	.word	0x4c742400
 80069c8:	4a742400 	.word	0x4a742400
 80069cc:	4bbebc20 	.word	0x4bbebc20

080069d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069de:	4b53      	ldr	r3, [pc, #332]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 80069e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d101      	bne.n	80069ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e099      	b.n	8006b22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80069ee:	4b4f      	ldr	r3, [pc, #316]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a4e      	ldr	r2, [pc, #312]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 80069f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069fa:	f7fa fd01 	bl	8001400 <HAL_GetTick>
 80069fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a00:	e008      	b.n	8006a14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a02:	f7fa fcfd 	bl	8001400 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e086      	b.n	8006b22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a14:	4b45      	ldr	r3, [pc, #276]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f0      	bne.n	8006a02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a20:	4b42      	ldr	r3, [pc, #264]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	031b      	lsls	r3, r3, #12
 8006a2e:	493f      	ldr	r1, [pc, #252]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	025b      	lsls	r3, r3, #9
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	041b      	lsls	r3, r3, #16
 8006a52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	061b      	lsls	r3, r3, #24
 8006a60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a64:	4931      	ldr	r1, [pc, #196]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a6a:	4b30      	ldr	r3, [pc, #192]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	492d      	ldr	r1, [pc, #180]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a80:	f023 0220 	bic.w	r2, r3, #32
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	4928      	ldr	r1, [pc, #160]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a8e:	4b27      	ldr	r3, [pc, #156]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a92:	4a26      	ldr	r2, [pc, #152]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a94:	f023 0310 	bic.w	r3, r3, #16
 8006a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a9a:	4b24      	ldr	r3, [pc, #144]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006a9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a9e:	4b24      	ldr	r3, [pc, #144]	@ (8006b30 <RCCEx_PLL2_Config+0x160>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	69d2      	ldr	r2, [r2, #28]
 8006aa6:	00d2      	lsls	r2, r2, #3
 8006aa8:	4920      	ldr	r1, [pc, #128]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006aae:	4b1f      	ldr	r3, [pc, #124]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006ab4:	f043 0310 	orr.w	r3, r3, #16
 8006ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d106      	bne.n	8006ace <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	4a19      	ldr	r2, [pc, #100]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006ac6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006aca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006acc:	e00f      	b.n	8006aee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d106      	bne.n	8006ae2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ad4:	4b15      	ldr	r3, [pc, #84]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	4a14      	ldr	r2, [pc, #80]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ade:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ae0:	e005      	b.n	8006aee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ae2:	4b12      	ldr	r3, [pc, #72]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae6:	4a11      	ldr	r2, [pc, #68]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006ae8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006aee:	4b0f      	ldr	r3, [pc, #60]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a0e      	ldr	r2, [pc, #56]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006af4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006afa:	f7fa fc81 	bl	8001400 <HAL_GetTick>
 8006afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b00:	e008      	b.n	8006b14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b02:	f7fa fc7d 	bl	8001400 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e006      	b.n	8006b22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b14:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <RCCEx_PLL2_Config+0x15c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	58024400 	.word	0x58024400
 8006b30:	ffff0007 	.word	0xffff0007

08006b34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b42:	4b53      	ldr	r3, [pc, #332]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d101      	bne.n	8006b52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e099      	b.n	8006c86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b52:	4b4f      	ldr	r3, [pc, #316]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a4e      	ldr	r2, [pc, #312]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b5e:	f7fa fc4f 	bl	8001400 <HAL_GetTick>
 8006b62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b64:	e008      	b.n	8006b78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b66:	f7fa fc4b 	bl	8001400 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e086      	b.n	8006c86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b78:	4b45      	ldr	r3, [pc, #276]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f0      	bne.n	8006b66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b84:	4b42      	ldr	r3, [pc, #264]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	051b      	lsls	r3, r3, #20
 8006b92:	493f      	ldr	r1, [pc, #252]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	025b      	lsls	r3, r3, #9
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	041b      	lsls	r3, r3, #16
 8006bb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	061b      	lsls	r3, r3, #24
 8006bc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bc8:	4931      	ldr	r1, [pc, #196]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006bce:	4b30      	ldr	r3, [pc, #192]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	492d      	ldr	r1, [pc, #180]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006be0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	4928      	ldr	r1, [pc, #160]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006bf2:	4b27      	ldr	r3, [pc, #156]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf6:	4a26      	ldr	r2, [pc, #152]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006bfe:	4b24      	ldr	r3, [pc, #144]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c02:	4b24      	ldr	r3, [pc, #144]	@ (8006c94 <RCCEx_PLL3_Config+0x160>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	69d2      	ldr	r2, [r2, #28]
 8006c0a:	00d2      	lsls	r2, r2, #3
 8006c0c:	4920      	ldr	r1, [pc, #128]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006c12:	4b1f      	ldr	r3, [pc, #124]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c16:	4a1e      	ldr	r2, [pc, #120]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c24:	4b1a      	ldr	r3, [pc, #104]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c28:	4a19      	ldr	r2, [pc, #100]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c30:	e00f      	b.n	8006c52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d106      	bne.n	8006c46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c38:	4b15      	ldr	r3, [pc, #84]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	4a14      	ldr	r2, [pc, #80]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006c42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c44:	e005      	b.n	8006c52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c46:	4b12      	ldr	r3, [pc, #72]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4a:	4a11      	ldr	r2, [pc, #68]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c52:	4b0f      	ldr	r3, [pc, #60]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a0e      	ldr	r2, [pc, #56]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c5e:	f7fa fbcf 	bl	8001400 <HAL_GetTick>
 8006c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c64:	e008      	b.n	8006c78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c66:	f7fa fbcb 	bl	8001400 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e006      	b.n	8006c86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c78:	4b05      	ldr	r3, [pc, #20]	@ (8006c90 <RCCEx_PLL3_Config+0x15c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f0      	beq.n	8006c66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	58024400 	.word	0x58024400
 8006c94:	ffff0007 	.word	0xffff0007

08006c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e042      	b.n	8006d30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d106      	bne.n	8006cc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f83b 	bl	8006d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2224      	movs	r2, #36	@ 0x24
 8006cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fe28 	bl	8007938 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f8bd 	bl	8006e68 <UART_SetConfig>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e01b      	b.n	8006d30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fea7 	bl	8007a7c <UART_CheckIdleState>
 8006d2e:	4603      	mov	r3, r0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	@ 0x28
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d17b      	bne.n	8006e5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_UART_Transmit+0x26>
 8006d6c:	88fb      	ldrh	r3, [r7, #6]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e074      	b.n	8006e60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2221      	movs	r2, #33	@ 0x21
 8006d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d86:	f7fa fb3b 	bl	8001400 <HAL_GetTick>
 8006d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	88fa      	ldrh	r2, [r7, #6]
 8006d98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006da4:	d108      	bne.n	8006db8 <HAL_UART_Transmit+0x6c>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	e003      	b.n	8006dc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dc0:	e030      	b.n	8006e24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2180      	movs	r1, #128	@ 0x80
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 feff 	bl	8007bd0 <UART_WaitOnFlagUntilTimeout>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e03d      	b.n	8006e60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006df8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	e007      	b.n	8006e12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	781a      	ldrb	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1c8      	bne.n	8006dc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2200      	movs	r2, #0
 8006e38:	2140      	movs	r1, #64	@ 0x40
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fec8 	bl	8007bd0 <UART_WaitOnFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e006      	b.n	8006e60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e000      	b.n	8006e60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006e5e:	2302      	movs	r3, #2
  }
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e6c:	b092      	sub	sp, #72	@ 0x48
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	431a      	orrs	r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4bbe      	ldr	r3, [pc, #760]	@ (8007190 <UART_SetConfig+0x328>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	6812      	ldr	r2, [r2, #0]
 8006e9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	68da      	ldr	r2, [r3, #12]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4ab3      	ldr	r2, [pc, #716]	@ (8007194 <UART_SetConfig+0x32c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d004      	beq.n	8006ed4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	4baf      	ldr	r3, [pc, #700]	@ (8007198 <UART_SetConfig+0x330>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eee:	f023 010f 	bic.w	r1, r3, #15
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4aa6      	ldr	r2, [pc, #664]	@ (800719c <UART_SetConfig+0x334>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d177      	bne.n	8006ff8 <UART_SetConfig+0x190>
 8006f08:	4ba5      	ldr	r3, [pc, #660]	@ (80071a0 <UART_SetConfig+0x338>)
 8006f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f10:	2b28      	cmp	r3, #40	@ 0x28
 8006f12:	d86d      	bhi.n	8006ff0 <UART_SetConfig+0x188>
 8006f14:	a201      	add	r2, pc, #4	@ (adr r2, 8006f1c <UART_SetConfig+0xb4>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006fc1 	.word	0x08006fc1
 8006f20:	08006ff1 	.word	0x08006ff1
 8006f24:	08006ff1 	.word	0x08006ff1
 8006f28:	08006ff1 	.word	0x08006ff1
 8006f2c:	08006ff1 	.word	0x08006ff1
 8006f30:	08006ff1 	.word	0x08006ff1
 8006f34:	08006ff1 	.word	0x08006ff1
 8006f38:	08006ff1 	.word	0x08006ff1
 8006f3c:	08006fc9 	.word	0x08006fc9
 8006f40:	08006ff1 	.word	0x08006ff1
 8006f44:	08006ff1 	.word	0x08006ff1
 8006f48:	08006ff1 	.word	0x08006ff1
 8006f4c:	08006ff1 	.word	0x08006ff1
 8006f50:	08006ff1 	.word	0x08006ff1
 8006f54:	08006ff1 	.word	0x08006ff1
 8006f58:	08006ff1 	.word	0x08006ff1
 8006f5c:	08006fd1 	.word	0x08006fd1
 8006f60:	08006ff1 	.word	0x08006ff1
 8006f64:	08006ff1 	.word	0x08006ff1
 8006f68:	08006ff1 	.word	0x08006ff1
 8006f6c:	08006ff1 	.word	0x08006ff1
 8006f70:	08006ff1 	.word	0x08006ff1
 8006f74:	08006ff1 	.word	0x08006ff1
 8006f78:	08006ff1 	.word	0x08006ff1
 8006f7c:	08006fd9 	.word	0x08006fd9
 8006f80:	08006ff1 	.word	0x08006ff1
 8006f84:	08006ff1 	.word	0x08006ff1
 8006f88:	08006ff1 	.word	0x08006ff1
 8006f8c:	08006ff1 	.word	0x08006ff1
 8006f90:	08006ff1 	.word	0x08006ff1
 8006f94:	08006ff1 	.word	0x08006ff1
 8006f98:	08006ff1 	.word	0x08006ff1
 8006f9c:	08006fe1 	.word	0x08006fe1
 8006fa0:	08006ff1 	.word	0x08006ff1
 8006fa4:	08006ff1 	.word	0x08006ff1
 8006fa8:	08006ff1 	.word	0x08006ff1
 8006fac:	08006ff1 	.word	0x08006ff1
 8006fb0:	08006ff1 	.word	0x08006ff1
 8006fb4:	08006ff1 	.word	0x08006ff1
 8006fb8:	08006ff1 	.word	0x08006ff1
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc6:	e222      	b.n	800740e <UART_SetConfig+0x5a6>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fce:	e21e      	b.n	800740e <UART_SetConfig+0x5a6>
 8006fd0:	2308      	movs	r3, #8
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd6:	e21a      	b.n	800740e <UART_SetConfig+0x5a6>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fde:	e216      	b.n	800740e <UART_SetConfig+0x5a6>
 8006fe0:	2320      	movs	r3, #32
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe6:	e212      	b.n	800740e <UART_SetConfig+0x5a6>
 8006fe8:	2340      	movs	r3, #64	@ 0x40
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fee:	e20e      	b.n	800740e <UART_SetConfig+0x5a6>
 8006ff0:	2380      	movs	r3, #128	@ 0x80
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff6:	e20a      	b.n	800740e <UART_SetConfig+0x5a6>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a69      	ldr	r2, [pc, #420]	@ (80071a4 <UART_SetConfig+0x33c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d130      	bne.n	8007064 <UART_SetConfig+0x1fc>
 8007002:	4b67      	ldr	r3, [pc, #412]	@ (80071a0 <UART_SetConfig+0x338>)
 8007004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b05      	cmp	r3, #5
 800700c:	d826      	bhi.n	800705c <UART_SetConfig+0x1f4>
 800700e:	a201      	add	r2, pc, #4	@ (adr r2, 8007014 <UART_SetConfig+0x1ac>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	0800702d 	.word	0x0800702d
 8007018:	08007035 	.word	0x08007035
 800701c:	0800703d 	.word	0x0800703d
 8007020:	08007045 	.word	0x08007045
 8007024:	0800704d 	.word	0x0800704d
 8007028:	08007055 	.word	0x08007055
 800702c:	2300      	movs	r3, #0
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007032:	e1ec      	b.n	800740e <UART_SetConfig+0x5a6>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703a:	e1e8      	b.n	800740e <UART_SetConfig+0x5a6>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007042:	e1e4      	b.n	800740e <UART_SetConfig+0x5a6>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704a:	e1e0      	b.n	800740e <UART_SetConfig+0x5a6>
 800704c:	2320      	movs	r3, #32
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007052:	e1dc      	b.n	800740e <UART_SetConfig+0x5a6>
 8007054:	2340      	movs	r3, #64	@ 0x40
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705a:	e1d8      	b.n	800740e <UART_SetConfig+0x5a6>
 800705c:	2380      	movs	r3, #128	@ 0x80
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007062:	e1d4      	b.n	800740e <UART_SetConfig+0x5a6>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a4f      	ldr	r2, [pc, #316]	@ (80071a8 <UART_SetConfig+0x340>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d130      	bne.n	80070d0 <UART_SetConfig+0x268>
 800706e:	4b4c      	ldr	r3, [pc, #304]	@ (80071a0 <UART_SetConfig+0x338>)
 8007070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	2b05      	cmp	r3, #5
 8007078:	d826      	bhi.n	80070c8 <UART_SetConfig+0x260>
 800707a:	a201      	add	r2, pc, #4	@ (adr r2, 8007080 <UART_SetConfig+0x218>)
 800707c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007080:	08007099 	.word	0x08007099
 8007084:	080070a1 	.word	0x080070a1
 8007088:	080070a9 	.word	0x080070a9
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070b9 	.word	0x080070b9
 8007094:	080070c1 	.word	0x080070c1
 8007098:	2300      	movs	r3, #0
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709e:	e1b6      	b.n	800740e <UART_SetConfig+0x5a6>
 80070a0:	2304      	movs	r3, #4
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a6:	e1b2      	b.n	800740e <UART_SetConfig+0x5a6>
 80070a8:	2308      	movs	r3, #8
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ae:	e1ae      	b.n	800740e <UART_SetConfig+0x5a6>
 80070b0:	2310      	movs	r3, #16
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b6:	e1aa      	b.n	800740e <UART_SetConfig+0x5a6>
 80070b8:	2320      	movs	r3, #32
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070be:	e1a6      	b.n	800740e <UART_SetConfig+0x5a6>
 80070c0:	2340      	movs	r3, #64	@ 0x40
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c6:	e1a2      	b.n	800740e <UART_SetConfig+0x5a6>
 80070c8:	2380      	movs	r3, #128	@ 0x80
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ce:	e19e      	b.n	800740e <UART_SetConfig+0x5a6>
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a35      	ldr	r2, [pc, #212]	@ (80071ac <UART_SetConfig+0x344>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d130      	bne.n	800713c <UART_SetConfig+0x2d4>
 80070da:	4b31      	ldr	r3, [pc, #196]	@ (80071a0 <UART_SetConfig+0x338>)
 80070dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	2b05      	cmp	r3, #5
 80070e4:	d826      	bhi.n	8007134 <UART_SetConfig+0x2cc>
 80070e6:	a201      	add	r2, pc, #4	@ (adr r2, 80070ec <UART_SetConfig+0x284>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	08007105 	.word	0x08007105
 80070f0:	0800710d 	.word	0x0800710d
 80070f4:	08007115 	.word	0x08007115
 80070f8:	0800711d 	.word	0x0800711d
 80070fc:	08007125 	.word	0x08007125
 8007100:	0800712d 	.word	0x0800712d
 8007104:	2300      	movs	r3, #0
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710a:	e180      	b.n	800740e <UART_SetConfig+0x5a6>
 800710c:	2304      	movs	r3, #4
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007112:	e17c      	b.n	800740e <UART_SetConfig+0x5a6>
 8007114:	2308      	movs	r3, #8
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711a:	e178      	b.n	800740e <UART_SetConfig+0x5a6>
 800711c:	2310      	movs	r3, #16
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007122:	e174      	b.n	800740e <UART_SetConfig+0x5a6>
 8007124:	2320      	movs	r3, #32
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712a:	e170      	b.n	800740e <UART_SetConfig+0x5a6>
 800712c:	2340      	movs	r3, #64	@ 0x40
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007132:	e16c      	b.n	800740e <UART_SetConfig+0x5a6>
 8007134:	2380      	movs	r3, #128	@ 0x80
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713a:	e168      	b.n	800740e <UART_SetConfig+0x5a6>
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1b      	ldr	r2, [pc, #108]	@ (80071b0 <UART_SetConfig+0x348>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d142      	bne.n	80071cc <UART_SetConfig+0x364>
 8007146:	4b16      	ldr	r3, [pc, #88]	@ (80071a0 <UART_SetConfig+0x338>)
 8007148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	2b05      	cmp	r3, #5
 8007150:	d838      	bhi.n	80071c4 <UART_SetConfig+0x35c>
 8007152:	a201      	add	r2, pc, #4	@ (adr r2, 8007158 <UART_SetConfig+0x2f0>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	08007171 	.word	0x08007171
 800715c:	08007179 	.word	0x08007179
 8007160:	08007181 	.word	0x08007181
 8007164:	08007189 	.word	0x08007189
 8007168:	080071b5 	.word	0x080071b5
 800716c:	080071bd 	.word	0x080071bd
 8007170:	2300      	movs	r3, #0
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007176:	e14a      	b.n	800740e <UART_SetConfig+0x5a6>
 8007178:	2304      	movs	r3, #4
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717e:	e146      	b.n	800740e <UART_SetConfig+0x5a6>
 8007180:	2308      	movs	r3, #8
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007186:	e142      	b.n	800740e <UART_SetConfig+0x5a6>
 8007188:	2310      	movs	r3, #16
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718e:	e13e      	b.n	800740e <UART_SetConfig+0x5a6>
 8007190:	cfff69f3 	.word	0xcfff69f3
 8007194:	58000c00 	.word	0x58000c00
 8007198:	11fff4ff 	.word	0x11fff4ff
 800719c:	40011000 	.word	0x40011000
 80071a0:	58024400 	.word	0x58024400
 80071a4:	40004400 	.word	0x40004400
 80071a8:	40004800 	.word	0x40004800
 80071ac:	40004c00 	.word	0x40004c00
 80071b0:	40005000 	.word	0x40005000
 80071b4:	2320      	movs	r3, #32
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ba:	e128      	b.n	800740e <UART_SetConfig+0x5a6>
 80071bc:	2340      	movs	r3, #64	@ 0x40
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c2:	e124      	b.n	800740e <UART_SetConfig+0x5a6>
 80071c4:	2380      	movs	r3, #128	@ 0x80
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ca:	e120      	b.n	800740e <UART_SetConfig+0x5a6>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4acb      	ldr	r2, [pc, #812]	@ (8007500 <UART_SetConfig+0x698>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d176      	bne.n	80072c4 <UART_SetConfig+0x45c>
 80071d6:	4bcb      	ldr	r3, [pc, #812]	@ (8007504 <UART_SetConfig+0x69c>)
 80071d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071de:	2b28      	cmp	r3, #40	@ 0x28
 80071e0:	d86c      	bhi.n	80072bc <UART_SetConfig+0x454>
 80071e2:	a201      	add	r2, pc, #4	@ (adr r2, 80071e8 <UART_SetConfig+0x380>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	0800728d 	.word	0x0800728d
 80071ec:	080072bd 	.word	0x080072bd
 80071f0:	080072bd 	.word	0x080072bd
 80071f4:	080072bd 	.word	0x080072bd
 80071f8:	080072bd 	.word	0x080072bd
 80071fc:	080072bd 	.word	0x080072bd
 8007200:	080072bd 	.word	0x080072bd
 8007204:	080072bd 	.word	0x080072bd
 8007208:	08007295 	.word	0x08007295
 800720c:	080072bd 	.word	0x080072bd
 8007210:	080072bd 	.word	0x080072bd
 8007214:	080072bd 	.word	0x080072bd
 8007218:	080072bd 	.word	0x080072bd
 800721c:	080072bd 	.word	0x080072bd
 8007220:	080072bd 	.word	0x080072bd
 8007224:	080072bd 	.word	0x080072bd
 8007228:	0800729d 	.word	0x0800729d
 800722c:	080072bd 	.word	0x080072bd
 8007230:	080072bd 	.word	0x080072bd
 8007234:	080072bd 	.word	0x080072bd
 8007238:	080072bd 	.word	0x080072bd
 800723c:	080072bd 	.word	0x080072bd
 8007240:	080072bd 	.word	0x080072bd
 8007244:	080072bd 	.word	0x080072bd
 8007248:	080072a5 	.word	0x080072a5
 800724c:	080072bd 	.word	0x080072bd
 8007250:	080072bd 	.word	0x080072bd
 8007254:	080072bd 	.word	0x080072bd
 8007258:	080072bd 	.word	0x080072bd
 800725c:	080072bd 	.word	0x080072bd
 8007260:	080072bd 	.word	0x080072bd
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072ad 	.word	0x080072ad
 800726c:	080072bd 	.word	0x080072bd
 8007270:	080072bd 	.word	0x080072bd
 8007274:	080072bd 	.word	0x080072bd
 8007278:	080072bd 	.word	0x080072bd
 800727c:	080072bd 	.word	0x080072bd
 8007280:	080072bd 	.word	0x080072bd
 8007284:	080072bd 	.word	0x080072bd
 8007288:	080072b5 	.word	0x080072b5
 800728c:	2301      	movs	r3, #1
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007292:	e0bc      	b.n	800740e <UART_SetConfig+0x5a6>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729a:	e0b8      	b.n	800740e <UART_SetConfig+0x5a6>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a2:	e0b4      	b.n	800740e <UART_SetConfig+0x5a6>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072aa:	e0b0      	b.n	800740e <UART_SetConfig+0x5a6>
 80072ac:	2320      	movs	r3, #32
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b2:	e0ac      	b.n	800740e <UART_SetConfig+0x5a6>
 80072b4:	2340      	movs	r3, #64	@ 0x40
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ba:	e0a8      	b.n	800740e <UART_SetConfig+0x5a6>
 80072bc:	2380      	movs	r3, #128	@ 0x80
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c2:	e0a4      	b.n	800740e <UART_SetConfig+0x5a6>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a8f      	ldr	r2, [pc, #572]	@ (8007508 <UART_SetConfig+0x6a0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d130      	bne.n	8007330 <UART_SetConfig+0x4c8>
 80072ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007504 <UART_SetConfig+0x69c>)
 80072d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	2b05      	cmp	r3, #5
 80072d8:	d826      	bhi.n	8007328 <UART_SetConfig+0x4c0>
 80072da:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <UART_SetConfig+0x478>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	080072f9 	.word	0x080072f9
 80072e4:	08007301 	.word	0x08007301
 80072e8:	08007309 	.word	0x08007309
 80072ec:	08007311 	.word	0x08007311
 80072f0:	08007319 	.word	0x08007319
 80072f4:	08007321 	.word	0x08007321
 80072f8:	2300      	movs	r3, #0
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fe:	e086      	b.n	800740e <UART_SetConfig+0x5a6>
 8007300:	2304      	movs	r3, #4
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007306:	e082      	b.n	800740e <UART_SetConfig+0x5a6>
 8007308:	2308      	movs	r3, #8
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730e:	e07e      	b.n	800740e <UART_SetConfig+0x5a6>
 8007310:	2310      	movs	r3, #16
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007316:	e07a      	b.n	800740e <UART_SetConfig+0x5a6>
 8007318:	2320      	movs	r3, #32
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731e:	e076      	b.n	800740e <UART_SetConfig+0x5a6>
 8007320:	2340      	movs	r3, #64	@ 0x40
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007326:	e072      	b.n	800740e <UART_SetConfig+0x5a6>
 8007328:	2380      	movs	r3, #128	@ 0x80
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732e:	e06e      	b.n	800740e <UART_SetConfig+0x5a6>
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a75      	ldr	r2, [pc, #468]	@ (800750c <UART_SetConfig+0x6a4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d130      	bne.n	800739c <UART_SetConfig+0x534>
 800733a:	4b72      	ldr	r3, [pc, #456]	@ (8007504 <UART_SetConfig+0x69c>)
 800733c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	2b05      	cmp	r3, #5
 8007344:	d826      	bhi.n	8007394 <UART_SetConfig+0x52c>
 8007346:	a201      	add	r2, pc, #4	@ (adr r2, 800734c <UART_SetConfig+0x4e4>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	08007365 	.word	0x08007365
 8007350:	0800736d 	.word	0x0800736d
 8007354:	08007375 	.word	0x08007375
 8007358:	0800737d 	.word	0x0800737d
 800735c:	08007385 	.word	0x08007385
 8007360:	0800738d 	.word	0x0800738d
 8007364:	2300      	movs	r3, #0
 8007366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736a:	e050      	b.n	800740e <UART_SetConfig+0x5a6>
 800736c:	2304      	movs	r3, #4
 800736e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007372:	e04c      	b.n	800740e <UART_SetConfig+0x5a6>
 8007374:	2308      	movs	r3, #8
 8007376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737a:	e048      	b.n	800740e <UART_SetConfig+0x5a6>
 800737c:	2310      	movs	r3, #16
 800737e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007382:	e044      	b.n	800740e <UART_SetConfig+0x5a6>
 8007384:	2320      	movs	r3, #32
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738a:	e040      	b.n	800740e <UART_SetConfig+0x5a6>
 800738c:	2340      	movs	r3, #64	@ 0x40
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007392:	e03c      	b.n	800740e <UART_SetConfig+0x5a6>
 8007394:	2380      	movs	r3, #128	@ 0x80
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739a:	e038      	b.n	800740e <UART_SetConfig+0x5a6>
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a5b      	ldr	r2, [pc, #364]	@ (8007510 <UART_SetConfig+0x6a8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d130      	bne.n	8007408 <UART_SetConfig+0x5a0>
 80073a6:	4b57      	ldr	r3, [pc, #348]	@ (8007504 <UART_SetConfig+0x69c>)
 80073a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b05      	cmp	r3, #5
 80073b0:	d826      	bhi.n	8007400 <UART_SetConfig+0x598>
 80073b2:	a201      	add	r2, pc, #4	@ (adr r2, 80073b8 <UART_SetConfig+0x550>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073d1 	.word	0x080073d1
 80073bc:	080073d9 	.word	0x080073d9
 80073c0:	080073e1 	.word	0x080073e1
 80073c4:	080073e9 	.word	0x080073e9
 80073c8:	080073f1 	.word	0x080073f1
 80073cc:	080073f9 	.word	0x080073f9
 80073d0:	2302      	movs	r3, #2
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d6:	e01a      	b.n	800740e <UART_SetConfig+0x5a6>
 80073d8:	2304      	movs	r3, #4
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073de:	e016      	b.n	800740e <UART_SetConfig+0x5a6>
 80073e0:	2308      	movs	r3, #8
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e6:	e012      	b.n	800740e <UART_SetConfig+0x5a6>
 80073e8:	2310      	movs	r3, #16
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ee:	e00e      	b.n	800740e <UART_SetConfig+0x5a6>
 80073f0:	2320      	movs	r3, #32
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f6:	e00a      	b.n	800740e <UART_SetConfig+0x5a6>
 80073f8:	2340      	movs	r3, #64	@ 0x40
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fe:	e006      	b.n	800740e <UART_SetConfig+0x5a6>
 8007400:	2380      	movs	r3, #128	@ 0x80
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007406:	e002      	b.n	800740e <UART_SetConfig+0x5a6>
 8007408:	2380      	movs	r3, #128	@ 0x80
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a3f      	ldr	r2, [pc, #252]	@ (8007510 <UART_SetConfig+0x6a8>)
 8007414:	4293      	cmp	r3, r2
 8007416:	f040 80f8 	bne.w	800760a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800741a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800741e:	2b20      	cmp	r3, #32
 8007420:	dc46      	bgt.n	80074b0 <UART_SetConfig+0x648>
 8007422:	2b02      	cmp	r3, #2
 8007424:	f2c0 8082 	blt.w	800752c <UART_SetConfig+0x6c4>
 8007428:	3b02      	subs	r3, #2
 800742a:	2b1e      	cmp	r3, #30
 800742c:	d87e      	bhi.n	800752c <UART_SetConfig+0x6c4>
 800742e:	a201      	add	r2, pc, #4	@ (adr r2, 8007434 <UART_SetConfig+0x5cc>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	080074b7 	.word	0x080074b7
 8007438:	0800752d 	.word	0x0800752d
 800743c:	080074bf 	.word	0x080074bf
 8007440:	0800752d 	.word	0x0800752d
 8007444:	0800752d 	.word	0x0800752d
 8007448:	0800752d 	.word	0x0800752d
 800744c:	080074cf 	.word	0x080074cf
 8007450:	0800752d 	.word	0x0800752d
 8007454:	0800752d 	.word	0x0800752d
 8007458:	0800752d 	.word	0x0800752d
 800745c:	0800752d 	.word	0x0800752d
 8007460:	0800752d 	.word	0x0800752d
 8007464:	0800752d 	.word	0x0800752d
 8007468:	0800752d 	.word	0x0800752d
 800746c:	080074df 	.word	0x080074df
 8007470:	0800752d 	.word	0x0800752d
 8007474:	0800752d 	.word	0x0800752d
 8007478:	0800752d 	.word	0x0800752d
 800747c:	0800752d 	.word	0x0800752d
 8007480:	0800752d 	.word	0x0800752d
 8007484:	0800752d 	.word	0x0800752d
 8007488:	0800752d 	.word	0x0800752d
 800748c:	0800752d 	.word	0x0800752d
 8007490:	0800752d 	.word	0x0800752d
 8007494:	0800752d 	.word	0x0800752d
 8007498:	0800752d 	.word	0x0800752d
 800749c:	0800752d 	.word	0x0800752d
 80074a0:	0800752d 	.word	0x0800752d
 80074a4:	0800752d 	.word	0x0800752d
 80074a8:	0800752d 	.word	0x0800752d
 80074ac:	0800751f 	.word	0x0800751f
 80074b0:	2b40      	cmp	r3, #64	@ 0x40
 80074b2:	d037      	beq.n	8007524 <UART_SetConfig+0x6bc>
 80074b4:	e03a      	b.n	800752c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80074b6:	f7fe fe7b 	bl	80061b0 <HAL_RCCEx_GetD3PCLK1Freq>
 80074ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074bc:	e03c      	b.n	8007538 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe fe8a 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074cc:	e034      	b.n	8007538 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ce:	f107 0318 	add.w	r3, r7, #24
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe ffd6 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074dc:	e02c      	b.n	8007538 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074de:	4b09      	ldr	r3, [pc, #36]	@ (8007504 <UART_SetConfig+0x69c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d016      	beq.n	8007518 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074ea:	4b06      	ldr	r3, [pc, #24]	@ (8007504 <UART_SetConfig+0x69c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	08db      	lsrs	r3, r3, #3
 80074f0:	f003 0303 	and.w	r3, r3, #3
 80074f4:	4a07      	ldr	r2, [pc, #28]	@ (8007514 <UART_SetConfig+0x6ac>)
 80074f6:	fa22 f303 	lsr.w	r3, r2, r3
 80074fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074fc:	e01c      	b.n	8007538 <UART_SetConfig+0x6d0>
 80074fe:	bf00      	nop
 8007500:	40011400 	.word	0x40011400
 8007504:	58024400 	.word	0x58024400
 8007508:	40007800 	.word	0x40007800
 800750c:	40007c00 	.word	0x40007c00
 8007510:	58000c00 	.word	0x58000c00
 8007514:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007518:	4b9d      	ldr	r3, [pc, #628]	@ (8007790 <UART_SetConfig+0x928>)
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800751c:	e00c      	b.n	8007538 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800751e:	4b9d      	ldr	r3, [pc, #628]	@ (8007794 <UART_SetConfig+0x92c>)
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007522:	e009      	b.n	8007538 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752a:	e005      	b.n	8007538 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007536:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 81de 	beq.w	80078fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007544:	4a94      	ldr	r2, [pc, #592]	@ (8007798 <UART_SetConfig+0x930>)
 8007546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800754a:	461a      	mov	r2, r3
 800754c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800754e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007552:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	4613      	mov	r3, r2
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	4413      	add	r3, r2
 800755e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007560:	429a      	cmp	r2, r3
 8007562:	d305      	bcc.n	8007570 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800756a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800756c:	429a      	cmp	r2, r3
 800756e:	d903      	bls.n	8007578 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007576:	e1c1      	b.n	80078fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800757a:	2200      	movs	r2, #0
 800757c:	60bb      	str	r3, [r7, #8]
 800757e:	60fa      	str	r2, [r7, #12]
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007584:	4a84      	ldr	r2, [pc, #528]	@ (8007798 <UART_SetConfig+0x930>)
 8007586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800758a:	b29b      	uxth	r3, r3
 800758c:	2200      	movs	r2, #0
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007596:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800759a:	f7f8 fef1 	bl	8000380 <__aeabi_uldivmod>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4610      	mov	r0, r2
 80075a4:	4619      	mov	r1, r3
 80075a6:	f04f 0200 	mov.w	r2, #0
 80075aa:	f04f 0300 	mov.w	r3, #0
 80075ae:	020b      	lsls	r3, r1, #8
 80075b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075b4:	0202      	lsls	r2, r0, #8
 80075b6:	6979      	ldr	r1, [r7, #20]
 80075b8:	6849      	ldr	r1, [r1, #4]
 80075ba:	0849      	lsrs	r1, r1, #1
 80075bc:	2000      	movs	r0, #0
 80075be:	460c      	mov	r4, r1
 80075c0:	4605      	mov	r5, r0
 80075c2:	eb12 0804 	adds.w	r8, r2, r4
 80075c6:	eb43 0905 	adc.w	r9, r3, r5
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	469a      	mov	sl, r3
 80075d2:	4693      	mov	fp, r2
 80075d4:	4652      	mov	r2, sl
 80075d6:	465b      	mov	r3, fp
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	f7f8 fed0 	bl	8000380 <__aeabi_uldivmod>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4613      	mov	r3, r2
 80075e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075ee:	d308      	bcc.n	8007602 <UART_SetConfig+0x79a>
 80075f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075f6:	d204      	bcs.n	8007602 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075fe:	60da      	str	r2, [r3, #12]
 8007600:	e17c      	b.n	80078fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007608:	e178      	b.n	80078fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007612:	f040 80c5 	bne.w	80077a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007616:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800761a:	2b20      	cmp	r3, #32
 800761c:	dc48      	bgt.n	80076b0 <UART_SetConfig+0x848>
 800761e:	2b00      	cmp	r3, #0
 8007620:	db7b      	blt.n	800771a <UART_SetConfig+0x8b2>
 8007622:	2b20      	cmp	r3, #32
 8007624:	d879      	bhi.n	800771a <UART_SetConfig+0x8b2>
 8007626:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <UART_SetConfig+0x7c4>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	080076b7 	.word	0x080076b7
 8007630:	080076bf 	.word	0x080076bf
 8007634:	0800771b 	.word	0x0800771b
 8007638:	0800771b 	.word	0x0800771b
 800763c:	080076c7 	.word	0x080076c7
 8007640:	0800771b 	.word	0x0800771b
 8007644:	0800771b 	.word	0x0800771b
 8007648:	0800771b 	.word	0x0800771b
 800764c:	080076d7 	.word	0x080076d7
 8007650:	0800771b 	.word	0x0800771b
 8007654:	0800771b 	.word	0x0800771b
 8007658:	0800771b 	.word	0x0800771b
 800765c:	0800771b 	.word	0x0800771b
 8007660:	0800771b 	.word	0x0800771b
 8007664:	0800771b 	.word	0x0800771b
 8007668:	0800771b 	.word	0x0800771b
 800766c:	080076e7 	.word	0x080076e7
 8007670:	0800771b 	.word	0x0800771b
 8007674:	0800771b 	.word	0x0800771b
 8007678:	0800771b 	.word	0x0800771b
 800767c:	0800771b 	.word	0x0800771b
 8007680:	0800771b 	.word	0x0800771b
 8007684:	0800771b 	.word	0x0800771b
 8007688:	0800771b 	.word	0x0800771b
 800768c:	0800771b 	.word	0x0800771b
 8007690:	0800771b 	.word	0x0800771b
 8007694:	0800771b 	.word	0x0800771b
 8007698:	0800771b 	.word	0x0800771b
 800769c:	0800771b 	.word	0x0800771b
 80076a0:	0800771b 	.word	0x0800771b
 80076a4:	0800771b 	.word	0x0800771b
 80076a8:	0800771b 	.word	0x0800771b
 80076ac:	0800770d 	.word	0x0800770d
 80076b0:	2b40      	cmp	r3, #64	@ 0x40
 80076b2:	d02e      	beq.n	8007712 <UART_SetConfig+0x8aa>
 80076b4:	e031      	b.n	800771a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b6:	f7fc fdc5 	bl	8004244 <HAL_RCC_GetPCLK1Freq>
 80076ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076bc:	e033      	b.n	8007726 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076be:	f7fc fdd7 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 80076c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076c4:	e02f      	b.n	8007726 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe fd86 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d4:	e027      	b.n	8007726 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076d6:	f107 0318 	add.w	r3, r7, #24
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fe fed2 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e4:	e01f      	b.n	8007726 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076e6:	4b2d      	ldr	r3, [pc, #180]	@ (800779c <UART_SetConfig+0x934>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d009      	beq.n	8007706 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076f2:	4b2a      	ldr	r3, [pc, #168]	@ (800779c <UART_SetConfig+0x934>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	08db      	lsrs	r3, r3, #3
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	4a24      	ldr	r2, [pc, #144]	@ (8007790 <UART_SetConfig+0x928>)
 80076fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007704:	e00f      	b.n	8007726 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007706:	4b22      	ldr	r3, [pc, #136]	@ (8007790 <UART_SetConfig+0x928>)
 8007708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770a:	e00c      	b.n	8007726 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800770c:	4b21      	ldr	r3, [pc, #132]	@ (8007794 <UART_SetConfig+0x92c>)
 800770e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007710:	e009      	b.n	8007726 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007718:	e005      	b.n	8007726 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007724:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 80e7 	beq.w	80078fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007732:	4a19      	ldr	r2, [pc, #100]	@ (8007798 <UART_SetConfig+0x930>)
 8007734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007738:	461a      	mov	r2, r3
 800773a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800773c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007740:	005a      	lsls	r2, r3, #1
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	085b      	lsrs	r3, r3, #1
 8007748:	441a      	add	r2, r3
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007752:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	2b0f      	cmp	r3, #15
 8007758:	d916      	bls.n	8007788 <UART_SetConfig+0x920>
 800775a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007760:	d212      	bcs.n	8007788 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	b29b      	uxth	r3, r3
 8007766:	f023 030f 	bic.w	r3, r3, #15
 800776a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800776c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	b29b      	uxth	r3, r3
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	b29a      	uxth	r2, r3
 8007778:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800777a:	4313      	orrs	r3, r2
 800777c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007784:	60da      	str	r2, [r3, #12]
 8007786:	e0b9      	b.n	80078fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800778e:	e0b5      	b.n	80078fc <UART_SetConfig+0xa94>
 8007790:	03d09000 	.word	0x03d09000
 8007794:	003d0900 	.word	0x003d0900
 8007798:	08008c14 	.word	0x08008c14
 800779c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80077a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	dc49      	bgt.n	800783c <UART_SetConfig+0x9d4>
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	db7c      	blt.n	80078a6 <UART_SetConfig+0xa3e>
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d87a      	bhi.n	80078a6 <UART_SetConfig+0xa3e>
 80077b0:	a201      	add	r2, pc, #4	@ (adr r2, 80077b8 <UART_SetConfig+0x950>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	08007843 	.word	0x08007843
 80077bc:	0800784b 	.word	0x0800784b
 80077c0:	080078a7 	.word	0x080078a7
 80077c4:	080078a7 	.word	0x080078a7
 80077c8:	08007853 	.word	0x08007853
 80077cc:	080078a7 	.word	0x080078a7
 80077d0:	080078a7 	.word	0x080078a7
 80077d4:	080078a7 	.word	0x080078a7
 80077d8:	08007863 	.word	0x08007863
 80077dc:	080078a7 	.word	0x080078a7
 80077e0:	080078a7 	.word	0x080078a7
 80077e4:	080078a7 	.word	0x080078a7
 80077e8:	080078a7 	.word	0x080078a7
 80077ec:	080078a7 	.word	0x080078a7
 80077f0:	080078a7 	.word	0x080078a7
 80077f4:	080078a7 	.word	0x080078a7
 80077f8:	08007873 	.word	0x08007873
 80077fc:	080078a7 	.word	0x080078a7
 8007800:	080078a7 	.word	0x080078a7
 8007804:	080078a7 	.word	0x080078a7
 8007808:	080078a7 	.word	0x080078a7
 800780c:	080078a7 	.word	0x080078a7
 8007810:	080078a7 	.word	0x080078a7
 8007814:	080078a7 	.word	0x080078a7
 8007818:	080078a7 	.word	0x080078a7
 800781c:	080078a7 	.word	0x080078a7
 8007820:	080078a7 	.word	0x080078a7
 8007824:	080078a7 	.word	0x080078a7
 8007828:	080078a7 	.word	0x080078a7
 800782c:	080078a7 	.word	0x080078a7
 8007830:	080078a7 	.word	0x080078a7
 8007834:	080078a7 	.word	0x080078a7
 8007838:	08007899 	.word	0x08007899
 800783c:	2b40      	cmp	r3, #64	@ 0x40
 800783e:	d02e      	beq.n	800789e <UART_SetConfig+0xa36>
 8007840:	e031      	b.n	80078a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007842:	f7fc fcff 	bl	8004244 <HAL_RCC_GetPCLK1Freq>
 8007846:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007848:	e033      	b.n	80078b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800784a:	f7fc fd11 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 800784e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007850:	e02f      	b.n	80078b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fcc0 	bl	80061dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007860:	e027      	b.n	80078b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007862:	f107 0318 	add.w	r3, r7, #24
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fe0c 	bl	8006484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007870:	e01f      	b.n	80078b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007872:	4b2d      	ldr	r3, [pc, #180]	@ (8007928 <UART_SetConfig+0xac0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800787e:	4b2a      	ldr	r3, [pc, #168]	@ (8007928 <UART_SetConfig+0xac0>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	08db      	lsrs	r3, r3, #3
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	4a28      	ldr	r2, [pc, #160]	@ (800792c <UART_SetConfig+0xac4>)
 800788a:	fa22 f303 	lsr.w	r3, r2, r3
 800788e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007890:	e00f      	b.n	80078b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007892:	4b26      	ldr	r3, [pc, #152]	@ (800792c <UART_SetConfig+0xac4>)
 8007894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007896:	e00c      	b.n	80078b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007898:	4b25      	ldr	r3, [pc, #148]	@ (8007930 <UART_SetConfig+0xac8>)
 800789a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789c:	e009      	b.n	80078b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a4:	e005      	b.n	80078b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80078b0:	bf00      	nop
    }

    if (pclk != 0U)
 80078b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d021      	beq.n	80078fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007934 <UART_SetConfig+0xacc>)
 80078be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	085b      	lsrs	r3, r3, #1
 80078d0:	441a      	add	r2, r3
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078de:	2b0f      	cmp	r3, #15
 80078e0:	d909      	bls.n	80078f6 <UART_SetConfig+0xa8e>
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e8:	d205      	bcs.n	80078f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60da      	str	r2, [r3, #12]
 80078f4:	e002      	b.n	80078fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2201      	movs	r2, #1
 8007900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2201      	movs	r2, #1
 8007908:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2200      	movs	r2, #0
 8007910:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2200      	movs	r2, #0
 8007916:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007918:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800791c:	4618      	mov	r0, r3
 800791e:	3748      	adds	r7, #72	@ 0x48
 8007920:	46bd      	mov	sp, r7
 8007922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007926:	bf00      	nop
 8007928:	58024400 	.word	0x58024400
 800792c:	03d09000 	.word	0x03d09000
 8007930:	003d0900 	.word	0x003d0900
 8007934:	08008c14 	.word	0x08008c14

08007938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007944:	f003 0308 	and.w	r3, r3, #8
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00a      	beq.n	80079a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	f003 0310 	and.w	r3, r3, #16
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00a      	beq.n	80079ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ee:	f003 0320 	and.w	r3, r3, #32
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01a      	beq.n	8007a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a36:	d10a      	bne.n	8007a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	605a      	str	r2, [r3, #4]
  }
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b098      	sub	sp, #96	@ 0x60
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a8c:	f7f9 fcb8 	bl	8001400 <HAL_GetTick>
 8007a90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d12f      	bne.n	8007b00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f88e 	bl	8007bd0 <UART_WaitOnFlagUntilTimeout>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d022      	beq.n	8007b00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ada:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e6      	bne.n	8007aba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e063      	b.n	8007bc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d149      	bne.n	8007ba2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b16:	2200      	movs	r2, #0
 8007b18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f857 	bl	8007bd0 <UART_WaitOnFlagUntilTimeout>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d03c      	beq.n	8007ba2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	623b      	str	r3, [r7, #32]
   return(result);
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b46:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e6      	bne.n	8007b28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3308      	adds	r3, #8
 8007b60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	e853 3f00 	ldrex	r3, [r3]
 8007b68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f023 0301 	bic.w	r3, r3, #1
 8007b70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3308      	adds	r3, #8
 8007b78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b7a:	61fa      	str	r2, [r7, #28]
 8007b7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7e:	69b9      	ldr	r1, [r7, #24]
 8007b80:	69fa      	ldr	r2, [r7, #28]
 8007b82:	e841 2300 	strex	r3, r2, [r1]
 8007b86:	617b      	str	r3, [r7, #20]
   return(result);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1e5      	bne.n	8007b5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e012      	b.n	8007bc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3758      	adds	r7, #88	@ 0x58
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be0:	e04f      	b.n	8007c82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007be8:	d04b      	beq.n	8007c82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bea:	f7f9 fc09 	bl	8001400 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d302      	bcc.n	8007c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e04e      	b.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d037      	beq.n	8007c82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b80      	cmp	r3, #128	@ 0x80
 8007c16:	d034      	beq.n	8007c82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2b40      	cmp	r3, #64	@ 0x40
 8007c1c:	d031      	beq.n	8007c82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d110      	bne.n	8007c4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2208      	movs	r2, #8
 8007c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f839 	bl	8007cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e029      	b.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c5c:	d111      	bne.n	8007c82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 f81f 	bl	8007cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e00f      	b.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	bf0c      	ite	eq
 8007c92:	2301      	moveq	r3, #1
 8007c94:	2300      	movne	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d0a0      	beq.n	8007be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b095      	sub	sp, #84	@ 0x54
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e6      	bne.n	8007cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8007d74 <UART_EndRxTransfer+0xc8>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e5      	bne.n	8007ce6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d118      	bne.n	8007d54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f023 0310 	bic.w	r3, r3, #16
 8007d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6979      	ldr	r1, [r7, #20]
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d68:	bf00      	nop
 8007d6a:	3754      	adds	r7, #84	@ 0x54
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	effffffe 	.word	0xeffffffe

08007d78 <std>:
 8007d78:	2300      	movs	r3, #0
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d86:	6083      	str	r3, [r0, #8]
 8007d88:	8181      	strh	r1, [r0, #12]
 8007d8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d8c:	81c2      	strh	r2, [r0, #14]
 8007d8e:	6183      	str	r3, [r0, #24]
 8007d90:	4619      	mov	r1, r3
 8007d92:	2208      	movs	r2, #8
 8007d94:	305c      	adds	r0, #92	@ 0x5c
 8007d96:	f000 f906 	bl	8007fa6 <memset>
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd0 <std+0x58>)
 8007d9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd4 <std+0x5c>)
 8007da0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <std+0x60>)
 8007da4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007da6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ddc <std+0x64>)
 8007da8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007daa:	4b0d      	ldr	r3, [pc, #52]	@ (8007de0 <std+0x68>)
 8007dac:	6224      	str	r4, [r4, #32]
 8007dae:	429c      	cmp	r4, r3
 8007db0:	d006      	beq.n	8007dc0 <std+0x48>
 8007db2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007db6:	4294      	cmp	r4, r2
 8007db8:	d002      	beq.n	8007dc0 <std+0x48>
 8007dba:	33d0      	adds	r3, #208	@ 0xd0
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	d105      	bne.n	8007dcc <std+0x54>
 8007dc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc8:	f000 b966 	b.w	8008098 <__retarget_lock_init_recursive>
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	bf00      	nop
 8007dd0:	08007f21 	.word	0x08007f21
 8007dd4:	08007f43 	.word	0x08007f43
 8007dd8:	08007f7b 	.word	0x08007f7b
 8007ddc:	08007f9f 	.word	0x08007f9f
 8007de0:	240001c4 	.word	0x240001c4

08007de4 <stdio_exit_handler>:
 8007de4:	4a02      	ldr	r2, [pc, #8]	@ (8007df0 <stdio_exit_handler+0xc>)
 8007de6:	4903      	ldr	r1, [pc, #12]	@ (8007df4 <stdio_exit_handler+0x10>)
 8007de8:	4803      	ldr	r0, [pc, #12]	@ (8007df8 <stdio_exit_handler+0x14>)
 8007dea:	f000 b869 	b.w	8007ec0 <_fwalk_sglue>
 8007dee:	bf00      	nop
 8007df0:	2400002c 	.word	0x2400002c
 8007df4:	08008939 	.word	0x08008939
 8007df8:	2400003c 	.word	0x2400003c

08007dfc <cleanup_stdio>:
 8007dfc:	6841      	ldr	r1, [r0, #4]
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8007e30 <cleanup_stdio+0x34>)
 8007e00:	4299      	cmp	r1, r3
 8007e02:	b510      	push	{r4, lr}
 8007e04:	4604      	mov	r4, r0
 8007e06:	d001      	beq.n	8007e0c <cleanup_stdio+0x10>
 8007e08:	f000 fd96 	bl	8008938 <_fflush_r>
 8007e0c:	68a1      	ldr	r1, [r4, #8]
 8007e0e:	4b09      	ldr	r3, [pc, #36]	@ (8007e34 <cleanup_stdio+0x38>)
 8007e10:	4299      	cmp	r1, r3
 8007e12:	d002      	beq.n	8007e1a <cleanup_stdio+0x1e>
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 fd8f 	bl	8008938 <_fflush_r>
 8007e1a:	68e1      	ldr	r1, [r4, #12]
 8007e1c:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <cleanup_stdio+0x3c>)
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d004      	beq.n	8007e2c <cleanup_stdio+0x30>
 8007e22:	4620      	mov	r0, r4
 8007e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e28:	f000 bd86 	b.w	8008938 <_fflush_r>
 8007e2c:	bd10      	pop	{r4, pc}
 8007e2e:	bf00      	nop
 8007e30:	240001c4 	.word	0x240001c4
 8007e34:	2400022c 	.word	0x2400022c
 8007e38:	24000294 	.word	0x24000294

08007e3c <global_stdio_init.part.0>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e6c <global_stdio_init.part.0+0x30>)
 8007e40:	4c0b      	ldr	r4, [pc, #44]	@ (8007e70 <global_stdio_init.part.0+0x34>)
 8007e42:	4a0c      	ldr	r2, [pc, #48]	@ (8007e74 <global_stdio_init.part.0+0x38>)
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	4620      	mov	r0, r4
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2104      	movs	r1, #4
 8007e4c:	f7ff ff94 	bl	8007d78 <std>
 8007e50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e54:	2201      	movs	r2, #1
 8007e56:	2109      	movs	r1, #9
 8007e58:	f7ff ff8e 	bl	8007d78 <std>
 8007e5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e60:	2202      	movs	r2, #2
 8007e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e66:	2112      	movs	r1, #18
 8007e68:	f7ff bf86 	b.w	8007d78 <std>
 8007e6c:	240002fc 	.word	0x240002fc
 8007e70:	240001c4 	.word	0x240001c4
 8007e74:	08007de5 	.word	0x08007de5

08007e78 <__sfp_lock_acquire>:
 8007e78:	4801      	ldr	r0, [pc, #4]	@ (8007e80 <__sfp_lock_acquire+0x8>)
 8007e7a:	f000 b90e 	b.w	800809a <__retarget_lock_acquire_recursive>
 8007e7e:	bf00      	nop
 8007e80:	24000305 	.word	0x24000305

08007e84 <__sfp_lock_release>:
 8007e84:	4801      	ldr	r0, [pc, #4]	@ (8007e8c <__sfp_lock_release+0x8>)
 8007e86:	f000 b909 	b.w	800809c <__retarget_lock_release_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	24000305 	.word	0x24000305

08007e90 <__sinit>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	4604      	mov	r4, r0
 8007e94:	f7ff fff0 	bl	8007e78 <__sfp_lock_acquire>
 8007e98:	6a23      	ldr	r3, [r4, #32]
 8007e9a:	b11b      	cbz	r3, 8007ea4 <__sinit+0x14>
 8007e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea0:	f7ff bff0 	b.w	8007e84 <__sfp_lock_release>
 8007ea4:	4b04      	ldr	r3, [pc, #16]	@ (8007eb8 <__sinit+0x28>)
 8007ea6:	6223      	str	r3, [r4, #32]
 8007ea8:	4b04      	ldr	r3, [pc, #16]	@ (8007ebc <__sinit+0x2c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1f5      	bne.n	8007e9c <__sinit+0xc>
 8007eb0:	f7ff ffc4 	bl	8007e3c <global_stdio_init.part.0>
 8007eb4:	e7f2      	b.n	8007e9c <__sinit+0xc>
 8007eb6:	bf00      	nop
 8007eb8:	08007dfd 	.word	0x08007dfd
 8007ebc:	240002fc 	.word	0x240002fc

08007ec0 <_fwalk_sglue>:
 8007ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	4688      	mov	r8, r1
 8007ec8:	4614      	mov	r4, r2
 8007eca:	2600      	movs	r6, #0
 8007ecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ed0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ed4:	d505      	bpl.n	8007ee2 <_fwalk_sglue+0x22>
 8007ed6:	6824      	ldr	r4, [r4, #0]
 8007ed8:	2c00      	cmp	r4, #0
 8007eda:	d1f7      	bne.n	8007ecc <_fwalk_sglue+0xc>
 8007edc:	4630      	mov	r0, r6
 8007ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee2:	89ab      	ldrh	r3, [r5, #12]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d907      	bls.n	8007ef8 <_fwalk_sglue+0x38>
 8007ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007eec:	3301      	adds	r3, #1
 8007eee:	d003      	beq.n	8007ef8 <_fwalk_sglue+0x38>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	47c0      	blx	r8
 8007ef6:	4306      	orrs	r6, r0
 8007ef8:	3568      	adds	r5, #104	@ 0x68
 8007efa:	e7e9      	b.n	8007ed0 <_fwalk_sglue+0x10>

08007efc <iprintf>:
 8007efc:	b40f      	push	{r0, r1, r2, r3}
 8007efe:	b507      	push	{r0, r1, r2, lr}
 8007f00:	4906      	ldr	r1, [pc, #24]	@ (8007f1c <iprintf+0x20>)
 8007f02:	ab04      	add	r3, sp, #16
 8007f04:	6808      	ldr	r0, [r1, #0]
 8007f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0a:	6881      	ldr	r1, [r0, #8]
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	f000 f9e9 	bl	80082e4 <_vfiprintf_r>
 8007f12:	b003      	add	sp, #12
 8007f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f18:	b004      	add	sp, #16
 8007f1a:	4770      	bx	lr
 8007f1c:	24000038 	.word	0x24000038

08007f20 <__sread>:
 8007f20:	b510      	push	{r4, lr}
 8007f22:	460c      	mov	r4, r1
 8007f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f28:	f000 f868 	bl	8007ffc <_read_r>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	bfab      	itete	ge
 8007f30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f32:	89a3      	ldrhlt	r3, [r4, #12]
 8007f34:	181b      	addge	r3, r3, r0
 8007f36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f3a:	bfac      	ite	ge
 8007f3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f3e:	81a3      	strhlt	r3, [r4, #12]
 8007f40:	bd10      	pop	{r4, pc}

08007f42 <__swrite>:
 8007f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f46:	461f      	mov	r7, r3
 8007f48:	898b      	ldrh	r3, [r1, #12]
 8007f4a:	05db      	lsls	r3, r3, #23
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	4616      	mov	r6, r2
 8007f52:	d505      	bpl.n	8007f60 <__swrite+0x1e>
 8007f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f58:	2302      	movs	r3, #2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f000 f83c 	bl	8007fd8 <_lseek_r>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f6a:	81a3      	strh	r3, [r4, #12]
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	463b      	mov	r3, r7
 8007f70:	4628      	mov	r0, r5
 8007f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f76:	f000 b853 	b.w	8008020 <_write_r>

08007f7a <__sseek>:
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f82:	f000 f829 	bl	8007fd8 <_lseek_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	bf15      	itete	ne
 8007f8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f96:	81a3      	strheq	r3, [r4, #12]
 8007f98:	bf18      	it	ne
 8007f9a:	81a3      	strhne	r3, [r4, #12]
 8007f9c:	bd10      	pop	{r4, pc}

08007f9e <__sclose>:
 8007f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa2:	f000 b809 	b.w	8007fb8 <_close_r>

08007fa6 <memset>:
 8007fa6:	4402      	add	r2, r0
 8007fa8:	4603      	mov	r3, r0
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d100      	bne.n	8007fb0 <memset+0xa>
 8007fae:	4770      	bx	lr
 8007fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8007fb4:	e7f9      	b.n	8007faa <memset+0x4>
	...

08007fb8 <_close_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d06      	ldr	r5, [pc, #24]	@ (8007fd4 <_close_r+0x1c>)
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	f7f8 ff29 	bl	8000e1a <_close>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_close_r+0x1a>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_close_r+0x1a>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	24000300 	.word	0x24000300

08007fd8 <_lseek_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	@ (8007ff8 <_lseek_r+0x20>)
 8007fdc:	4604      	mov	r4, r0
 8007fde:	4608      	mov	r0, r1
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7f8 ff3e 	bl	8000e68 <_lseek>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_lseek_r+0x1e>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_lseek_r+0x1e>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	24000300 	.word	0x24000300

08007ffc <_read_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	@ (800801c <_read_r+0x20>)
 8008000:	4604      	mov	r4, r0
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	2200      	movs	r2, #0
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f7f8 fecc 	bl	8000da8 <_read>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_read_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_read_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	24000300 	.word	0x24000300

08008020 <_write_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d07      	ldr	r5, [pc, #28]	@ (8008040 <_write_r+0x20>)
 8008024:	4604      	mov	r4, r0
 8008026:	4608      	mov	r0, r1
 8008028:	4611      	mov	r1, r2
 800802a:	2200      	movs	r2, #0
 800802c:	602a      	str	r2, [r5, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	f7f8 fed7 	bl	8000de2 <_write>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_write_r+0x1e>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_write_r+0x1e>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	24000300 	.word	0x24000300

08008044 <__errno>:
 8008044:	4b01      	ldr	r3, [pc, #4]	@ (800804c <__errno+0x8>)
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	24000038 	.word	0x24000038

08008050 <__libc_init_array>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	4d0d      	ldr	r5, [pc, #52]	@ (8008088 <__libc_init_array+0x38>)
 8008054:	4c0d      	ldr	r4, [pc, #52]	@ (800808c <__libc_init_array+0x3c>)
 8008056:	1b64      	subs	r4, r4, r5
 8008058:	10a4      	asrs	r4, r4, #2
 800805a:	2600      	movs	r6, #0
 800805c:	42a6      	cmp	r6, r4
 800805e:	d109      	bne.n	8008074 <__libc_init_array+0x24>
 8008060:	4d0b      	ldr	r5, [pc, #44]	@ (8008090 <__libc_init_array+0x40>)
 8008062:	4c0c      	ldr	r4, [pc, #48]	@ (8008094 <__libc_init_array+0x44>)
 8008064:	f000 fdb8 	bl	8008bd8 <_init>
 8008068:	1b64      	subs	r4, r4, r5
 800806a:	10a4      	asrs	r4, r4, #2
 800806c:	2600      	movs	r6, #0
 800806e:	42a6      	cmp	r6, r4
 8008070:	d105      	bne.n	800807e <__libc_init_array+0x2e>
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	f855 3b04 	ldr.w	r3, [r5], #4
 8008078:	4798      	blx	r3
 800807a:	3601      	adds	r6, #1
 800807c:	e7ee      	b.n	800805c <__libc_init_array+0xc>
 800807e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008082:	4798      	blx	r3
 8008084:	3601      	adds	r6, #1
 8008086:	e7f2      	b.n	800806e <__libc_init_array+0x1e>
 8008088:	08008c68 	.word	0x08008c68
 800808c:	08008c68 	.word	0x08008c68
 8008090:	08008c68 	.word	0x08008c68
 8008094:	08008c6c 	.word	0x08008c6c

08008098 <__retarget_lock_init_recursive>:
 8008098:	4770      	bx	lr

0800809a <__retarget_lock_acquire_recursive>:
 800809a:	4770      	bx	lr

0800809c <__retarget_lock_release_recursive>:
 800809c:	4770      	bx	lr
	...

080080a0 <_free_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4605      	mov	r5, r0
 80080a4:	2900      	cmp	r1, #0
 80080a6:	d041      	beq.n	800812c <_free_r+0x8c>
 80080a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ac:	1f0c      	subs	r4, r1, #4
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bfb8      	it	lt
 80080b2:	18e4      	addlt	r4, r4, r3
 80080b4:	f000 f8e0 	bl	8008278 <__malloc_lock>
 80080b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008130 <_free_r+0x90>)
 80080ba:	6813      	ldr	r3, [r2, #0]
 80080bc:	b933      	cbnz	r3, 80080cc <_free_r+0x2c>
 80080be:	6063      	str	r3, [r4, #4]
 80080c0:	6014      	str	r4, [r2, #0]
 80080c2:	4628      	mov	r0, r5
 80080c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080c8:	f000 b8dc 	b.w	8008284 <__malloc_unlock>
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	d908      	bls.n	80080e2 <_free_r+0x42>
 80080d0:	6820      	ldr	r0, [r4, #0]
 80080d2:	1821      	adds	r1, r4, r0
 80080d4:	428b      	cmp	r3, r1
 80080d6:	bf01      	itttt	eq
 80080d8:	6819      	ldreq	r1, [r3, #0]
 80080da:	685b      	ldreq	r3, [r3, #4]
 80080dc:	1809      	addeq	r1, r1, r0
 80080de:	6021      	streq	r1, [r4, #0]
 80080e0:	e7ed      	b.n	80080be <_free_r+0x1e>
 80080e2:	461a      	mov	r2, r3
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	b10b      	cbz	r3, 80080ec <_free_r+0x4c>
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	d9fa      	bls.n	80080e2 <_free_r+0x42>
 80080ec:	6811      	ldr	r1, [r2, #0]
 80080ee:	1850      	adds	r0, r2, r1
 80080f0:	42a0      	cmp	r0, r4
 80080f2:	d10b      	bne.n	800810c <_free_r+0x6c>
 80080f4:	6820      	ldr	r0, [r4, #0]
 80080f6:	4401      	add	r1, r0
 80080f8:	1850      	adds	r0, r2, r1
 80080fa:	4283      	cmp	r3, r0
 80080fc:	6011      	str	r1, [r2, #0]
 80080fe:	d1e0      	bne.n	80080c2 <_free_r+0x22>
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	6053      	str	r3, [r2, #4]
 8008106:	4408      	add	r0, r1
 8008108:	6010      	str	r0, [r2, #0]
 800810a:	e7da      	b.n	80080c2 <_free_r+0x22>
 800810c:	d902      	bls.n	8008114 <_free_r+0x74>
 800810e:	230c      	movs	r3, #12
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	e7d6      	b.n	80080c2 <_free_r+0x22>
 8008114:	6820      	ldr	r0, [r4, #0]
 8008116:	1821      	adds	r1, r4, r0
 8008118:	428b      	cmp	r3, r1
 800811a:	bf04      	itt	eq
 800811c:	6819      	ldreq	r1, [r3, #0]
 800811e:	685b      	ldreq	r3, [r3, #4]
 8008120:	6063      	str	r3, [r4, #4]
 8008122:	bf04      	itt	eq
 8008124:	1809      	addeq	r1, r1, r0
 8008126:	6021      	streq	r1, [r4, #0]
 8008128:	6054      	str	r4, [r2, #4]
 800812a:	e7ca      	b.n	80080c2 <_free_r+0x22>
 800812c:	bd38      	pop	{r3, r4, r5, pc}
 800812e:	bf00      	nop
 8008130:	2400030c 	.word	0x2400030c

08008134 <sbrk_aligned>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	4e0f      	ldr	r6, [pc, #60]	@ (8008174 <sbrk_aligned+0x40>)
 8008138:	460c      	mov	r4, r1
 800813a:	6831      	ldr	r1, [r6, #0]
 800813c:	4605      	mov	r5, r0
 800813e:	b911      	cbnz	r1, 8008146 <sbrk_aligned+0x12>
 8008140:	f000 fcb6 	bl	8008ab0 <_sbrk_r>
 8008144:	6030      	str	r0, [r6, #0]
 8008146:	4621      	mov	r1, r4
 8008148:	4628      	mov	r0, r5
 800814a:	f000 fcb1 	bl	8008ab0 <_sbrk_r>
 800814e:	1c43      	adds	r3, r0, #1
 8008150:	d103      	bne.n	800815a <sbrk_aligned+0x26>
 8008152:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008156:	4620      	mov	r0, r4
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	1cc4      	adds	r4, r0, #3
 800815c:	f024 0403 	bic.w	r4, r4, #3
 8008160:	42a0      	cmp	r0, r4
 8008162:	d0f8      	beq.n	8008156 <sbrk_aligned+0x22>
 8008164:	1a21      	subs	r1, r4, r0
 8008166:	4628      	mov	r0, r5
 8008168:	f000 fca2 	bl	8008ab0 <_sbrk_r>
 800816c:	3001      	adds	r0, #1
 800816e:	d1f2      	bne.n	8008156 <sbrk_aligned+0x22>
 8008170:	e7ef      	b.n	8008152 <sbrk_aligned+0x1e>
 8008172:	bf00      	nop
 8008174:	24000308 	.word	0x24000308

08008178 <_malloc_r>:
 8008178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800817c:	1ccd      	adds	r5, r1, #3
 800817e:	f025 0503 	bic.w	r5, r5, #3
 8008182:	3508      	adds	r5, #8
 8008184:	2d0c      	cmp	r5, #12
 8008186:	bf38      	it	cc
 8008188:	250c      	movcc	r5, #12
 800818a:	2d00      	cmp	r5, #0
 800818c:	4606      	mov	r6, r0
 800818e:	db01      	blt.n	8008194 <_malloc_r+0x1c>
 8008190:	42a9      	cmp	r1, r5
 8008192:	d904      	bls.n	800819e <_malloc_r+0x26>
 8008194:	230c      	movs	r3, #12
 8008196:	6033      	str	r3, [r6, #0]
 8008198:	2000      	movs	r0, #0
 800819a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800819e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008274 <_malloc_r+0xfc>
 80081a2:	f000 f869 	bl	8008278 <__malloc_lock>
 80081a6:	f8d8 3000 	ldr.w	r3, [r8]
 80081aa:	461c      	mov	r4, r3
 80081ac:	bb44      	cbnz	r4, 8008200 <_malloc_r+0x88>
 80081ae:	4629      	mov	r1, r5
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7ff ffbf 	bl	8008134 <sbrk_aligned>
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	4604      	mov	r4, r0
 80081ba:	d158      	bne.n	800826e <_malloc_r+0xf6>
 80081bc:	f8d8 4000 	ldr.w	r4, [r8]
 80081c0:	4627      	mov	r7, r4
 80081c2:	2f00      	cmp	r7, #0
 80081c4:	d143      	bne.n	800824e <_malloc_r+0xd6>
 80081c6:	2c00      	cmp	r4, #0
 80081c8:	d04b      	beq.n	8008262 <_malloc_r+0xea>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	4639      	mov	r1, r7
 80081ce:	4630      	mov	r0, r6
 80081d0:	eb04 0903 	add.w	r9, r4, r3
 80081d4:	f000 fc6c 	bl	8008ab0 <_sbrk_r>
 80081d8:	4581      	cmp	r9, r0
 80081da:	d142      	bne.n	8008262 <_malloc_r+0xea>
 80081dc:	6821      	ldr	r1, [r4, #0]
 80081de:	1a6d      	subs	r5, r5, r1
 80081e0:	4629      	mov	r1, r5
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff ffa6 	bl	8008134 <sbrk_aligned>
 80081e8:	3001      	adds	r0, #1
 80081ea:	d03a      	beq.n	8008262 <_malloc_r+0xea>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	442b      	add	r3, r5
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	f8d8 3000 	ldr.w	r3, [r8]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	bb62      	cbnz	r2, 8008254 <_malloc_r+0xdc>
 80081fa:	f8c8 7000 	str.w	r7, [r8]
 80081fe:	e00f      	b.n	8008220 <_malloc_r+0xa8>
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	1b52      	subs	r2, r2, r5
 8008204:	d420      	bmi.n	8008248 <_malloc_r+0xd0>
 8008206:	2a0b      	cmp	r2, #11
 8008208:	d917      	bls.n	800823a <_malloc_r+0xc2>
 800820a:	1961      	adds	r1, r4, r5
 800820c:	42a3      	cmp	r3, r4
 800820e:	6025      	str	r5, [r4, #0]
 8008210:	bf18      	it	ne
 8008212:	6059      	strne	r1, [r3, #4]
 8008214:	6863      	ldr	r3, [r4, #4]
 8008216:	bf08      	it	eq
 8008218:	f8c8 1000 	streq.w	r1, [r8]
 800821c:	5162      	str	r2, [r4, r5]
 800821e:	604b      	str	r3, [r1, #4]
 8008220:	4630      	mov	r0, r6
 8008222:	f000 f82f 	bl	8008284 <__malloc_unlock>
 8008226:	f104 000b 	add.w	r0, r4, #11
 800822a:	1d23      	adds	r3, r4, #4
 800822c:	f020 0007 	bic.w	r0, r0, #7
 8008230:	1ac2      	subs	r2, r0, r3
 8008232:	bf1c      	itt	ne
 8008234:	1a1b      	subne	r3, r3, r0
 8008236:	50a3      	strne	r3, [r4, r2]
 8008238:	e7af      	b.n	800819a <_malloc_r+0x22>
 800823a:	6862      	ldr	r2, [r4, #4]
 800823c:	42a3      	cmp	r3, r4
 800823e:	bf0c      	ite	eq
 8008240:	f8c8 2000 	streq.w	r2, [r8]
 8008244:	605a      	strne	r2, [r3, #4]
 8008246:	e7eb      	b.n	8008220 <_malloc_r+0xa8>
 8008248:	4623      	mov	r3, r4
 800824a:	6864      	ldr	r4, [r4, #4]
 800824c:	e7ae      	b.n	80081ac <_malloc_r+0x34>
 800824e:	463c      	mov	r4, r7
 8008250:	687f      	ldr	r7, [r7, #4]
 8008252:	e7b6      	b.n	80081c2 <_malloc_r+0x4a>
 8008254:	461a      	mov	r2, r3
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	42a3      	cmp	r3, r4
 800825a:	d1fb      	bne.n	8008254 <_malloc_r+0xdc>
 800825c:	2300      	movs	r3, #0
 800825e:	6053      	str	r3, [r2, #4]
 8008260:	e7de      	b.n	8008220 <_malloc_r+0xa8>
 8008262:	230c      	movs	r3, #12
 8008264:	6033      	str	r3, [r6, #0]
 8008266:	4630      	mov	r0, r6
 8008268:	f000 f80c 	bl	8008284 <__malloc_unlock>
 800826c:	e794      	b.n	8008198 <_malloc_r+0x20>
 800826e:	6005      	str	r5, [r0, #0]
 8008270:	e7d6      	b.n	8008220 <_malloc_r+0xa8>
 8008272:	bf00      	nop
 8008274:	2400030c 	.word	0x2400030c

08008278 <__malloc_lock>:
 8008278:	4801      	ldr	r0, [pc, #4]	@ (8008280 <__malloc_lock+0x8>)
 800827a:	f7ff bf0e 	b.w	800809a <__retarget_lock_acquire_recursive>
 800827e:	bf00      	nop
 8008280:	24000304 	.word	0x24000304

08008284 <__malloc_unlock>:
 8008284:	4801      	ldr	r0, [pc, #4]	@ (800828c <__malloc_unlock+0x8>)
 8008286:	f7ff bf09 	b.w	800809c <__retarget_lock_release_recursive>
 800828a:	bf00      	nop
 800828c:	24000304 	.word	0x24000304

08008290 <__sfputc_r>:
 8008290:	6893      	ldr	r3, [r2, #8]
 8008292:	3b01      	subs	r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	b410      	push	{r4}
 8008298:	6093      	str	r3, [r2, #8]
 800829a:	da08      	bge.n	80082ae <__sfputc_r+0x1e>
 800829c:	6994      	ldr	r4, [r2, #24]
 800829e:	42a3      	cmp	r3, r4
 80082a0:	db01      	blt.n	80082a6 <__sfputc_r+0x16>
 80082a2:	290a      	cmp	r1, #10
 80082a4:	d103      	bne.n	80082ae <__sfputc_r+0x1e>
 80082a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082aa:	f000 bb6d 	b.w	8008988 <__swbuf_r>
 80082ae:	6813      	ldr	r3, [r2, #0]
 80082b0:	1c58      	adds	r0, r3, #1
 80082b2:	6010      	str	r0, [r2, #0]
 80082b4:	7019      	strb	r1, [r3, #0]
 80082b6:	4608      	mov	r0, r1
 80082b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082bc:	4770      	bx	lr

080082be <__sfputs_r>:
 80082be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c0:	4606      	mov	r6, r0
 80082c2:	460f      	mov	r7, r1
 80082c4:	4614      	mov	r4, r2
 80082c6:	18d5      	adds	r5, r2, r3
 80082c8:	42ac      	cmp	r4, r5
 80082ca:	d101      	bne.n	80082d0 <__sfputs_r+0x12>
 80082cc:	2000      	movs	r0, #0
 80082ce:	e007      	b.n	80082e0 <__sfputs_r+0x22>
 80082d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d4:	463a      	mov	r2, r7
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7ff ffda 	bl	8008290 <__sfputc_r>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d1f3      	bne.n	80082c8 <__sfputs_r+0xa>
 80082e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082e4 <_vfiprintf_r>:
 80082e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e8:	460d      	mov	r5, r1
 80082ea:	b09d      	sub	sp, #116	@ 0x74
 80082ec:	4614      	mov	r4, r2
 80082ee:	4698      	mov	r8, r3
 80082f0:	4606      	mov	r6, r0
 80082f2:	b118      	cbz	r0, 80082fc <_vfiprintf_r+0x18>
 80082f4:	6a03      	ldr	r3, [r0, #32]
 80082f6:	b90b      	cbnz	r3, 80082fc <_vfiprintf_r+0x18>
 80082f8:	f7ff fdca 	bl	8007e90 <__sinit>
 80082fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082fe:	07d9      	lsls	r1, r3, #31
 8008300:	d405      	bmi.n	800830e <_vfiprintf_r+0x2a>
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	059a      	lsls	r2, r3, #22
 8008306:	d402      	bmi.n	800830e <_vfiprintf_r+0x2a>
 8008308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800830a:	f7ff fec6 	bl	800809a <__retarget_lock_acquire_recursive>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	071b      	lsls	r3, r3, #28
 8008312:	d501      	bpl.n	8008318 <_vfiprintf_r+0x34>
 8008314:	692b      	ldr	r3, [r5, #16]
 8008316:	b99b      	cbnz	r3, 8008340 <_vfiprintf_r+0x5c>
 8008318:	4629      	mov	r1, r5
 800831a:	4630      	mov	r0, r6
 800831c:	f000 fb72 	bl	8008a04 <__swsetup_r>
 8008320:	b170      	cbz	r0, 8008340 <_vfiprintf_r+0x5c>
 8008322:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008324:	07dc      	lsls	r4, r3, #31
 8008326:	d504      	bpl.n	8008332 <_vfiprintf_r+0x4e>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800832c:	b01d      	add	sp, #116	@ 0x74
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	89ab      	ldrh	r3, [r5, #12]
 8008334:	0598      	lsls	r0, r3, #22
 8008336:	d4f7      	bmi.n	8008328 <_vfiprintf_r+0x44>
 8008338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800833a:	f7ff feaf 	bl	800809c <__retarget_lock_release_recursive>
 800833e:	e7f3      	b.n	8008328 <_vfiprintf_r+0x44>
 8008340:	2300      	movs	r3, #0
 8008342:	9309      	str	r3, [sp, #36]	@ 0x24
 8008344:	2320      	movs	r3, #32
 8008346:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800834a:	f8cd 800c 	str.w	r8, [sp, #12]
 800834e:	2330      	movs	r3, #48	@ 0x30
 8008350:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008500 <_vfiprintf_r+0x21c>
 8008354:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008358:	f04f 0901 	mov.w	r9, #1
 800835c:	4623      	mov	r3, r4
 800835e:	469a      	mov	sl, r3
 8008360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008364:	b10a      	cbz	r2, 800836a <_vfiprintf_r+0x86>
 8008366:	2a25      	cmp	r2, #37	@ 0x25
 8008368:	d1f9      	bne.n	800835e <_vfiprintf_r+0x7a>
 800836a:	ebba 0b04 	subs.w	fp, sl, r4
 800836e:	d00b      	beq.n	8008388 <_vfiprintf_r+0xa4>
 8008370:	465b      	mov	r3, fp
 8008372:	4622      	mov	r2, r4
 8008374:	4629      	mov	r1, r5
 8008376:	4630      	mov	r0, r6
 8008378:	f7ff ffa1 	bl	80082be <__sfputs_r>
 800837c:	3001      	adds	r0, #1
 800837e:	f000 80a7 	beq.w	80084d0 <_vfiprintf_r+0x1ec>
 8008382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008384:	445a      	add	r2, fp
 8008386:	9209      	str	r2, [sp, #36]	@ 0x24
 8008388:	f89a 3000 	ldrb.w	r3, [sl]
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 809f 	beq.w	80084d0 <_vfiprintf_r+0x1ec>
 8008392:	2300      	movs	r3, #0
 8008394:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800839c:	f10a 0a01 	add.w	sl, sl, #1
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	9307      	str	r3, [sp, #28]
 80083a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80083aa:	4654      	mov	r4, sl
 80083ac:	2205      	movs	r2, #5
 80083ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b2:	4853      	ldr	r0, [pc, #332]	@ (8008500 <_vfiprintf_r+0x21c>)
 80083b4:	f7f7 ff94 	bl	80002e0 <memchr>
 80083b8:	9a04      	ldr	r2, [sp, #16]
 80083ba:	b9d8      	cbnz	r0, 80083f4 <_vfiprintf_r+0x110>
 80083bc:	06d1      	lsls	r1, r2, #27
 80083be:	bf44      	itt	mi
 80083c0:	2320      	movmi	r3, #32
 80083c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083c6:	0713      	lsls	r3, r2, #28
 80083c8:	bf44      	itt	mi
 80083ca:	232b      	movmi	r3, #43	@ 0x2b
 80083cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083d0:	f89a 3000 	ldrb.w	r3, [sl]
 80083d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80083d6:	d015      	beq.n	8008404 <_vfiprintf_r+0x120>
 80083d8:	9a07      	ldr	r2, [sp, #28]
 80083da:	4654      	mov	r4, sl
 80083dc:	2000      	movs	r0, #0
 80083de:	f04f 0c0a 	mov.w	ip, #10
 80083e2:	4621      	mov	r1, r4
 80083e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083e8:	3b30      	subs	r3, #48	@ 0x30
 80083ea:	2b09      	cmp	r3, #9
 80083ec:	d94b      	bls.n	8008486 <_vfiprintf_r+0x1a2>
 80083ee:	b1b0      	cbz	r0, 800841e <_vfiprintf_r+0x13a>
 80083f0:	9207      	str	r2, [sp, #28]
 80083f2:	e014      	b.n	800841e <_vfiprintf_r+0x13a>
 80083f4:	eba0 0308 	sub.w	r3, r0, r8
 80083f8:	fa09 f303 	lsl.w	r3, r9, r3
 80083fc:	4313      	orrs	r3, r2
 80083fe:	9304      	str	r3, [sp, #16]
 8008400:	46a2      	mov	sl, r4
 8008402:	e7d2      	b.n	80083aa <_vfiprintf_r+0xc6>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	1d19      	adds	r1, r3, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	9103      	str	r1, [sp, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	bfbb      	ittet	lt
 8008410:	425b      	neglt	r3, r3
 8008412:	f042 0202 	orrlt.w	r2, r2, #2
 8008416:	9307      	strge	r3, [sp, #28]
 8008418:	9307      	strlt	r3, [sp, #28]
 800841a:	bfb8      	it	lt
 800841c:	9204      	strlt	r2, [sp, #16]
 800841e:	7823      	ldrb	r3, [r4, #0]
 8008420:	2b2e      	cmp	r3, #46	@ 0x2e
 8008422:	d10a      	bne.n	800843a <_vfiprintf_r+0x156>
 8008424:	7863      	ldrb	r3, [r4, #1]
 8008426:	2b2a      	cmp	r3, #42	@ 0x2a
 8008428:	d132      	bne.n	8008490 <_vfiprintf_r+0x1ac>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	1d1a      	adds	r2, r3, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	9203      	str	r2, [sp, #12]
 8008432:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008436:	3402      	adds	r4, #2
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008510 <_vfiprintf_r+0x22c>
 800843e:	7821      	ldrb	r1, [r4, #0]
 8008440:	2203      	movs	r2, #3
 8008442:	4650      	mov	r0, sl
 8008444:	f7f7 ff4c 	bl	80002e0 <memchr>
 8008448:	b138      	cbz	r0, 800845a <_vfiprintf_r+0x176>
 800844a:	9b04      	ldr	r3, [sp, #16]
 800844c:	eba0 000a 	sub.w	r0, r0, sl
 8008450:	2240      	movs	r2, #64	@ 0x40
 8008452:	4082      	lsls	r2, r0
 8008454:	4313      	orrs	r3, r2
 8008456:	3401      	adds	r4, #1
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800845e:	4829      	ldr	r0, [pc, #164]	@ (8008504 <_vfiprintf_r+0x220>)
 8008460:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008464:	2206      	movs	r2, #6
 8008466:	f7f7 ff3b 	bl	80002e0 <memchr>
 800846a:	2800      	cmp	r0, #0
 800846c:	d03f      	beq.n	80084ee <_vfiprintf_r+0x20a>
 800846e:	4b26      	ldr	r3, [pc, #152]	@ (8008508 <_vfiprintf_r+0x224>)
 8008470:	bb1b      	cbnz	r3, 80084ba <_vfiprintf_r+0x1d6>
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	3307      	adds	r3, #7
 8008476:	f023 0307 	bic.w	r3, r3, #7
 800847a:	3308      	adds	r3, #8
 800847c:	9303      	str	r3, [sp, #12]
 800847e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008480:	443b      	add	r3, r7
 8008482:	9309      	str	r3, [sp, #36]	@ 0x24
 8008484:	e76a      	b.n	800835c <_vfiprintf_r+0x78>
 8008486:	fb0c 3202 	mla	r2, ip, r2, r3
 800848a:	460c      	mov	r4, r1
 800848c:	2001      	movs	r0, #1
 800848e:	e7a8      	b.n	80083e2 <_vfiprintf_r+0xfe>
 8008490:	2300      	movs	r3, #0
 8008492:	3401      	adds	r4, #1
 8008494:	9305      	str	r3, [sp, #20]
 8008496:	4619      	mov	r1, r3
 8008498:	f04f 0c0a 	mov.w	ip, #10
 800849c:	4620      	mov	r0, r4
 800849e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a2:	3a30      	subs	r2, #48	@ 0x30
 80084a4:	2a09      	cmp	r2, #9
 80084a6:	d903      	bls.n	80084b0 <_vfiprintf_r+0x1cc>
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0c6      	beq.n	800843a <_vfiprintf_r+0x156>
 80084ac:	9105      	str	r1, [sp, #20]
 80084ae:	e7c4      	b.n	800843a <_vfiprintf_r+0x156>
 80084b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80084b4:	4604      	mov	r4, r0
 80084b6:	2301      	movs	r3, #1
 80084b8:	e7f0      	b.n	800849c <_vfiprintf_r+0x1b8>
 80084ba:	ab03      	add	r3, sp, #12
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	462a      	mov	r2, r5
 80084c0:	4b12      	ldr	r3, [pc, #72]	@ (800850c <_vfiprintf_r+0x228>)
 80084c2:	a904      	add	r1, sp, #16
 80084c4:	4630      	mov	r0, r6
 80084c6:	f3af 8000 	nop.w
 80084ca:	4607      	mov	r7, r0
 80084cc:	1c78      	adds	r0, r7, #1
 80084ce:	d1d6      	bne.n	800847e <_vfiprintf_r+0x19a>
 80084d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084d2:	07d9      	lsls	r1, r3, #31
 80084d4:	d405      	bmi.n	80084e2 <_vfiprintf_r+0x1fe>
 80084d6:	89ab      	ldrh	r3, [r5, #12]
 80084d8:	059a      	lsls	r2, r3, #22
 80084da:	d402      	bmi.n	80084e2 <_vfiprintf_r+0x1fe>
 80084dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084de:	f7ff fddd 	bl	800809c <__retarget_lock_release_recursive>
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	065b      	lsls	r3, r3, #25
 80084e6:	f53f af1f 	bmi.w	8008328 <_vfiprintf_r+0x44>
 80084ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084ec:	e71e      	b.n	800832c <_vfiprintf_r+0x48>
 80084ee:	ab03      	add	r3, sp, #12
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	462a      	mov	r2, r5
 80084f4:	4b05      	ldr	r3, [pc, #20]	@ (800850c <_vfiprintf_r+0x228>)
 80084f6:	a904      	add	r1, sp, #16
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 f879 	bl	80085f0 <_printf_i>
 80084fe:	e7e4      	b.n	80084ca <_vfiprintf_r+0x1e6>
 8008500:	08008c2c 	.word	0x08008c2c
 8008504:	08008c36 	.word	0x08008c36
 8008508:	00000000 	.word	0x00000000
 800850c:	080082bf 	.word	0x080082bf
 8008510:	08008c32 	.word	0x08008c32

08008514 <_printf_common>:
 8008514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008518:	4616      	mov	r6, r2
 800851a:	4698      	mov	r8, r3
 800851c:	688a      	ldr	r2, [r1, #8]
 800851e:	690b      	ldr	r3, [r1, #16]
 8008520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008524:	4293      	cmp	r3, r2
 8008526:	bfb8      	it	lt
 8008528:	4613      	movlt	r3, r2
 800852a:	6033      	str	r3, [r6, #0]
 800852c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008530:	4607      	mov	r7, r0
 8008532:	460c      	mov	r4, r1
 8008534:	b10a      	cbz	r2, 800853a <_printf_common+0x26>
 8008536:	3301      	adds	r3, #1
 8008538:	6033      	str	r3, [r6, #0]
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	0699      	lsls	r1, r3, #26
 800853e:	bf42      	ittt	mi
 8008540:	6833      	ldrmi	r3, [r6, #0]
 8008542:	3302      	addmi	r3, #2
 8008544:	6033      	strmi	r3, [r6, #0]
 8008546:	6825      	ldr	r5, [r4, #0]
 8008548:	f015 0506 	ands.w	r5, r5, #6
 800854c:	d106      	bne.n	800855c <_printf_common+0x48>
 800854e:	f104 0a19 	add.w	sl, r4, #25
 8008552:	68e3      	ldr	r3, [r4, #12]
 8008554:	6832      	ldr	r2, [r6, #0]
 8008556:	1a9b      	subs	r3, r3, r2
 8008558:	42ab      	cmp	r3, r5
 800855a:	dc26      	bgt.n	80085aa <_printf_common+0x96>
 800855c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008560:	6822      	ldr	r2, [r4, #0]
 8008562:	3b00      	subs	r3, #0
 8008564:	bf18      	it	ne
 8008566:	2301      	movne	r3, #1
 8008568:	0692      	lsls	r2, r2, #26
 800856a:	d42b      	bmi.n	80085c4 <_printf_common+0xb0>
 800856c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008570:	4641      	mov	r1, r8
 8008572:	4638      	mov	r0, r7
 8008574:	47c8      	blx	r9
 8008576:	3001      	adds	r0, #1
 8008578:	d01e      	beq.n	80085b8 <_printf_common+0xa4>
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	6922      	ldr	r2, [r4, #16]
 800857e:	f003 0306 	and.w	r3, r3, #6
 8008582:	2b04      	cmp	r3, #4
 8008584:	bf02      	ittt	eq
 8008586:	68e5      	ldreq	r5, [r4, #12]
 8008588:	6833      	ldreq	r3, [r6, #0]
 800858a:	1aed      	subeq	r5, r5, r3
 800858c:	68a3      	ldr	r3, [r4, #8]
 800858e:	bf0c      	ite	eq
 8008590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008594:	2500      	movne	r5, #0
 8008596:	4293      	cmp	r3, r2
 8008598:	bfc4      	itt	gt
 800859a:	1a9b      	subgt	r3, r3, r2
 800859c:	18ed      	addgt	r5, r5, r3
 800859e:	2600      	movs	r6, #0
 80085a0:	341a      	adds	r4, #26
 80085a2:	42b5      	cmp	r5, r6
 80085a4:	d11a      	bne.n	80085dc <_printf_common+0xc8>
 80085a6:	2000      	movs	r0, #0
 80085a8:	e008      	b.n	80085bc <_printf_common+0xa8>
 80085aa:	2301      	movs	r3, #1
 80085ac:	4652      	mov	r2, sl
 80085ae:	4641      	mov	r1, r8
 80085b0:	4638      	mov	r0, r7
 80085b2:	47c8      	blx	r9
 80085b4:	3001      	adds	r0, #1
 80085b6:	d103      	bne.n	80085c0 <_printf_common+0xac>
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c0:	3501      	adds	r5, #1
 80085c2:	e7c6      	b.n	8008552 <_printf_common+0x3e>
 80085c4:	18e1      	adds	r1, r4, r3
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	2030      	movs	r0, #48	@ 0x30
 80085ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085ce:	4422      	add	r2, r4
 80085d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085d8:	3302      	adds	r3, #2
 80085da:	e7c7      	b.n	800856c <_printf_common+0x58>
 80085dc:	2301      	movs	r3, #1
 80085de:	4622      	mov	r2, r4
 80085e0:	4641      	mov	r1, r8
 80085e2:	4638      	mov	r0, r7
 80085e4:	47c8      	blx	r9
 80085e6:	3001      	adds	r0, #1
 80085e8:	d0e6      	beq.n	80085b8 <_printf_common+0xa4>
 80085ea:	3601      	adds	r6, #1
 80085ec:	e7d9      	b.n	80085a2 <_printf_common+0x8e>
	...

080085f0 <_printf_i>:
 80085f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085f4:	7e0f      	ldrb	r7, [r1, #24]
 80085f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085f8:	2f78      	cmp	r7, #120	@ 0x78
 80085fa:	4691      	mov	r9, r2
 80085fc:	4680      	mov	r8, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	469a      	mov	sl, r3
 8008602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008606:	d807      	bhi.n	8008618 <_printf_i+0x28>
 8008608:	2f62      	cmp	r7, #98	@ 0x62
 800860a:	d80a      	bhi.n	8008622 <_printf_i+0x32>
 800860c:	2f00      	cmp	r7, #0
 800860e:	f000 80d2 	beq.w	80087b6 <_printf_i+0x1c6>
 8008612:	2f58      	cmp	r7, #88	@ 0x58
 8008614:	f000 80b9 	beq.w	800878a <_printf_i+0x19a>
 8008618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800861c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008620:	e03a      	b.n	8008698 <_printf_i+0xa8>
 8008622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008626:	2b15      	cmp	r3, #21
 8008628:	d8f6      	bhi.n	8008618 <_printf_i+0x28>
 800862a:	a101      	add	r1, pc, #4	@ (adr r1, 8008630 <_printf_i+0x40>)
 800862c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008630:	08008689 	.word	0x08008689
 8008634:	0800869d 	.word	0x0800869d
 8008638:	08008619 	.word	0x08008619
 800863c:	08008619 	.word	0x08008619
 8008640:	08008619 	.word	0x08008619
 8008644:	08008619 	.word	0x08008619
 8008648:	0800869d 	.word	0x0800869d
 800864c:	08008619 	.word	0x08008619
 8008650:	08008619 	.word	0x08008619
 8008654:	08008619 	.word	0x08008619
 8008658:	08008619 	.word	0x08008619
 800865c:	0800879d 	.word	0x0800879d
 8008660:	080086c7 	.word	0x080086c7
 8008664:	08008757 	.word	0x08008757
 8008668:	08008619 	.word	0x08008619
 800866c:	08008619 	.word	0x08008619
 8008670:	080087bf 	.word	0x080087bf
 8008674:	08008619 	.word	0x08008619
 8008678:	080086c7 	.word	0x080086c7
 800867c:	08008619 	.word	0x08008619
 8008680:	08008619 	.word	0x08008619
 8008684:	0800875f 	.word	0x0800875f
 8008688:	6833      	ldr	r3, [r6, #0]
 800868a:	1d1a      	adds	r2, r3, #4
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6032      	str	r2, [r6, #0]
 8008690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008698:	2301      	movs	r3, #1
 800869a:	e09d      	b.n	80087d8 <_printf_i+0x1e8>
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	6820      	ldr	r0, [r4, #0]
 80086a0:	1d19      	adds	r1, r3, #4
 80086a2:	6031      	str	r1, [r6, #0]
 80086a4:	0606      	lsls	r6, r0, #24
 80086a6:	d501      	bpl.n	80086ac <_printf_i+0xbc>
 80086a8:	681d      	ldr	r5, [r3, #0]
 80086aa:	e003      	b.n	80086b4 <_printf_i+0xc4>
 80086ac:	0645      	lsls	r5, r0, #25
 80086ae:	d5fb      	bpl.n	80086a8 <_printf_i+0xb8>
 80086b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086b4:	2d00      	cmp	r5, #0
 80086b6:	da03      	bge.n	80086c0 <_printf_i+0xd0>
 80086b8:	232d      	movs	r3, #45	@ 0x2d
 80086ba:	426d      	negs	r5, r5
 80086bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086c0:	4859      	ldr	r0, [pc, #356]	@ (8008828 <_printf_i+0x238>)
 80086c2:	230a      	movs	r3, #10
 80086c4:	e011      	b.n	80086ea <_printf_i+0xfa>
 80086c6:	6821      	ldr	r1, [r4, #0]
 80086c8:	6833      	ldr	r3, [r6, #0]
 80086ca:	0608      	lsls	r0, r1, #24
 80086cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80086d0:	d402      	bmi.n	80086d8 <_printf_i+0xe8>
 80086d2:	0649      	lsls	r1, r1, #25
 80086d4:	bf48      	it	mi
 80086d6:	b2ad      	uxthmi	r5, r5
 80086d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80086da:	4853      	ldr	r0, [pc, #332]	@ (8008828 <_printf_i+0x238>)
 80086dc:	6033      	str	r3, [r6, #0]
 80086de:	bf14      	ite	ne
 80086e0:	230a      	movne	r3, #10
 80086e2:	2308      	moveq	r3, #8
 80086e4:	2100      	movs	r1, #0
 80086e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086ea:	6866      	ldr	r6, [r4, #4]
 80086ec:	60a6      	str	r6, [r4, #8]
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	bfa2      	ittt	ge
 80086f2:	6821      	ldrge	r1, [r4, #0]
 80086f4:	f021 0104 	bicge.w	r1, r1, #4
 80086f8:	6021      	strge	r1, [r4, #0]
 80086fa:	b90d      	cbnz	r5, 8008700 <_printf_i+0x110>
 80086fc:	2e00      	cmp	r6, #0
 80086fe:	d04b      	beq.n	8008798 <_printf_i+0x1a8>
 8008700:	4616      	mov	r6, r2
 8008702:	fbb5 f1f3 	udiv	r1, r5, r3
 8008706:	fb03 5711 	mls	r7, r3, r1, r5
 800870a:	5dc7      	ldrb	r7, [r0, r7]
 800870c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008710:	462f      	mov	r7, r5
 8008712:	42bb      	cmp	r3, r7
 8008714:	460d      	mov	r5, r1
 8008716:	d9f4      	bls.n	8008702 <_printf_i+0x112>
 8008718:	2b08      	cmp	r3, #8
 800871a:	d10b      	bne.n	8008734 <_printf_i+0x144>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	07df      	lsls	r7, r3, #31
 8008720:	d508      	bpl.n	8008734 <_printf_i+0x144>
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	6861      	ldr	r1, [r4, #4]
 8008726:	4299      	cmp	r1, r3
 8008728:	bfde      	ittt	le
 800872a:	2330      	movle	r3, #48	@ 0x30
 800872c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008730:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008734:	1b92      	subs	r2, r2, r6
 8008736:	6122      	str	r2, [r4, #16]
 8008738:	f8cd a000 	str.w	sl, [sp]
 800873c:	464b      	mov	r3, r9
 800873e:	aa03      	add	r2, sp, #12
 8008740:	4621      	mov	r1, r4
 8008742:	4640      	mov	r0, r8
 8008744:	f7ff fee6 	bl	8008514 <_printf_common>
 8008748:	3001      	adds	r0, #1
 800874a:	d14a      	bne.n	80087e2 <_printf_i+0x1f2>
 800874c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008750:	b004      	add	sp, #16
 8008752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	f043 0320 	orr.w	r3, r3, #32
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	4833      	ldr	r0, [pc, #204]	@ (800882c <_printf_i+0x23c>)
 8008760:	2778      	movs	r7, #120	@ 0x78
 8008762:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	6831      	ldr	r1, [r6, #0]
 800876a:	061f      	lsls	r7, r3, #24
 800876c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008770:	d402      	bmi.n	8008778 <_printf_i+0x188>
 8008772:	065f      	lsls	r7, r3, #25
 8008774:	bf48      	it	mi
 8008776:	b2ad      	uxthmi	r5, r5
 8008778:	6031      	str	r1, [r6, #0]
 800877a:	07d9      	lsls	r1, r3, #31
 800877c:	bf44      	itt	mi
 800877e:	f043 0320 	orrmi.w	r3, r3, #32
 8008782:	6023      	strmi	r3, [r4, #0]
 8008784:	b11d      	cbz	r5, 800878e <_printf_i+0x19e>
 8008786:	2310      	movs	r3, #16
 8008788:	e7ac      	b.n	80086e4 <_printf_i+0xf4>
 800878a:	4827      	ldr	r0, [pc, #156]	@ (8008828 <_printf_i+0x238>)
 800878c:	e7e9      	b.n	8008762 <_printf_i+0x172>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	f023 0320 	bic.w	r3, r3, #32
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	e7f6      	b.n	8008786 <_printf_i+0x196>
 8008798:	4616      	mov	r6, r2
 800879a:	e7bd      	b.n	8008718 <_printf_i+0x128>
 800879c:	6833      	ldr	r3, [r6, #0]
 800879e:	6825      	ldr	r5, [r4, #0]
 80087a0:	6961      	ldr	r1, [r4, #20]
 80087a2:	1d18      	adds	r0, r3, #4
 80087a4:	6030      	str	r0, [r6, #0]
 80087a6:	062e      	lsls	r6, r5, #24
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	d501      	bpl.n	80087b0 <_printf_i+0x1c0>
 80087ac:	6019      	str	r1, [r3, #0]
 80087ae:	e002      	b.n	80087b6 <_printf_i+0x1c6>
 80087b0:	0668      	lsls	r0, r5, #25
 80087b2:	d5fb      	bpl.n	80087ac <_printf_i+0x1bc>
 80087b4:	8019      	strh	r1, [r3, #0]
 80087b6:	2300      	movs	r3, #0
 80087b8:	6123      	str	r3, [r4, #16]
 80087ba:	4616      	mov	r6, r2
 80087bc:	e7bc      	b.n	8008738 <_printf_i+0x148>
 80087be:	6833      	ldr	r3, [r6, #0]
 80087c0:	1d1a      	adds	r2, r3, #4
 80087c2:	6032      	str	r2, [r6, #0]
 80087c4:	681e      	ldr	r6, [r3, #0]
 80087c6:	6862      	ldr	r2, [r4, #4]
 80087c8:	2100      	movs	r1, #0
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7f7 fd88 	bl	80002e0 <memchr>
 80087d0:	b108      	cbz	r0, 80087d6 <_printf_i+0x1e6>
 80087d2:	1b80      	subs	r0, r0, r6
 80087d4:	6060      	str	r0, [r4, #4]
 80087d6:	6863      	ldr	r3, [r4, #4]
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	2300      	movs	r3, #0
 80087dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087e0:	e7aa      	b.n	8008738 <_printf_i+0x148>
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	4632      	mov	r2, r6
 80087e6:	4649      	mov	r1, r9
 80087e8:	4640      	mov	r0, r8
 80087ea:	47d0      	blx	sl
 80087ec:	3001      	adds	r0, #1
 80087ee:	d0ad      	beq.n	800874c <_printf_i+0x15c>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	079b      	lsls	r3, r3, #30
 80087f4:	d413      	bmi.n	800881e <_printf_i+0x22e>
 80087f6:	68e0      	ldr	r0, [r4, #12]
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	4298      	cmp	r0, r3
 80087fc:	bfb8      	it	lt
 80087fe:	4618      	movlt	r0, r3
 8008800:	e7a6      	b.n	8008750 <_printf_i+0x160>
 8008802:	2301      	movs	r3, #1
 8008804:	4632      	mov	r2, r6
 8008806:	4649      	mov	r1, r9
 8008808:	4640      	mov	r0, r8
 800880a:	47d0      	blx	sl
 800880c:	3001      	adds	r0, #1
 800880e:	d09d      	beq.n	800874c <_printf_i+0x15c>
 8008810:	3501      	adds	r5, #1
 8008812:	68e3      	ldr	r3, [r4, #12]
 8008814:	9903      	ldr	r1, [sp, #12]
 8008816:	1a5b      	subs	r3, r3, r1
 8008818:	42ab      	cmp	r3, r5
 800881a:	dcf2      	bgt.n	8008802 <_printf_i+0x212>
 800881c:	e7eb      	b.n	80087f6 <_printf_i+0x206>
 800881e:	2500      	movs	r5, #0
 8008820:	f104 0619 	add.w	r6, r4, #25
 8008824:	e7f5      	b.n	8008812 <_printf_i+0x222>
 8008826:	bf00      	nop
 8008828:	08008c3d 	.word	0x08008c3d
 800882c:	08008c4e 	.word	0x08008c4e

08008830 <__sflush_r>:
 8008830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008838:	0716      	lsls	r6, r2, #28
 800883a:	4605      	mov	r5, r0
 800883c:	460c      	mov	r4, r1
 800883e:	d454      	bmi.n	80088ea <__sflush_r+0xba>
 8008840:	684b      	ldr	r3, [r1, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	dc02      	bgt.n	800884c <__sflush_r+0x1c>
 8008846:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008848:	2b00      	cmp	r3, #0
 800884a:	dd48      	ble.n	80088de <__sflush_r+0xae>
 800884c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800884e:	2e00      	cmp	r6, #0
 8008850:	d045      	beq.n	80088de <__sflush_r+0xae>
 8008852:	2300      	movs	r3, #0
 8008854:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008858:	682f      	ldr	r7, [r5, #0]
 800885a:	6a21      	ldr	r1, [r4, #32]
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	d030      	beq.n	80088c2 <__sflush_r+0x92>
 8008860:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	0759      	lsls	r1, r3, #29
 8008866:	d505      	bpl.n	8008874 <__sflush_r+0x44>
 8008868:	6863      	ldr	r3, [r4, #4]
 800886a:	1ad2      	subs	r2, r2, r3
 800886c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800886e:	b10b      	cbz	r3, 8008874 <__sflush_r+0x44>
 8008870:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008872:	1ad2      	subs	r2, r2, r3
 8008874:	2300      	movs	r3, #0
 8008876:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008878:	6a21      	ldr	r1, [r4, #32]
 800887a:	4628      	mov	r0, r5
 800887c:	47b0      	blx	r6
 800887e:	1c43      	adds	r3, r0, #1
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	d106      	bne.n	8008892 <__sflush_r+0x62>
 8008884:	6829      	ldr	r1, [r5, #0]
 8008886:	291d      	cmp	r1, #29
 8008888:	d82b      	bhi.n	80088e2 <__sflush_r+0xb2>
 800888a:	4a2a      	ldr	r2, [pc, #168]	@ (8008934 <__sflush_r+0x104>)
 800888c:	410a      	asrs	r2, r1
 800888e:	07d6      	lsls	r6, r2, #31
 8008890:	d427      	bmi.n	80088e2 <__sflush_r+0xb2>
 8008892:	2200      	movs	r2, #0
 8008894:	6062      	str	r2, [r4, #4]
 8008896:	04d9      	lsls	r1, r3, #19
 8008898:	6922      	ldr	r2, [r4, #16]
 800889a:	6022      	str	r2, [r4, #0]
 800889c:	d504      	bpl.n	80088a8 <__sflush_r+0x78>
 800889e:	1c42      	adds	r2, r0, #1
 80088a0:	d101      	bne.n	80088a6 <__sflush_r+0x76>
 80088a2:	682b      	ldr	r3, [r5, #0]
 80088a4:	b903      	cbnz	r3, 80088a8 <__sflush_r+0x78>
 80088a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80088a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088aa:	602f      	str	r7, [r5, #0]
 80088ac:	b1b9      	cbz	r1, 80088de <__sflush_r+0xae>
 80088ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088b2:	4299      	cmp	r1, r3
 80088b4:	d002      	beq.n	80088bc <__sflush_r+0x8c>
 80088b6:	4628      	mov	r0, r5
 80088b8:	f7ff fbf2 	bl	80080a0 <_free_r>
 80088bc:	2300      	movs	r3, #0
 80088be:	6363      	str	r3, [r4, #52]	@ 0x34
 80088c0:	e00d      	b.n	80088de <__sflush_r+0xae>
 80088c2:	2301      	movs	r3, #1
 80088c4:	4628      	mov	r0, r5
 80088c6:	47b0      	blx	r6
 80088c8:	4602      	mov	r2, r0
 80088ca:	1c50      	adds	r0, r2, #1
 80088cc:	d1c9      	bne.n	8008862 <__sflush_r+0x32>
 80088ce:	682b      	ldr	r3, [r5, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0c6      	beq.n	8008862 <__sflush_r+0x32>
 80088d4:	2b1d      	cmp	r3, #29
 80088d6:	d001      	beq.n	80088dc <__sflush_r+0xac>
 80088d8:	2b16      	cmp	r3, #22
 80088da:	d11e      	bne.n	800891a <__sflush_r+0xea>
 80088dc:	602f      	str	r7, [r5, #0]
 80088de:	2000      	movs	r0, #0
 80088e0:	e022      	b.n	8008928 <__sflush_r+0xf8>
 80088e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e6:	b21b      	sxth	r3, r3
 80088e8:	e01b      	b.n	8008922 <__sflush_r+0xf2>
 80088ea:	690f      	ldr	r7, [r1, #16]
 80088ec:	2f00      	cmp	r7, #0
 80088ee:	d0f6      	beq.n	80088de <__sflush_r+0xae>
 80088f0:	0793      	lsls	r3, r2, #30
 80088f2:	680e      	ldr	r6, [r1, #0]
 80088f4:	bf08      	it	eq
 80088f6:	694b      	ldreq	r3, [r1, #20]
 80088f8:	600f      	str	r7, [r1, #0]
 80088fa:	bf18      	it	ne
 80088fc:	2300      	movne	r3, #0
 80088fe:	eba6 0807 	sub.w	r8, r6, r7
 8008902:	608b      	str	r3, [r1, #8]
 8008904:	f1b8 0f00 	cmp.w	r8, #0
 8008908:	dde9      	ble.n	80088de <__sflush_r+0xae>
 800890a:	6a21      	ldr	r1, [r4, #32]
 800890c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800890e:	4643      	mov	r3, r8
 8008910:	463a      	mov	r2, r7
 8008912:	4628      	mov	r0, r5
 8008914:	47b0      	blx	r6
 8008916:	2800      	cmp	r0, #0
 8008918:	dc08      	bgt.n	800892c <__sflush_r+0xfc>
 800891a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800892c:	4407      	add	r7, r0
 800892e:	eba8 0800 	sub.w	r8, r8, r0
 8008932:	e7e7      	b.n	8008904 <__sflush_r+0xd4>
 8008934:	dfbffffe 	.word	0xdfbffffe

08008938 <_fflush_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	690b      	ldr	r3, [r1, #16]
 800893c:	4605      	mov	r5, r0
 800893e:	460c      	mov	r4, r1
 8008940:	b913      	cbnz	r3, 8008948 <_fflush_r+0x10>
 8008942:	2500      	movs	r5, #0
 8008944:	4628      	mov	r0, r5
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	b118      	cbz	r0, 8008952 <_fflush_r+0x1a>
 800894a:	6a03      	ldr	r3, [r0, #32]
 800894c:	b90b      	cbnz	r3, 8008952 <_fflush_r+0x1a>
 800894e:	f7ff fa9f 	bl	8007e90 <__sinit>
 8008952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0f3      	beq.n	8008942 <_fflush_r+0xa>
 800895a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800895c:	07d0      	lsls	r0, r2, #31
 800895e:	d404      	bmi.n	800896a <_fflush_r+0x32>
 8008960:	0599      	lsls	r1, r3, #22
 8008962:	d402      	bmi.n	800896a <_fflush_r+0x32>
 8008964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008966:	f7ff fb98 	bl	800809a <__retarget_lock_acquire_recursive>
 800896a:	4628      	mov	r0, r5
 800896c:	4621      	mov	r1, r4
 800896e:	f7ff ff5f 	bl	8008830 <__sflush_r>
 8008972:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008974:	07da      	lsls	r2, r3, #31
 8008976:	4605      	mov	r5, r0
 8008978:	d4e4      	bmi.n	8008944 <_fflush_r+0xc>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	059b      	lsls	r3, r3, #22
 800897e:	d4e1      	bmi.n	8008944 <_fflush_r+0xc>
 8008980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008982:	f7ff fb8b 	bl	800809c <__retarget_lock_release_recursive>
 8008986:	e7dd      	b.n	8008944 <_fflush_r+0xc>

08008988 <__swbuf_r>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	460e      	mov	r6, r1
 800898c:	4614      	mov	r4, r2
 800898e:	4605      	mov	r5, r0
 8008990:	b118      	cbz	r0, 800899a <__swbuf_r+0x12>
 8008992:	6a03      	ldr	r3, [r0, #32]
 8008994:	b90b      	cbnz	r3, 800899a <__swbuf_r+0x12>
 8008996:	f7ff fa7b 	bl	8007e90 <__sinit>
 800899a:	69a3      	ldr	r3, [r4, #24]
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	071a      	lsls	r2, r3, #28
 80089a2:	d501      	bpl.n	80089a8 <__swbuf_r+0x20>
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	b943      	cbnz	r3, 80089ba <__swbuf_r+0x32>
 80089a8:	4621      	mov	r1, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f82a 	bl	8008a04 <__swsetup_r>
 80089b0:	b118      	cbz	r0, 80089ba <__swbuf_r+0x32>
 80089b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80089b6:	4638      	mov	r0, r7
 80089b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	6922      	ldr	r2, [r4, #16]
 80089be:	1a98      	subs	r0, r3, r2
 80089c0:	6963      	ldr	r3, [r4, #20]
 80089c2:	b2f6      	uxtb	r6, r6
 80089c4:	4283      	cmp	r3, r0
 80089c6:	4637      	mov	r7, r6
 80089c8:	dc05      	bgt.n	80089d6 <__swbuf_r+0x4e>
 80089ca:	4621      	mov	r1, r4
 80089cc:	4628      	mov	r0, r5
 80089ce:	f7ff ffb3 	bl	8008938 <_fflush_r>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d1ed      	bne.n	80089b2 <__swbuf_r+0x2a>
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	3b01      	subs	r3, #1
 80089da:	60a3      	str	r3, [r4, #8]
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	6022      	str	r2, [r4, #0]
 80089e2:	701e      	strb	r6, [r3, #0]
 80089e4:	6962      	ldr	r2, [r4, #20]
 80089e6:	1c43      	adds	r3, r0, #1
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d004      	beq.n	80089f6 <__swbuf_r+0x6e>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	07db      	lsls	r3, r3, #31
 80089f0:	d5e1      	bpl.n	80089b6 <__swbuf_r+0x2e>
 80089f2:	2e0a      	cmp	r6, #10
 80089f4:	d1df      	bne.n	80089b6 <__swbuf_r+0x2e>
 80089f6:	4621      	mov	r1, r4
 80089f8:	4628      	mov	r0, r5
 80089fa:	f7ff ff9d 	bl	8008938 <_fflush_r>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d0d9      	beq.n	80089b6 <__swbuf_r+0x2e>
 8008a02:	e7d6      	b.n	80089b2 <__swbuf_r+0x2a>

08008a04 <__swsetup_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4b29      	ldr	r3, [pc, #164]	@ (8008aac <__swsetup_r+0xa8>)
 8008a08:	4605      	mov	r5, r0
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	b118      	cbz	r0, 8008a18 <__swsetup_r+0x14>
 8008a10:	6a03      	ldr	r3, [r0, #32]
 8008a12:	b90b      	cbnz	r3, 8008a18 <__swsetup_r+0x14>
 8008a14:	f7ff fa3c 	bl	8007e90 <__sinit>
 8008a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1c:	0719      	lsls	r1, r3, #28
 8008a1e:	d422      	bmi.n	8008a66 <__swsetup_r+0x62>
 8008a20:	06da      	lsls	r2, r3, #27
 8008a22:	d407      	bmi.n	8008a34 <__swsetup_r+0x30>
 8008a24:	2209      	movs	r2, #9
 8008a26:	602a      	str	r2, [r5, #0]
 8008a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a32:	e033      	b.n	8008a9c <__swsetup_r+0x98>
 8008a34:	0758      	lsls	r0, r3, #29
 8008a36:	d512      	bpl.n	8008a5e <__swsetup_r+0x5a>
 8008a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a3a:	b141      	cbz	r1, 8008a4e <__swsetup_r+0x4a>
 8008a3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a40:	4299      	cmp	r1, r3
 8008a42:	d002      	beq.n	8008a4a <__swsetup_r+0x46>
 8008a44:	4628      	mov	r0, r5
 8008a46:	f7ff fb2b 	bl	80080a0 <_free_r>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	2300      	movs	r3, #0
 8008a58:	6063      	str	r3, [r4, #4]
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	f043 0308 	orr.w	r3, r3, #8
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	b94b      	cbnz	r3, 8008a7e <__swsetup_r+0x7a>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a74:	d003      	beq.n	8008a7e <__swsetup_r+0x7a>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f000 f84f 	bl	8008b1c <__smakebuf_r>
 8008a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a82:	f013 0201 	ands.w	r2, r3, #1
 8008a86:	d00a      	beq.n	8008a9e <__swsetup_r+0x9a>
 8008a88:	2200      	movs	r2, #0
 8008a8a:	60a2      	str	r2, [r4, #8]
 8008a8c:	6962      	ldr	r2, [r4, #20]
 8008a8e:	4252      	negs	r2, r2
 8008a90:	61a2      	str	r2, [r4, #24]
 8008a92:	6922      	ldr	r2, [r4, #16]
 8008a94:	b942      	cbnz	r2, 8008aa8 <__swsetup_r+0xa4>
 8008a96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a9a:	d1c5      	bne.n	8008a28 <__swsetup_r+0x24>
 8008a9c:	bd38      	pop	{r3, r4, r5, pc}
 8008a9e:	0799      	lsls	r1, r3, #30
 8008aa0:	bf58      	it	pl
 8008aa2:	6962      	ldrpl	r2, [r4, #20]
 8008aa4:	60a2      	str	r2, [r4, #8]
 8008aa6:	e7f4      	b.n	8008a92 <__swsetup_r+0x8e>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e7f7      	b.n	8008a9c <__swsetup_r+0x98>
 8008aac:	24000038 	.word	0x24000038

08008ab0 <_sbrk_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d06      	ldr	r5, [pc, #24]	@ (8008acc <_sbrk_r+0x1c>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	f7f8 f9e2 	bl	8000e84 <_sbrk>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_sbrk_r+0x1a>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_sbrk_r+0x1a>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	24000300 	.word	0x24000300

08008ad0 <__swhatbuf_r>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	b096      	sub	sp, #88	@ 0x58
 8008adc:	4615      	mov	r5, r2
 8008ade:	461e      	mov	r6, r3
 8008ae0:	da0d      	bge.n	8008afe <__swhatbuf_r+0x2e>
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ae8:	f04f 0100 	mov.w	r1, #0
 8008aec:	bf14      	ite	ne
 8008aee:	2340      	movne	r3, #64	@ 0x40
 8008af0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008af4:	2000      	movs	r0, #0
 8008af6:	6031      	str	r1, [r6, #0]
 8008af8:	602b      	str	r3, [r5, #0]
 8008afa:	b016      	add	sp, #88	@ 0x58
 8008afc:	bd70      	pop	{r4, r5, r6, pc}
 8008afe:	466a      	mov	r2, sp
 8008b00:	f000 f848 	bl	8008b94 <_fstat_r>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	dbec      	blt.n	8008ae2 <__swhatbuf_r+0x12>
 8008b08:	9901      	ldr	r1, [sp, #4]
 8008b0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b12:	4259      	negs	r1, r3
 8008b14:	4159      	adcs	r1, r3
 8008b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b1a:	e7eb      	b.n	8008af4 <__swhatbuf_r+0x24>

08008b1c <__smakebuf_r>:
 8008b1c:	898b      	ldrh	r3, [r1, #12]
 8008b1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b20:	079d      	lsls	r5, r3, #30
 8008b22:	4606      	mov	r6, r0
 8008b24:	460c      	mov	r4, r1
 8008b26:	d507      	bpl.n	8008b38 <__smakebuf_r+0x1c>
 8008b28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	2301      	movs	r3, #1
 8008b32:	6163      	str	r3, [r4, #20]
 8008b34:	b003      	add	sp, #12
 8008b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b38:	ab01      	add	r3, sp, #4
 8008b3a:	466a      	mov	r2, sp
 8008b3c:	f7ff ffc8 	bl	8008ad0 <__swhatbuf_r>
 8008b40:	9f00      	ldr	r7, [sp, #0]
 8008b42:	4605      	mov	r5, r0
 8008b44:	4639      	mov	r1, r7
 8008b46:	4630      	mov	r0, r6
 8008b48:	f7ff fb16 	bl	8008178 <_malloc_r>
 8008b4c:	b948      	cbnz	r0, 8008b62 <__smakebuf_r+0x46>
 8008b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b52:	059a      	lsls	r2, r3, #22
 8008b54:	d4ee      	bmi.n	8008b34 <__smakebuf_r+0x18>
 8008b56:	f023 0303 	bic.w	r3, r3, #3
 8008b5a:	f043 0302 	orr.w	r3, r3, #2
 8008b5e:	81a3      	strh	r3, [r4, #12]
 8008b60:	e7e2      	b.n	8008b28 <__smakebuf_r+0xc>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	6020      	str	r0, [r4, #0]
 8008b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	9b01      	ldr	r3, [sp, #4]
 8008b6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b72:	b15b      	cbz	r3, 8008b8c <__smakebuf_r+0x70>
 8008b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f000 f81d 	bl	8008bb8 <_isatty_r>
 8008b7e:	b128      	cbz	r0, 8008b8c <__smakebuf_r+0x70>
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f023 0303 	bic.w	r3, r3, #3
 8008b86:	f043 0301 	orr.w	r3, r3, #1
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	431d      	orrs	r5, r3
 8008b90:	81a5      	strh	r5, [r4, #12]
 8008b92:	e7cf      	b.n	8008b34 <__smakebuf_r+0x18>

08008b94 <_fstat_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4d07      	ldr	r5, [pc, #28]	@ (8008bb4 <_fstat_r+0x20>)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	602b      	str	r3, [r5, #0]
 8008ba2:	f7f8 f946 	bl	8000e32 <_fstat>
 8008ba6:	1c43      	adds	r3, r0, #1
 8008ba8:	d102      	bne.n	8008bb0 <_fstat_r+0x1c>
 8008baa:	682b      	ldr	r3, [r5, #0]
 8008bac:	b103      	cbz	r3, 8008bb0 <_fstat_r+0x1c>
 8008bae:	6023      	str	r3, [r4, #0]
 8008bb0:	bd38      	pop	{r3, r4, r5, pc}
 8008bb2:	bf00      	nop
 8008bb4:	24000300 	.word	0x24000300

08008bb8 <_isatty_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4d06      	ldr	r5, [pc, #24]	@ (8008bd4 <_isatty_r+0x1c>)
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	602b      	str	r3, [r5, #0]
 8008bc4:	f7f8 f945 	bl	8000e52 <_isatty>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_isatty_r+0x1a>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_isatty_r+0x1a>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	24000300 	.word	0x24000300

08008bd8 <_init>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr

08008be4 <_fini>:
 8008be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be6:	bf00      	nop
 8008be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bea:	bc08      	pop	{r3}
 8008bec:	469e      	mov	lr, r3
 8008bee:	4770      	bx	lr
